// fn0C00_0000
// Return size: 0
void fn0C00_0000(byte al, selector ds)
fn0C00_0000_entry:
	def fp
	def al
	def ds
	sp_1 = fp
	// succ:  l0C00_0000
l0C00_0000:
	C_4 = fn0C00_000A(al, out al_3)
	branch Test(ULT,C_4) l0C00_0009
	// succ:  l0C00_0005 l0C00_0009
l0C00_0005:
	Mem5[ds:0x0300:byte] = al_3
	// succ:  l0C00_0009
l0C00_0009:
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// fn0C00_0000
// Return size: 0
void fn0C00_0000(byte al, selector ds)
fn0C00_0000_entry:
	def al
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	C_4 = fn0C00_000A(al, out al_3)
	branch Test(ULT,C_4) l0C00_0009
	// succ:  l0C00_0005 l0C00_0009
l0C00_0005:
	Mem5[ds:0x0300:byte] = al_3
	// succ:  l0C00_0009
l0C00_0009:
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
====================
// fn0C00_000A
// Return size: 0
bool fn0C00_000A(byte al, ptr16 & alOut)
fn0C00_000A_entry:
	def fp
	def al
	def alOut
	sp_1 = fp
	// succ:  l0C00_000A
l0C00_000A:
	SCZO_3 = cond(al - 0x30)
	C_4 = (bool) SCZO_3 (alias)
	CZ_5 = SCZO_3 (alias)
	branch Test(ULT,C_4) l0C00_0032
	// succ:  l0C00_000E l0C00_0032
l0C00_000E:
	SCZO_16 = cond(al - 0x39)
	C_17 = (bool) SCZO_16 (alias)
	CZ_18 = SCZO_16 (alias)
	branch Test(ULE,CZ_18) l0C00_0022
	// succ:  l0C00_0012 l0C00_0022
l0C00_0012:
	SCZO_37 = cond(al - 0x41)
	C_38 = (bool) SCZO_37 (alias)
	CZ_39 = SCZO_37 (alias)
	branch Test(ULT,C_38) l0C00_0032
	// succ:  l0C00_0016 l0C00_0032
l0C00_0016:
	SCZO_40 = cond(al - 0x46)
	C_41 = (bool) SCZO_40 (alias)
	CZ_42 = SCZO_40 (alias)
	branch Test(ULE,CZ_42) l0C00_0022
	// succ:  l0C00_001A l0C00_0022
l0C00_001A:
	SCZO_43 = cond(al - 0x61)
	C_44 = (bool) SCZO_43 (alias)
	CZ_45 = SCZO_43 (alias)
	branch Test(ULT,C_44) l0C00_0032
	// succ:  l0C00_001E l0C00_0032
l0C00_001E:
	SCZO_46 = cond(al - 0x66)
	C_47 = (bool) SCZO_46 (alias)
	CZ_48 = SCZO_46 (alias)
	branch Test(UGT,CZ_48) l0C00_0032
	// succ:  l0C00_0022 l0C00_0032
l0C00_0022:
	al_19 = al - 0x30
	SCZO_20 = cond(al_19 - 0x0A)
	C_21 = (bool) SCZO_20 (alias)
	CZ_22 = SCZO_20 (alias)
	branch Test(ULT,C_21) l0C00_0030
	// succ:  l0C00_0028 l0C00_0030
l0C00_0028:
	al_29 = al_19 - 0x07
	SCZO_30 = cond(al_29 - 0x10)
	C_31 = (bool) SCZO_30 (alias)
	CZ_32 = SCZO_30 (alias)
	branch Test(ULT,C_31) l0C00_0030
	// succ:  l0C00_002E l0C00_0030
l0C00_002E:
	al_33 = al_29 - 0x20
	SCZO_34 = cond(al_33)
	C_35 = (bool) SCZO_34 (alias)
	CZ_36 = SCZO_34 (alias)
	// succ:  l0C00_0030
l0C00_0030:
	al_23 = PHI((al_19, l0C00_0022), (al_29, l0C00_0028), (al_33, l0C00_002E))
	SCZO_24 = PHI((SCZO_20, l0C00_0022), (SCZO_30, l0C00_0028), (SCZO_34, l0C00_002E))
	CZ_25 = PHI((CZ_22, l0C00_0022), (CZ_32, l0C00_0028), (CZ_36, l0C00_002E))
	C_26 = false
	SCZO_27 = DPB(SCZO_24, C_26, 0) (alias)
	CZ_28 = DPB(CZ_25, C_26, 0) (alias)
	return C_26
	// succ:  fn0C00_000A_exit
l0C00_0032:
	SCZO_11 = PHI((SCZO_3, l0C00_000A), (SCZO_37, l0C00_0012), (SCZO_43, l0C00_001A), (SCZO_46, l0C00_001E))
	CZ_12 = PHI((CZ_5, l0C00_000A), (CZ_39, l0C00_0012), (CZ_45, l0C00_001A), (CZ_48, l0C00_001E))
	C_13 = true
	SCZO_14 = DPB(SCZO_11, C_13, 0) (alias)
	CZ_15 = DPB(CZ_12, C_13, 0) (alias)
	return C_13
	// succ:  fn0C00_000A_exit
fn0C00_000A_exit:
	al_6 = PHI((al, l0C00_0032), (al_23, l0C00_0030))
	C_7 = PHI((C_13, l0C00_0032), (C_26, l0C00_0030))
	SCZO_8 = PHI((SCZO_14, l0C00_0032), (SCZO_27, l0C00_0030))
	CZ_9 = PHI((CZ_15, l0C00_0032), (CZ_28, l0C00_0030))
	use al_6 (=> alOut)

// fn0C00_000A
// Return size: 0
bool fn0C00_000A(byte al, ptr16 & alOut)
fn0C00_000A_entry:
	def al
	*alOut = al
	def alOut
	// succ:  l0C00_000A
l0C00_000A:
	SCZO_3 = cond(al - 0x30)
	C_4 = (bool) SCZO_3 (alias)
	branch Test(ULT,C_4) l0C00_0032
	// succ:  l0C00_000E l0C00_0032
l0C00_000E:
	SCZO_16 = cond(al - 0x39)
	CZ_18 = SCZO_16 (alias)
	branch Test(ULE,CZ_18) l0C00_0022
	// succ:  l0C00_0012 l0C00_0022
l0C00_0012:
	SCZO_37 = cond(al - 0x41)
	C_38 = (bool) SCZO_37 (alias)
	branch Test(ULT,C_38) l0C00_0032
	// succ:  l0C00_0016 l0C00_0032
l0C00_0016:
	SCZO_40 = cond(al - 0x46)
	CZ_42 = SCZO_40 (alias)
	branch Test(ULE,CZ_42) l0C00_0022
	// succ:  l0C00_001A l0C00_0022
l0C00_001A:
	SCZO_43 = cond(al - 0x61)
	C_44 = (bool) SCZO_43 (alias)
	branch Test(ULT,C_44) l0C00_0032
	// succ:  l0C00_001E l0C00_0032
l0C00_001E:
	SCZO_46 = cond(al - 0x66)
	CZ_48 = SCZO_46 (alias)
	branch Test(UGT,CZ_48) l0C00_0032
	// succ:  l0C00_0022 l0C00_0032
l0C00_0022:
	al_19 = al - 0x30
	*alOut = al_19
	SCZO_20 = cond(al_19 - 0x0A)
	C_21 = (bool) SCZO_20 (alias)
	branch Test(ULT,C_21) l0C00_0030
	// succ:  l0C00_0028 l0C00_0030
l0C00_0028:
	al_29 = al_19 - 0x07
	*alOut = al_29
	SCZO_30 = cond(al_29 - 0x10)
	C_31 = (bool) SCZO_30 (alias)
	branch Test(ULT,C_31) l0C00_0030
	// succ:  l0C00_002E l0C00_0030
l0C00_002E:
	al_33 = al_29 - 0x20
	*alOut = al_33
	// succ:  l0C00_0030
l0C00_0030:
	C_26 = false
	return C_26
	// succ:  fn0C00_000A_exit
l0C00_0032:
	C_13 = true
	return C_13
	// succ:  fn0C00_000A_exit
fn0C00_000A_exit:
====================
