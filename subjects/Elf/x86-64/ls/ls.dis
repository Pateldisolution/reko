void _init()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
_init_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402168:
	branch __gmon_start__ == 0x0000000000000000 l000000000040217D
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000402178:
	word64 rsp_14
	byte SCZO_15
	word64 rax_16
	byte SZO_17
	bool C_18
	bool Z_19
	call __gmon_start__ (retsize: 8; depth: 16)
		uses: C_6,rax_3,rsp_2,SCZO,SZO_4,Z_5
		defs: C_18,rax_16,rsp_14,SCZO_15,SZO_17,Z_19
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:__gmon_start__

l000000000040217D:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

_init_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void free()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
free_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

free_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void malloc()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
malloc_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

malloc_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004028C0(word64 rsi, word32 edi, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r15 rsi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004028C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004028C0_entry:
// DataOut: edi fs r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -03C0(0)

l00000000004028C0:
	fn000000000040D6A0(Mem0[rsi:word64])
	setlocale(0x0000000000000006, 0x0000000000416919)
	bindtextdomain(0x0000000000413800, 0x000000000041381C)
	textdomain(0x0000000000413800)
	Mem45[0x000000000061A580:word32] = 0x00000002
	fn0000000000411EE0(0x000000000040A200)
	Mem47[0x000000000061B030:word32] = 0x00000000
	Mem48[0x000000000061B0D0:byte] = 0x01
	Mem49[0x000000000061B180:word64] = 0x0000000000000000
	word32 eax_53 = (word32) (uint64) Mem49[0x000000000061A56C:word32]
	Mem56[0x000000000061B190:word64] = 0x0000000000000000
	Mem57[0x000000000061B188:word64] = 0xFFFFFFFFFFFFFFFF
	Mem58[0x000000000061B0F0:byte] = 0x00
	word64 rbp_1315 = rsi
	word32 ebx_140 = (word32) (uint64) edi
	word64 rsp_1891 = fp - 952
	branch eax_53 == 0x00000002 l0000000000403203
// DataOut: eax ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -03C0(0)

l000000000040297B:
	branch eax_53 == 0x00000003 l00000000004029AF
// DataOut: eax ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004029AF:
	Mem3790[0x000000000061B150:word32] = 0x00000000
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402980:
	branch (word32) (uint64) (eax_53 - 0x00000001) == 0x00000000 l000000000040298A
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040298A:
	branch isatty(0x0000000000000001) == 0x00000000 l00000000004037EC
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004037EC:
	Mem3783[0x000000000061B150:word32] = 0x00000001
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> sil:0x1C cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040299C:
	Mem3781[0x000000000061B150:word32] = 0x00000002
	Mem3782[0x000000000061B0F0:byte] = 0x01
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> sil:0x1C cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004029C5:
	Mem197[0x000000000061B14C:word32] = 0x00000000
	Mem198[0x000000000061B148:word32] = 0x00000000
	Mem199[0x000000000061B147:byte] = 0x00
	Mem200[0x000000000061B145:byte] = 0x00
	Mem201[0x000000000061B144:byte] = 0x00
	Mem202[0x000000000061B12C:word32] = 0x00000000
	Mem203[0x000000000061B114:byte] = 0x00
	Mem204[0x000000000061B110:word32] = 0x00000001
	Mem205[0x000000000061B10E:byte] = 0x00
	Mem206[0x000000000061B10D:byte] = 0x00
	Mem207[0x000000000061B108:word32] = 0x00000000
	Mem208[0x000000000061B100:word64] = 0x0000000000000000
	Mem209[0x000000000061B0F8:word64] = 0x0000000000000000
	Mem210[0x000000000061B17D:byte] = 0x00
	word64 rax_211 = getenv(0x000000000041382E)
	branch rax_211 == 0x0000000000000000 l0000000000402A7F
// DataOut: ebx fs r12 r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402A50:
	word64 rax_3735 = fn0000000000409E50(0x0000000000000004, 0x0000000000416460, 0x0000000000416480, rax_211)
	byte al_3739 = (byte) rax_3735
	branch (word32) rax_3735 < 0x00000000 l0000000000403786
// DataOut: al ebx fs r12 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:0x000000000041382E rax:<invalid> rsi:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403786:
	word64 r8_3753
	word64 r12_3754
	fn000000000040E930(rax_211, r15, fs, out rbp_1315, out r8_3753, out r12_3754)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415B00, 0x0000000000000005), tLoc03C0)
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> eax:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402A6F:
	fn000000000040E640((word32) (uint64) Mem210[DPB(rax_3735, (int16) al_3739, 0) * 0x0000000000000004 + 0x00416460:word32], 0x0000000000000000)
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> eax:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402A7F:
	Mem235[0x000000000061B0C8:word64] = 0x0000000000000050
	word64 rax_236 = getenv(0x000000000041383C)
	branch rax_236 == 0x0000000000000000 l0000000000402AB1
// DataOut: ebx fs r12 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:(int16) al eax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402AA6:
	branch Mem235[rax_236:byte] != 0x00 l00000000004037B8
// DataOut: ebx fs r12 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:0x000000000041383C rax:fp - 0x0000000000000378 rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004037B8:
	byte r13b_3695
	branch fn0000000000410E90(fp - 0x0000000000000378, 0x00000000, 0x0000000000000000, rax_236, 0x0000000000000000, out ebx_140, out r13b_3695) != 0x00000000 l0000000000403A93
// DataOut: ebx fs r12 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:0x000000000041383C rax:fp - 0x0000000000000378 rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004037D2:
	word64 rax_3722 = Mem235[fp - 0x0000000000000378:word64]
	branch rax_3722 == 0x0000000000000000 l0000000000403A93
// DataOut: ebx fs r12 r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403A93:
	word64 r8_3707
	word64 r12_3708
	fn000000000040E930(rax_236, r15, fs, out rbp_1315, out r8_3707, out r12_3708)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415B48, 0x0000000000000005), Mem235[fp - 960:<unknown>])
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004037E0:
	Mem3730[0x000000000061B0C8:word64] = rax_3722
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402AB1:
	branch ioctl(0x0000000000000001, 0x0000000000005413, Mem235[fp - 960:<unknown>]) == 0xFFFFFFFF l0000000000402ADD
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r12d:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402ACC:
	word32 eax_3674 = (word32) Mem235[fp - 0x0000000000000376:word16]
	word64 rax_3675 = (uint64) eax_3674
	branch (word16) eax_3674 == 0x0000 l0000000000402ADD
// DataOut: ebx fs r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:0x0000000000005413 r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:0x13 cl:<invalid> esi:0x00005413 al:<invalid> r12d:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> dx:<invalid> dl:<invalid> edi:0x00000001 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402AD6:
	Mem3682[0x000000000061B0C8:word64] = rax_3675
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:0x0000000000005413 r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:0x13 cl:<invalid> esi:0x00005413 al:<invalid> r12d:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> dx:<invalid> dl:<invalid> edi:0x00000001 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402ADD:
	word64 rax_266 = getenv(0x0000000000413844)
	Mem275[0x000000000061B0D8:word64] = 0x0000000000000008
	branch rax_266 == 0x0000000000000000 l0000000000402B22
// DataOut: ebx fs r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:0x0000000000005413 r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:0x13 cl:<invalid> esi:0x00005413 al:<invalid> r12d:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> dx:<invalid> dl:<invalid> edi:0x00000001 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402AFA:
	byte r13b_3650
	branch fn0000000000410E90(Mem275[fp - 0x0000000000000398:word64], 0x00000000, 0x0000000000000000, rax_266, 0x0000000000000000, out ebx_140, out r13b_3650) != 0x00000000 l00000000004041BB
// DataOut: ebx fs r12 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413844 rax:<invalid> rsi:0x0000000000005413 r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:0x13 cl:<invalid> esi:0x00005413 al:<invalid> r12d:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> dx:<invalid> dl:<invalid> edi:0x00413844 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004041BB:
	word64 r8_3659
	word64 r12_3660
	fn000000000040E930(rax_266, r15, fs, out rbp_1315, out r8_3659, out r12_3660)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415B88, 0x0000000000000005), Mem275[fp - 960:<unknown>])
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> r8:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402B16:
	Mem3656[0x000000000061B0D8:word64] = Mem275[fp - 0x0000000000000378:word64]
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> r8:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402B22:
	byte r13b_290 = 0x00
	word64 r12_1902 = 0x0000000000000000
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402B30:
	word32 eax_1322
	word64 rsi_1783
	Mem323[fp - 0x0000000000000380:word32] = 0xFFFFFFFF
	word64 r8_1004 = fp - 0x0000000000000380
	word32 eax_324 = getopt_long((uint64) ebx_140, rbp_1315, 0x0000000000415BC8, 0x0000000000413080, fp - 0x0000000000000380)
	branch eax_324 == 0xFFFFFFFF l000000000040321E
// DataOut: eax ebx fs r12 r13b r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:<invalid> bpl:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040321E:
	branch Mem323[0x000000000061B138:word64] == 0x0000000000000000 l000000000040398A
// DataOut: ebx fs r12 r13b r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040398A:
	byte r14b_3613
	fn000000000040C810(0x000000000061B138, 0x000000000061B140, getenv(0x00000000004138E1), fp - 0x0000000000000380, out ebx_140, out r8_1004, out r14b_3613, out r15)
	branch r15 == 0x0000000000000000 l0000000000404531
// DataOut: ebx fs r12 r13b r14b r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000404531:
	branch getenv(0x00000000004138E4) != 0x0000000000000000 l00000000004039B2
// DataOut: ebx fs r12 r13b r14b r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> bpl:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000404544:
// DataOut: ebx fs r12 r13b r14b r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> bpl:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:0x004138E4 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004039B2:
	Mem3633[0x000000000061B134:word32] = (word32) (uint64) Mem323[0x000000000061B140:word32]
	Mem3635[0x000000000061A560:word64] = Mem3633[0x000000000061B138:word64]
// DataOut: ebx fs r12 r13b r14b r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> bpl:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004039CC:
	branch r14b_3613 == 0x00 l000000000040322C
// DataOut: ebx fs r12 r13b r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> bpl:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004039D5:
	Mem3625[0x000000000061B140:word32] = 0x00000000
	Mem3626[0x000000000061B138:word64] = 0x0000000000000400
// DataOut: ebx fs r12 r13b r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> bpl:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040322C:
	word64 rdx_3254 = Mem323[0x000000000061B0C8:word64]
	word64 rax_3257 = 0x0000000000000001
	branch rdx_3254 >u 0x0000000000000002 l00000000004037FB
// DataOut: ebx fs r12 r13b r15 r8 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004037FB:
	rax_3257 = (uint64) ((uint128) (uint64) rdx_3254 /u 0x0000000000000003)
// DataOut: ebx fs r12 r13b r15 r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:0x0001 r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:0x01 cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403242:
	Mem3273[0x000000000061B020:word64] = rax_3257
	word64 rax_3274 = fn000000000040E600(0x0000000000000000)
	Mem3276[0x000000000061B0E8:word64] = rax_3274
	branch fn000000000040E630(rax_3274) == 0x00000005 l000000000040426C
// DataOut: ebx fs r12 r13b r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040426C:
	fn000000000040E650(0x00000001, 0x00000020, Mem3276[0x000000000061B0E8:word64])
// DataOut: ebx fs r12 r13b r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403268:
	word64 rax_3285 = (uint64) Mem3276[0x000000000061B12C:word32]
	branch (word32) rax_3285 <=u 0x00000001 l00000000004032A9
// DataOut: ebx fs r12 r13b r15 r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403273:
	word64 r14_3553 = rax_3285 + 0x00000000004138ED
	byte al_3561 = (byte) (word32) Mem3276[rax_3285 + 0x00000000004138ED:byte]
	branch al_3561 == 0x00 l00000000004032A9
// DataOut: al ebx fs r12 r13b r14 r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403289:
	fn000000000040E650(0x00000001, (int32) al_3561, Mem3276[0x000000000061B0E8:word64])
	r14_3553 = r14_3553 + 0x0000000000000001
	al_3561 = (byte) (word32) Mem3276[r14_3553:byte] (alias)
	branch al_3561 != 0x00 l0000000000403289
// DataOut: al ebx fs r12 r13b r14 r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> sil:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004032A9:
	word64 rax_3302 = fn000000000040E600(0x0000000000000000)
	Mem3308[0x000000000061B0E0:word64] = rax_3302
	rsi_1783 = fn000000000040E650(0x00000001, 0x0000003A, rax_3302)
	branch Mem3308[0x000000000061B130:byte] == 0x00 l00000000004032E2
// DataOut: ebx fs r12 r13b r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004032D2:
	branch Mem3308[0x000000000061B150:word32] == 0x00000000 l00000000004032E2
// DataOut: ebx fs r12 r13b r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004032DB:
	Mem3552[0x000000000061B130:byte] = 0x00
// DataOut: ebx fs r12 r13b r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004032E2:
	branch (word32) (uint64) ((word32) (uint64) Mem3308[0x000000000061B14C:word32] - 0x00000001) <=u 0x00000001 l0000000000403965
// DataOut: ebx fs r12 r13b r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403965:
	branch r13b_290 != 0x00 l00000000004032F4
// DataOut: ebx fs r12 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040396E:
	branch Mem3308[0x000000000061B150:word32] == 0x00000000 l000000000040380D
// DataOut: ebx fs r12 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040397B:
	Mem3549[0x000000000061B148:word32] = 0x00000004
// DataOut: ebx fs r12 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004032F4:
	branch Mem3308[0x000000000061B150:word32] == 0x00000000 l000000000040380D
// DataOut: ebx fs r12 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040380D:
	bool Z_3323 = (bool) cond(r12_1902)
	branch r12_1902 == 0x0000000000000000 l00000000004045C6
// DataOut: ebx fs r12 r15 r8 rbp rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004045C6:
	word64 rax_3522 = getenv(0x00000000004138F5)
	r12_1902 = rax_3522
	Z_3323 = (bool) cond(rax_3522) (alias)
	branch rax_3522 != 0x0000000000000000 l00000000004045DF
// DataOut: ebx fs r12 r15 r8 rbp rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004045DB_1:
	r12_1902 = 0x0000000000413827
// DataOut: ebx fs r12 r15 r8 rbp rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:0x27 cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004045DF:
// DataOut: ebx fs r12 r15 r8 rbp rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:0x27 cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403816:
// DataOut: ebx fs r12 r15 r8 rbp rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040383E:
	word64 rsi_3354 = r12_1902
	word64 rdi_3357 = 0x0000000000412CA0
	word64 rcx_3359 = 0x0000000000000006
// DataOut: ebx fs r12 r15 r8 rbp rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403847:
	branch rcx_3359 == 0x0000000000000000 l0000000000403849
// DataOut: ebx fs r12 r15 r8 rbp rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403847_1:
	Z_3323 = (bool) cond(Mem3308[rsi_3791:byte] - Mem3308[rdi_3792:byte]) (alias)
	rsi_3354 = rsi_3791 + 0x0000000000000001
	rdi_3357 = rdi_3792 + 0x0000000000000001
	rcx_3359 = rcx_3359 - 0x0000000000000001
	word64 rsi_3791 = rsi_3354
	word64 rdi_3792 = rdi_3357
	branch Mem3308[rsi_3791:byte] != Mem3308[rdi_3792:byte] l0000000000403847
// DataOut: ebx fs r12 r15 r8 rbp rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403849:
	branch Z_3323 l0000000000403828
// DataOut: ebx fs r12 r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403828:
	branch fn000000000040AB70(0x0000000000000002, out rsi_1783) == 0x00 l0000000000403301
// DataOut: ebx fs r12 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040383A:
	r12_1902 = r12_1902 + 0x0000000000000006
	Z_3323 = (bool) cond(r12_1902) (alias)
// DataOut: ebx fs r12 r15 r8 rbp rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x00000002 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040384B:
	branch Mem3308[r12_1902:byte] == 0x2B l00000000004043D9
// DataOut: ebx fs r12 r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403856:
	word64 rax_3398 = fn0000000000409E50(0x0000000000000004, 0x00000000004136F0, 0x0000000000413700, r12_1902)
	branch rax_3398 < 0x0000000000000000 l0000000000404564
// DataOut: ebx fs r12 r15 r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000404564:
	fn0000000000409F80(rax_3398, r12_1902, 0x000000000041391D, r12_1902, r15, fs)
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413928, 0x0000000000000005), Mem3308[0x000000000061A650:word64])
	word64 rbx_3456 = 0x0000000000413700
// DataOut: fs r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040459C:
	branch Mem3308[rbx_3456:word64] == 0x0000000000000000 l00000000004031D6
// DataOut: fs r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004031D6:
	word64 rbx_3479 = Mem3308[0x000000000061A650:word64]
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415BF8, 0x0000000000000005), rbx_3479)
	ebx_140 = (word32) rbx_3479 (alias)
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004045A8:
	__fprintf_chk(Mem3308[0x000000000061A650:word64], 0x0000000000000001, 0x000000000041393E, Mem3308[fp - 960:<unknown>])
	rbx_3456 = rbx_3456 + 0x0000000000000008
// DataOut: fs r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403876:
	branch rax_3398 == 0x0000000000000001 l0000000000404549
// DataOut: ebx fs r15 r8 rax rbp rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404549:
	Mem3442[0x000000000061A3D8:word64] = 0x0000000000413966
	Mem3443[0x000000000061A3D0:word64] = 0x0000000000413966
// DataOut: ebx fs r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403880:
	branch rax_3398 <= 0x0000000000000001 l0000000000404465
// DataOut: ebx fs r15 r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404465:
	branch rax_3398 != 0x0000000000000000 l00000000004038A8
// DataOut: ebx fs r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040446E:
	Mem3440[0x000000000061A3D8:word64] = 0x000000000041394E
	Mem3441[0x000000000061A3D0:word64] = 0x000000000041394E
// DataOut: ebx fs r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403886:
	branch rax_3398 == 0x0000000000000002 l00000000004045F3
// DataOut: ebx fs r15 r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045F3:
	Mem3435[0x000000000061A3D0:word64] = 0x0000000000413975
	Mem3436[0x000000000061A3D8:word64] = 0x0000000000413969
// DataOut: ebx fs r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403890:
	branch rax_3398 != 0x0000000000000003 l00000000004038A8
// DataOut: ebx fs r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403896:
	word64 rsi_3418
	branch fn000000000040AB70(0x0000000000000002, out rsi_3418) != 0x00 l000000000040460E
// DataOut: ebx fs r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040460E:
	word64 rax_3426 = dcgettext(0x0000000000000000, Mem3308[0x000000000061A3D0:word64], 0x0000000000000002)
	word64 rsi_3427 = Mem3308[0x000000000061A3D8:word64]
	Mem3432[0x000000000061A3D0:word64] = rax_3426
	Mem3434[0x000000000061A3D8:word64] = dcgettext(0x0000000000000000, rsi_3427, 0x0000000000000002)
// DataOut: ebx fs r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x00 esi:0x00413700 ecx:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:0x00000002 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B5A:
	word32 eax_2834 = (word32) (uint64) (eax_324 + 0x00000083)
	branch eax_2834 >u 0x00000112 l00000000004031F9
// DataOut: eax ebx fs r12 r13b r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402B6A:
	switch (eax_2834) { l0000000000402DFF l0000000000402DF8 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l0000000000402DDC l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l0000000000402DC0 l0000000000402D75 l0000000000402D66 l0000000000402D5A l00000000004031F9 l0000000000402D4B l0000000000402D3F l0000000000402D30 l0000000000402D05 l00000000004031F9 l00000000004031F9 l0000000000402CF6 l00000000004031F9 l0000000000402CE8 l00000000004031F9 l00000000004031F9 l0000000000402CD7 l0000000000402CCB l0000000000402CB6 l0000000000402C85 l0000000000402C70 l00000000004031F9 l00000000004031F9 l0000000000402C5B l00000000004031F9 l0000000000402C4F l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l0000000000402C40 l0000000000402C2F l0000000000402C20 l0000000000402C14 l00000000004031F9 l0000000000402BDA l0000000000402BC4 l0000000000402B95 l0000000000402B8C l00000000004031F9 l0000000000402B84 l0000000000402B78 l00000000004031C7 l0000000000402B71 l00000000004031B1 l00000000004031A2 l0000000000403196 l000000000040318A l000000000040317E l0000000000403169 l000000000040315A l0000000000403145 l00000000004030DC l00000000004030CD l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004030C1 l0000000000403084 l000000000040302E l000000000040301F l0000000000403010 l0000000000402FD6 l0000000000402FC1 l0000000000402FB5 l0000000000402F8A l0000000000402F50 l0000000000402F15 l0000000000402F09 l0000000000402EDA l0000000000402E9A l0000000000402E60 l0000000000402E54 }
// DataOut: ebx fs r12 r13b r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402E54:
	r12_1902 = Mem323[0x000000000061A640:word64]
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402E60:
	Mem3238[0x000000000061B14C:word32] = (word32) (uint64) Mem323[fn000000000040A120(0x0000000000412F50, 0x0000000000412F80, Mem323[0x000000000061A640:word64], 0x0000000000413883, 0x0000000000000004, fs) * 0x0000000000000004 + 0x00412F50:word32]
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402E9A:
	Mem3228[0x000000000061B148:word32] = (word32) (uint64) Mem323[fn000000000040A120(0x0000000000412FB0, 0x0000000000412FE0, Mem323[0x000000000061A640:word64], 0x000000000041387C, 0x0000000000000004, fs) * 0x0000000000000004 + 0x00412FB0:word32]
	r13b_290 = 0x01 (alias)
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402EDA:
	Mem3212[0x000000000061B140:word32] = 0x00000090
	Mem3213[0x000000000061B134:word32] = 0x00000090
	Mem3214[0x000000000061B138:word64] = 0x0000000000000001
	Mem3215[0x000000000061A560:word64] = 0x0000000000000001
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402F09:
	Mem3211[0x000000000061B0F0:byte] = 0x00
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402F15:
	fn000000000040E640((word32) (uint64) Mem323[fn000000000040A120(0x0000000000416460, 0x0000000000416480, Mem323[0x000000000061A640:word64], 0x00000000004138AD, 0x0000000000000004, fs) * 0x0000000000000004 + 0x00416460:word32], 0x0000000000000000)
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402F50:
	Mem3198[0x000000000061B12C:word32] = (word32) (uint64) Mem323[fn000000000040A120(0x00000000004136B0, 0x00000000004136C0, Mem323[0x000000000061A640:word64], 0x000000000041389B, 0x0000000000000004, fs) * 0x0000000000000004 + 0x004136B0:word32]
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402F8A:
	word64 rax_3183 = fn0000000000410C40(rbp_1315, 0x0000000000000010)
	Mem3185[rax_3183:word64] = Mem323[0x000000000061A640:word64]
	word64 rdx_3186 = Mem3185[0x000000000061B0F8:word64]
	Mem3187[0x000000000061B0F8:word64] = rax_3183
	Mem3188[rax_3183 + 0x0000000000000008:word64] = rdx_3186
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402FB5:
	Mem3181[0x000000000061B10C:byte] = 0x01
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402FC1:
	Mem3177[0x000000000061B150:word32] = 0x00000000
	r12_1902 = 0x0000000000413813
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402FD6:
	Mem3176[0x000000000061B150:word32] = (word32) (uint64) Mem323[fn000000000040A120(0x0000000000413010, 0x0000000000413040, Mem323[0x000000000061A640:word64], 0x000000000041388A, 0x0000000000000004, fs) * 0x0000000000000004 + 0x00413010:word32]
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403010:
	Mem3166[0x000000000061B12C:word32] = 0x00000002
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040301F:
	Mem3165[0x000000000061B110:word32] = 0x00000004
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040302E:
	word64 rsi_3117 = Mem323[0x000000000061A640:word64]
	branch rsi_3117 == 0x0000000000000000 l0000000000403A7C
// DataOut: ebx fs r12 r13b r15 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040303E:
	word32 eax_3147 = (word32) (uint64) Mem323[fn000000000040A120(0x0000000000412EC0, 0x0000000000412F00, rsi_3117, 0x0000000000413893, 0x0000000000000004, fs) * 0x0000000000000004 + 0x00412EC0:word32]
	branch eax_3147 == 0x00000001 l0000000000403A7C
// DataOut: eax ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040306F:
	branch eax_3147 == 0x00000002 l0000000000403A6A
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> bpl:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403A6A:
	branch isatty(0x0000000000000001) == 0x00000000 l0000000000403078
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> bpl:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403A7C:
	Mem3137[0x000000000061B129:byte] = 0x01
	Mem3138[0x000000000061B0D8:word64] = 0x0000000000000000
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> bpl:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403078:
	Mem3159[0x000000000061B129:byte] = 0x00
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> bpl:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403084:
	word64 r8_3100
	byte r14b_3101
	eax_1322 = fn000000000040C810(0x000000000061B138, 0x000000000061B140, Mem323[0x000000000061A640:word64], fp - 0x0000000000000380, out ebx_140, out r8_3100, out r14b_3101, out r15)
	branch eax_1322 != 0x00000000 l00000000004043C0
// DataOut: eax ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004043C0:
	r8_1004 = Mem323[0x000000000061A640:word64]
	fn00000000004112D0(0x0000000000413080, (word32) (uint64) Mem323[rsp_1891 + 0x0000000000000038:word32], (word32) (uint64) eax_1322)
// DataOut: ebx fs r12 r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> bpl:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043D9:
	word64 r13_2730
	word64 r12_2712 = r12_1902 + 0x0000000000000001
	word64 rax_2717 = strchr(r12_2712, 0x000000000000000A)
	branch rax_2717 == 0x0000000000000000 l000000000040444F
// DataOut: ebx fs r12 r14 r15 r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040444F:
	r13_2730 = r12_2712
// DataOut: ebx fs r12 r13 r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043F2:
	r13_2730 = rax_2717 + 0x0000000000000001
	branch strchr(rax_2717 + 0x0000000000000001, 0x000000000000000A) == 0x0000000000000000 l0000000000404438
// DataOut: ebx fs r12 r13 r14 r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404408:
	r15 = fn000000000040EC10(r12_2712, r15, fs, out rbp_1315, out r8_1004, out r12_2712)
	error(0x0000000000000002, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000413900, 0x0000000000000005), Mem323[rsp_1891 + -8:<unknown>])
// DataOut: ebx fs r12 r13 r14 r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404438:
	Mem2767[rax_2717:byte] = 0x00
// DataOut: ebx fs r12 r13 r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040443C:
	Mem2744[0x000000000061A3D0:word64] = r12_2712
	Mem2745[0x000000000061A3D8:word64] = r13_2730
// DataOut: ebx fs r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038A8:
	branch strstr(Mem323[0x000000000061A3D0:word64], 0x0000000000413766) == 0x0000000000000000 l0000000000404484
// DataOut: ebx fs r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404484:
	rsi_1783 = 0x0000000000413766
	branch strstr(Mem323[0x000000000061A3D8:word64], 0x0000000000413766) != 0x0000000000000000 l00000000004038C2
// DataOut: ebx fs r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040449E:
// DataOut: ebx fs r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038C2:
	Mem2482[0x000000000061A748:word64] = 0x0000000000000005
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038CD:
	word64 r14_2503 = Mem2482[0x000000000061A748:word64]
	Mem2509[0x000000000061A748:word64] = 0x0000000000000000
	word64 r13_2506 = 0x000000000061A760
	word32 r12d_2511 = 0x0002000E
// DataOut: ebx fs r12d r13 r14 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038EB:
	Mem2525[rsp_1891 + 0x0000000000000040:word64] = r14_2503
	r8_1004 = 0x0000000000000000
	rsi_1783 = fn000000000040CDC0(Mem2525[rsp_1891 + 0x0000000000000020:word64], 0x00000000000000A1, r13_2506, nl_langinfo((uint64) r12d_2511), 0x00000000, 0x00000000)
	branch false l0000000000404356
// DataOut: ebx fs r12d r13 r14 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404356:
	Mem2597[0x000000000061A748:word64] = 0x0000000000000000
// DataOut: ebx fs r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040391F:
	word64 rax_2566 = Mem2525[rsp_1891 + 0x0000000000000040:word64]
	branch Mem2525[0x000000000061A748:word64] <u rax_2566 l0000000000403933
// DataOut: ebx fs r12d r13 r14 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040392B_1:
	rax_2566 = Mem2525[0x000000000061A748:word64]
// DataOut: ebx fs r12d r13 r14 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403933:
	Mem2586[0x000000000061A748:word64] = rax_2566
	r12d_2511 = (word32) (uint64) (r12d_2511 + 0x00000001) (alias)
	r13_2506 = r13_2506 + 161
	branch r12d_2511 != 0x0002001A l00000000004038EB
// DataOut: ebx fs r12d r13 r14 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040394E:
	branch rax_2566 <u r14_2503 l00000000004038CD
// DataOut: ebx fs r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403957:
	branch rax_2566 != 0x0000000000000000 l0000000000403301
// DataOut: ebx fs r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403960:
// DataOut: ebx fs r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404361:
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415C30, 0x0000000000000005), Mem2525[rsp_1891 + -8:<unknown>])
	rsi_1783 = 0x0000000000000000
// DataOut: ebx fs r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403301:
	r12_1902 = (uint64) Mem323[0x000000000061A620:word32]
	word32 r12d_407 = (word32) r12_1902
	branch Mem323[0x000000000061B129:byte] != 0x00 l0000000000403AC5
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AC5:
	word64 rax_1882 = getenv(0x000000000041397F)
	Mem1890[rsp_1891 + 0x0000000000000038:word64] = rax_1882
	branch rax_1882 == 0x0000000000000000 l0000000000403AE2
// DataOut: ebx fs r12 r12d r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AD9:
	branch Mem1890[rax_1882:byte] != 0x00 l00000000004044FA
// DataOut: ebx fs r12 r12d r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044FA:
	Mem2101[rsp_1891 + 0x0000000000000030:word16] = 0x3F3F
	Mem2102[rsp_1891 + 0x0000000000000032:byte] = 0x00
	word64 rax_2109 = fn0000000000410E30(rax_1882, out rsi_1783)
	Mem2116[0x000000000061B118:word64] = rax_2109
	Mem2117[rsp_1891 + 0x0000000000000040:word64] = rax_2109
	word64 r13_2103 = 0x0000000000000000
	word32 edx_2111 = 0x00000000
// DataOut: ebx edx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040451F:
	branch edx_2111 >u 0x00000005 l0000000000402985
// DataOut: ebx edx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404528:
	switch (edx_2111) { l0000000000404703 l00000000004046D6 l000000000040473B l0000000000404690 l0000000000402985 l0000000000404647 }
// DataOut: ebx edx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404647:
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415D98, 0x0000000000000005), Mem2117[rsp_1891 + -8:<unknown>])
	free(Mem2117[0x000000000061B118:word64])
	rsi_1783 = 0x0000000000000000
	word64 rdi_2427 = Mem2117[0x000000000061B120:word64]
// DataOut: ebx fs r12 r12d r15 r8 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404679:
	branch rdi_2427 == 0x0000000000000000 l0000000000404787
// DataOut: ebx fs r12 r12d r15 r8 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404787:
	Mem2438[0x000000000061B129:byte] = 0x00
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404682:
	word64 r13_2435 = Mem2117[rdi_2427 + 0x0000000000000020:word64]
	free(rdi_2427)
	rdi_2427 = r13_2435
// DataOut: ebx fs r12 r12d r15 r8 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404690:
	word64 rax_2379 = Mem2117[rsp_1891 + 0x0000000000000038:word64]
	Mem2381[rsp_1891 + 0x0000000000000038:word64] = rax_2379 + 0x0000000000000001
	edx_2111 = 0x00000005 (alias)
	branch Mem2381[rax_2379:byte] != 0x3D l0000000000404528
// DataOut: ebx edx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004046AC:
	word64 rdi_2389 = Mem2381[rsp_1891 + 0x0000000000000020:word64]
	Mem2397[r13_2103 + 0x0000000000000018:word64] = Mem2381[rsp_1891 + 0x0000000000000040:word64]
	rsi_1783 = rsp_1891 + 0x0000000000000038
	edx_2111 = (word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond(fn00000000004049E0(r13_2103 + 0x0000000000000010, 0x00, rsi_1783, rdi_2389, out ebx_140, out rsp_1891, out rbp_1315, out r8_1004, out r12_1902) - 0x01)) & 0x00000005) (alias)
// DataOut: ebx edx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040473B:
	word64 rax_2293 = Mem2117[rsp_1891 + 0x0000000000000038:word64]
	Mem2297[rsp_1891 + 0x0000000000000038:word64] = rax_2293 + 0x0000000000000001
	r15 = 0x0000000000000000
	word32 r15d_2295 = 0x00000000
	edx_2111 = 0x00000005 (alias)
	branch Mem2297[rax_2293:byte] != 0x3D l0000000000404528
// DataOut: ebx edx fs r12 r12d r13 r15 r15d r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040475A:
// DataOut: ebx fs r13 r15 r15d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404772:
	word64 rsi_2308 = Mem2297[r15 * 0x0000000000000008 + 0x004135E0:word64]
	word64 r14_2311 = (int64) r15d_2295
	branch rsi_2308 != 0x0000000000000000 l000000000040475C
// DataOut: ebx fs r13 r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040475C:
	r15 = r15 + 0x0000000000000001
	r15d_2295 = (word32) r15 (alias)
	branch strcmp(rsp_1891 + 0x0000000000000030, rsi_2308) == 0x00000000 l0000000000404828
// DataOut: ebx fs r13 r14 r15 r15d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:(int64) r15d r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404828:
	word64 rdi_2356 = Mem2297[rsp_1891 + 0x0000000000000020:word64]
	word64 rcx_2357 = (r14_2311 << 0x0000000000000004) + 0x000000000061A3E0
	Mem2365[rcx_2357 + 0x0000000000000008:word64] = Mem2297[rsp_1891 + 0x0000000000000040:word64]
	rsi_1783 = rsp_1891 + 0x0000000000000038
	edx_2111 = 0x00000000 (alias)
	branch fn00000000004049E0(rcx_2357, 0x00, rsi_1783, rdi_2356, out ebx_140, out rsp_1891, out rbp_1315, out r8_1004, out r12_1902) != 0x00 l0000000000404528
// DataOut: ebx edx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:(int64) r15d r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404782:
// DataOut: ebx fs r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:(int64) r15d r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404857:
	fn000000000040E930(rsp_1891 + 0x0000000000000030, r15, fs, out rbp_1315, out r8_1004, out r12_1902)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x00000000004139FB, 0x0000000000000005), Mem2297[rsp_1891 + -8:<unknown>])
	rsi_1783 = 0x0000000000000000
	edx_2111 = 0x00000005 (alias)
// DataOut: ebx edx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> ecx:<invalid> al:<invalid> r11d:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004046D6:
	word64 rax_2274 = Mem2117[rsp_1891 + 0x0000000000000038:word64]
	edx_2111 = 0x00000005 (alias)
	branch Mem2117[rax_2274:byte] == 0x00 l0000000000404528
// DataOut: ebx edx fs r12 r12d r13 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004046E9:
	Mem2285[rsp_1891 + 0x0000000000000038:word64] = rax_2274 + 0x0000000000000001
	Mem2292[rsp_1891 + 0x0000000000000031:byte] = (byte) (word32) Mem2285[rax_2274:byte]
	edx_2111 = 0x00000002 (alias)
// DataOut: ebx edx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404703:
	word64 rax_2209 = Mem2117[rsp_1891 + 0x0000000000000038:word64]
	byte cl_2216 = (byte) (word32) Mem2117[rax_2209:byte]
	branch cl_2216 == 0x2A l00000000004047D4
// DataOut: cl ebx edx fs r12 r12d r13 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004047D4:
	word64 rax_2238 = fn0000000000410C40(rsi_1783, 0x0000000000000028)
	word64 rax_2242 = Mem2117[0x000000000061B120:word64]
	word64 rdi_2243 = Mem2117[rsp_1891 + 0x0000000000000020:word64]
	Mem2251[rsp_1891 + 0x0000000000000038:word64] = Mem2117[rsp_1891 + 0x0000000000000038:word64] + 0x0000000000000001
	Mem2253[0x000000000061B120:word64] = rax_2238
	Mem2254[rax_2238 + 0x0000000000000020:word64] = rax_2242
	Mem2256[rax_2238 + 0x0000000000000008:word64] = Mem2254[rsp_1891 + 0x0000000000000040:word64]
	rsi_1783 = rsp_1891 + 0x0000000000000038
	r13_2103 = rax_2238
	edx_2111 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond(fn00000000004049E0(rax_2238, 0x01, rsi_1783, rdi_2243, out ebx_140, out rsp_1891, out rbp_1315, out r8_1004, out r12_1902) - 0x01)) & 0x00000002) + 0x00000003) (alias)
// DataOut: ebx edx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404714:
	branch cl_2216 == 0x3A l00000000004047C6
// DataOut: cl ebx edx fs r12 r12d r13 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004047C6:
	Mem2236[rsp_1891 + 0x0000000000000038:word64] = rax_2209 + 0x0000000000000001
// DataOut: ebx edx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040471D:
	branch cl_2216 == 0x00 l000000000040478E
// DataOut: ebx fs r12 r12d r13 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040478E:
	branch Mem2117[0x000000000061A450:word64] != 0x0000000000000006 l0000000000403AE2
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040479C:
	rsi_1783 = 0x0000000000413989
	branch strncmp(Mem2117[0x000000000061A458:word64], 0x0000000000413989, 0x0000000000000006) != 0x00000000 l0000000000403AE2
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004047BA:
	Mem2208[0x000000000061B198:byte] = 0x01
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x0000000000413989 r12:<invalid> rdx:0x0000000000000006 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0x89 esi:0x00413989 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x06 edx:0x00000006 cl:<invalid> r12d:<invalid> dx:0x0006 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404721:
	Mem2225[rsp_1891 + 0x0000000000000038:word64] = rax_2209 + 0x0000000000000001
	Mem2232[rsp_1891 + 0x0000000000000030:byte] = (byte) (word32) Mem2225[rax_2209:byte]
	edx_2111 = 0x00000001 (alias)
// DataOut: ebx edx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AE2:
	branch Mem1890[0x000000000061B129:byte] == 0x00 l0000000000403315
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AEF:
	branch (byte) fn0000000000404CD0(0x0000000D, out rsi_1783) != 0x00 l0000000000403B2B
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AFD:
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_1783) == 0x00 l0000000000403B14
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0000000D -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B0B:
	branch Mem1890[0x000000000061B198:byte] != 0x00 l0000000000403B2B
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0000000E -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B14:
	branch (byte) fn0000000000404CD0(0x0000000C, out rsi_1783) == 0x00 l0000000000403B32
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0000000E -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B22:
	branch Mem1890[0x000000000061B150:word32] != 0x00000000 l0000000000403B32
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0000000C -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B2B:
	Mem2076[0x000000000061B115:byte] = 0x01
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B32:
	branch tcgetpgrp(0x0000000000000001) < 0x00000000 l0000000000403315
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B44:
	sigemptyset(0x000000000061B040)
	word64 r13_1944 = 0x0000000000412CC0
// DataOut: ebx fs r12 r12d r13 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x00000001 -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B51:
	word32 r14d_1954 = (word32) (uint64) Mem1890[r13_1944 + 0x0000000000000000:word32]
	sigaction((uint64) r14d_1954, 0x0000000000000000, Mem1890[rsp_1891 + 0x0000000000000020:word64])
	branch Mem1890[rsp_1891 + 0x0000000000000040:word64] == 0x0000000000000001 l0000000000403B7C
// DataOut: ebx fs r12 r12d r13 r14d r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B6F:
	sigaddset(0x000000000061B040, (uint64) r14d_1954)
// DataOut: ebx fs r12 r12d r13 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:(uint64) r14d rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B7C:
	r13_1944 = r13_1944 + 0x0000000000000004
	branch r13_1944 != 0xFFFFFFFFFFBED370 l0000000000403B51
// DataOut: ebx fs r12 r12d r13 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B86:
	word64 rdi_1970 = rsp_1891 + 0x0000000000000048
	word64 rsi_1972 = 0x000000000061B040
	word64 rcx_1975 = 0x0000000000000020
// DataOut: ebx fs r12 r12d r8 rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B95:
	branch rcx_1975 == 0x0000000000000000 l0000000000403B97
// DataOut: ebx fs r12 r12d r8 rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B97:
	Mem1996[rsp_1891 + 0x00000000000000C8:word32] = 0x10000000
	word64 r13_1998 = DPB(r13_1944, 0x00, 0) + 0x0000000000412CC0
// DataOut: ebx fs r12 r12d r13 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BAB:
	r15 = (uint64) Mem1996[r13_1998 + 0x0000000000000000:word32]
	word32 r15d_2013 = (word32) r15
	rsi_1783 = (uint64) r15d_2013
	branch sigismember(0x000000000061B040, rsi_1783) == 0x00000000 l0000000000403BE4
// DataOut: ebx fs r12 r12d r13 r15 r15d r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BC3:
	rsi_1783 = Mem1996[rsp_1891 + 0x0000000000000020:word64]
	word64 rax_2044 = 0x00000000004057F0
	branch r15d_2013 == 0x00000014 l0000000000403BD5
// DataOut: ebx fs r12 r12d r13 r15 r15d r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000061B040 rax:<invalid> rsi:(uint64) r15d r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0061B040 -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BD1_1:
	rax_2044 = 0x00000000004049B0
// DataOut: ebx fs r12 r12d r13 r15 r15d r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000061B040 rax:0x00000000004057F0 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x004057F0 r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:0xF0 r13b:<invalid> r15:<invalid> ax:0x57F0 r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0061B040 -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BD5:
	Mem2057[rsp_1891 + 0x0000000000000040:word64] = rax_2044
	sigaction((uint64) r15d_2013, rsi_1783, 0x0000000000000000)
// DataOut: ebx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000061B040 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0061B040 -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BE4:
	r13_1998 = r13_1998 + 0x0000000000000004
	branch r13_1998 != 0xFFFFFFFFFFBED370 l0000000000403BAB
// DataOut: ebx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BEE:
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B95_1:
	Mem1987[rdi_1970:word32] = Mem1890[rsi_1972:word32]
	rsi_1972 = rsi_1972 + 0x0000000000000004
	rdi_1970 = rdi_1970 + 0x0000000000000004
	rcx_1975 = rcx_1975 - 0x0000000000000001
// DataOut: ebx fs r12 r12d r8 rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403315:
	branch Mem323[0x000000000061B110:word32] == 0x00000001 l0000000000403A39
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A39:
	word32 eax_1855 = 0x00000002
	branch Mem323[0x000000000061B10D:byte] != 0x00 l0000000000403A5F
// DataOut: eax ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A47:
	branch Mem323[0x000000000061B12C:word32] == 0x00000003 l0000000000403A5F
// DataOut: eax ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:0x02 cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A50:
	eax_1855 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond(Mem323[0x000000000061B150:word32] - 0x00000001)) & 0xFFFFFFFE) + 0x00000004) (alias)
// DataOut: eax ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:0x02 cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A5F:
	Mem1866[0x000000000061B110:word32] = eax_1855
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403322:
	branch Mem323[0x000000000061B10E:byte] != 0x00 l00000000004039EF
// DataOut: ebx fs r12 r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039EF:
	word64 rax_1831 = fn000000000040B400(0x0000000000404990, 0x0000000000404980, 0x0000000000000000, 0x000000000000001E, 0x00000000004049D0)
	Mem1839[0x000000000061B1C8:word64] = rax_1831
	eax_1322 = (word32) rax_1831 (alias)
	branch rax_1831 == 0x0000000000000000 l00000000004043BB
// DataOut: eax ebx fs r12 r12d r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A1B:
	_obstack_begin(0x000000000061AF00, 0x0000000000000000, 0x0000000000000000, 0x0000000000402640, 0x00000000004021F0)
	r8_1004 = 0x00000000004021F0
	rsi_1783 = 0x0000000000000000
// DataOut: ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:0x00000000AAAAAAAB r15d:<invalid> ax:<invalid> r11:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:0x00404980 al:<invalid> cl:0x90 r12d:<invalid> ecx:0x00404990 dx:0x4980 dl:0x80 edi:0x0000001E r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040332F:
	byte al_1796
	word32 eax_504 = (word32) (uint64) Mem323[0x000000000061B148:word32]
	branch eax_504 == 0x00000004 l000000000040377A
// DataOut: eax ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040333E:
	branch eax_504 == 0x00000002 l000000000040377A
// DataOut: ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403347:
	branch Mem323[0x000000000061B150:word32] == 0x00000000 l000000000040377A
// DataOut: ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403354:
	branch Mem323[0x000000000061B17D:byte] != 0x00 l000000000040377A
// DataOut: ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403361:
	branch Mem323[0x000000000061B144:byte] != 0x00 l000000000040377A
// DataOut: ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040377A:
	Mem1801[0x000000000061B0C1:byte] = 0x01
// DataOut: ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040336E:
	Mem1812[0x000000000061B0C1:byte] = 0x00
	al_1796 = 0x01 (alias)
	branch Mem323[0x000000000061B10E:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403383:
	branch Mem1812[0x000000000061B129:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:0x01 cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040338C:
	branch Mem1812[0x000000000061B12C:word32] != 0x00000000 l00000000004033A0
// DataOut: al ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:0x01 cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403395:
	branch Mem1812[0x000000000061B10C:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:0x01 cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040339E:
	al_1796 = 0x00 (alias)
// DataOut: al ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004033A0:
	Mem515[0x000000000061B0C0:byte] = al_1796
	Mem517[0x000000000061B0C0:byte] = Mem515[0x000000000061B0C0:byte] & 0x01
	branch Mem517[0x000000000061B130:byte] == 0x00 l00000000004033E8
// DataOut: ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004033B6:
	_obstack_begin(0x000000000061AFC0, 0x0000000000000000, 0x0000000000000000, 0x0000000000402640, 0x00000000004021F0)
	_obstack_begin(0x000000000061AF60, 0x0000000000000000, 0x0000000000000000, 0x0000000000402640, 0x00000000004021F0)
	r8_1004 = 0x00000000004021F0
	rsi_1783 = 0x0000000000000000
// DataOut: ebx fs r12d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004033E8:
	word64 rsi_1005
	Mem532[0x000000000061B1B8:word64] = 0x0000000000000064
	word64 rax_537 = fn0000000000410C40(rsi_1783, 0x0000000000004B00)
	Mem538[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem539[0x000000000061B1C0:word64] = rax_537
	fn0000000000404DD0()
	word32 r13d_1746 = (word32) (uint64) ((word32) (uint64) ebx_140 - r12d_407)
	branch r13d_1746 <= 0x00000000 l00000000004042A0
// DataOut: ebx fs r12d r13d r15 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042A0:
	branch Mem539[0x000000000061B10D:byte] == 0x00 l00000000004043A5
// DataOut: fs r13d r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043A5:
	rsi_1005 = fn0000000000404D20(0x00000001, 0x0000000000000000, 0x0000000000413990)
// DataOut: fs r13d r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042AD:
	word32 r12d_1761
	fn0000000000407EA0(0x0000000000416919, 0x00000001, 0x0000000000000003, 0x0000000000413990, fs, out rsi_1005, out r8_1004, out r12d_1761, out r13d_1746)
// DataOut: fs r13d r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403423:
	word64 rbp_1726 = rbp_1315 + (int64) r12d_407 * 0x0000000000000008
// DataOut: ebx fs r12d rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040342B:
	word32 r12d_1745
	fn0000000000407EA0(0x0000000000416919, 0x00000001, 0x0000000000000000, Mem539[rbp_1726:word64], fs, out rsi_1005, out r8_1004, out r12d_1745, out r13d_1746)
	rbp_1726 = rbp_1726 + 0x0000000000000008
	branch ebx_140 > r12d_1745 l000000000040342B
// DataOut: ebx fs r12d r13d r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> dx:<invalid> ecx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040344D:
	branch Mem539[0x000000000061B1B0:word64] != 0x0000000000000000 l0000000000404200
// DataOut: fs r13d r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> dx:<invalid> ecx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404200:
	word64 r13_1668
	word64 r14_1669
	rsi_1005 = fn0000000000404E80(rsi_1005, out r8_1004, out r13_1668, out r14_1669, out r15)
	branch Mem539[0x000000000061B10D:byte] == 0x00 l0000000000404454
// DataOut: fs r13d r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> dx:<invalid> ecx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404454:
	rsi_1005 = fn0000000000405090(0x01, 0x0000000000000000)
// DataOut: fs r13d r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dx:<invalid> ecx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404212:
	branch Mem539[0x000000000061B1B0:word64] == 0x0000000000000000 l000000000040345B
// DataOut: fs r13d r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404220:
	rsi_1005 = fn00000000004079F0(rsi_1005, fs, out r8_1004)
	branch Mem539[0x000000000061B190:word64] == 0x0000000000000000 l00000000004044B5
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044B5:
	Mem1716[rsp_1891 + 0x0000000000000018:word64] = 0x0000000000000000
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404233:
	word64 rdi_1690 = Mem539[0x000000000061A610:word64]
	word64 rax_1692 = Mem539[rdi_1690 + 0x0000000000000028:word64]
	branch rax_1692 >=u Mem539[rdi_1690 + 0x0000000000000030:word64] l00000000004044A3
// DataOut: fs r15 r8 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044A3:
	__overflow(rdi_1690, 0x000000000000000A)
	rsi_1005 = 0x000000000000000A
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404248:
	Mem1710[rdi_1690 + 0x0000000000000028:word64] = rax_1692 + 0x0000000000000001
	Mem1711[rax_1692:byte] = 0x0A
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404253:
	word64 rax_1704 = Mem539[0x000000000061B190:word64]
	Mem1706[0x000000000061B018:word64] = Mem539[0x000000000061B018:word64] + 0x0000000000000001
	Mem1708[rsp_1891 + 0x0000000000000018:word64] = rax_1704
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040345B:
	word64 rax_1651 = Mem539[0x000000000061B190:word64]
	Mem1660[rsp_1891 + 0x0000000000000018:word64] = rax_1651
	branch (word32) (uint64) (r13d_1746 - 0x00000001) > 0x00000000 l00000000004034D2
// DataOut: fs r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040346D:
// DataOut: fs r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404385:
	branch rax_1651 == 0x0000000000000000 l00000000004034D2
// DataOut: fs r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040438E:
	branch Mem1660[rax_1651 + 0x0000000000000018:word64] != 0x0000000000000000 l00000000004034D2
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404399:
	Mem1666[0x000000000061B0D0:byte] = 0x00
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034D2:
	branch Mem539[rsp_1891 + 0x0000000000000018:word64] == 0x0000000000000000 l00000000004040B5
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040B5:
	branch Mem539[0x000000000061B129:byte] == 0x00 l0000000000404152
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040C2:
	branch Mem539[0x000000000061B128:byte] == 0x00 l00000000004040ED
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040CB:
	branch Mem539[0x000000000061A3E0:word64] == 0x0000000000000002 l00000000004042CB
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042CB:
	branch memcmp(Mem539[0x000000000061A3E8:word64], 0x00000000004139E1, 0x0000000000000002) != 0x00000000 l00000000004040D9
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042E9:
	branch Mem539[0x000000000061A3F0:word64] != 0x0000000000000001 l00000000004040D9
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:0x0002 ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042F7:
	branch Mem539[Mem539[0x000000000061A3F8:word64]:byte] != 0x6D l00000000004040D9
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:0x0002 ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404307:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:0x0002 ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040D9:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040ED:
	fflush_unlocked(Mem539[0x000000000061A610:word64])
	word64 rbx_1566 = 0x0000000000412CC0
// DataOut: rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040410D:
	word32 ebp_1574 = (word32) (uint64) Mem539[rbx_1566:word32]
	branch sigismember(0x000000000061B040, (uint64) ebp_1574) == 0x00000000 l0000000000404100
// DataOut: ebp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040411F:
	signal((uint64) ebp_1574, 0x0000000000000000)
// DataOut: rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000061B040 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:0x0061B040 r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:0x40 r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404100:
	rbx_1566 = rbx_1566 + 0x0000000000000004
	branch rbx_1566 == 0x0000000000412CF0 l000000000040412A
// DataOut: rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040412A:
	word32 ebx_1591 = (word32) (uint64) Mem539[0x000000000061B034:word32]
	branch ebx_1591 == 0x00000000 l0000000000404143
// DataOut: ebx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404134:
	raise(0x0000000000000013)
	ebx_1591 = (word32) (uint64) (ebx_1591 - 0x00000001) (alias)
	branch ebx_1591 != 0x00000000 l0000000000404134
// DataOut: ebx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404143:
	word64 rdi_1599 = (uint64) Mem539[0x000000000061B038:word32]
	branch (word32) rdi_1599 == 0x00000000 l0000000000404152
// DataOut: rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040414D:
	raise(rdi_1599)
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404152:
	branch Mem539[0x000000000061B130:byte] != 0x00 l000000000040430C
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040430C:
	fn0000000000405630(0x000000000061AFC0, 0x00000000004139E4)
	fn0000000000405630(0x000000000061AF60, 0x00000000004139EE)
	fn000000000040E630(Mem539[0x000000000061B0E8:word64])
	__printf_chk(0x0000000000000001, 0x0000000000415D40, Mem539[rsp_1891 + -8:<unknown>])
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040415F:
	word64 rbx_1522 = Mem539[0x000000000061B1C8:word64]
	branch rbx_1522 == 0x0000000000000000 l00000000004041F5
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040416F:
	branch fn000000000040AFB0(rbx_1522) == 0x0000000000000000 l00000000004041ED
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004041ED:
	fn000000000040B640(rbx_1522)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004041F5:
	exit((uint64) Mem539[0x000000000061B030:word32])
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040417C:
	__assert_fail(0x0000000000415D68, 0x0000000000413736, 0x00000000000005DC, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034DE:
	word64 r14_1435
	word64 rcx_601 = Mem539[rsp_1891 + 0x0000000000000018:word64]
	Mem607[0x000000000061B190:word64] = Mem539[rcx_601 + 0x0000000000000018:word64]
	branch Mem539[0x000000000061B1C8:word64] == 0x0000000000000000 l0000000000403FB5
// DataOut: fs r15 r8 rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FB5:
	r14_1435 = Mem607[Mem607[rsp_1891 + 0x0000000000000018:word64]:word64]
// DataOut: fs r14 r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034FC:
	r14_1435 = Mem607[rcx_601:word64]
	branch r14_1435 == 0x0000000000000000 l0000000000403FC2
// DataOut: fs r14 r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FC2:
	word64 rax_1441 = Mem607[0x000000000061AF18:word64]
	branch (word32) (rax_1441 - Mem607[0x000000000061AF10:word64]) <=u 0x0000000F l00000000004044C3
// DataOut: fs r15 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044C3:
	__assert_fail(0x0000000000415C58, 0x0000000000413736, 0x00000000000003D5, 0x0000000000412C38)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FDC:
	branch Mem607[0x000000000061AF20:word64] - rax_1441 >= 0xFFFFFFFFFFFFFFF0 l0000000000404002
// DataOut: fs r15 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FEC:
	_obstack_newchunk(0x000000000061AF00, 0x00000000FFFFFFF0)
	rax_1441 = Mem607[0x000000000061AF18:word64]
// DataOut: fs r15 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404002:
	word64 rsi_1458 = Mem607[rsp_1891 + 0x0000000000000020:word64]
	word64 rdi_1461 = Mem607[0x000000000061B1C8:word64]
	Mem1462[0x000000000061AF18:word64] = rax_1441 - 0x0000000000000010
	word64 rax_1464 = Mem1462[rax_1441 - 0x0000000000000008:word64]
	Mem1465[rsp_1891 + 0x0000000000000040:word64] = Mem1462[rax_1441 - 0x0000000000000010:word64]
	Mem1466[rsp_1891 + 0x0000000000000048:word64] = rax_1464
	word64 rax_1469 = fn000000000040BB90(rax_1464, rsi_1458, rdi_1461, r8_1004, out rsi_1005, out r8_1004)
	branch rax_1469 == 0x0000000000000000 l0000000000404287
// DataOut: fs r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404287:
	__assert_fail(0x0000000000413992, 0x0000000000413736, 0x000000000000059D, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404039:
	free(rax_1469)
	word64 rbx_1478 = Mem1466[rsp_1891 + 0x0000000000000018:word64]
	free(Mem1466[rbx_1478:word64])
	free(Mem1466[rbx_1478 + 0x0000000000000008:word64])
	free(rbx_1478)
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403508:
	word64 rax_652 = Mem607[rsp_1891 + 0x0000000000000018:word64]
	word64 rbx_1161 = Mem607[rax_652 + 0x0000000000000008:word64]
	Mem657[rsp_1891 + 0x000000000000002F:byte] = (byte) (word32) Mem607[rax_652 + 0x0000000000000010:byte]
	word64 rax_658 = __errno_location()
	Mem660[rax_658:word32] = 0x00000000
	word64 rax_664 = opendir(r14_1435)
	ebx_140 = (word32) rbx_1161 (alias)
	r12_1902 = rax_658
	word64 r13_672 = rax_664
	branch rax_664 == 0x0000000000000000 l0000000000404195
// DataOut: ebx fs r12 r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404195:
	rsi_1005 = fn0000000000405810(r14_1435, dcgettext(0x0000000000000000, 0x0000000000413998, 0x0000000000000005), (word32) Mem660[rsp_1891 + 0x000000000000002F:byte], r15, fs, out r8_1004)
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040353B:
	branch Mem660[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004035FF
// DataOut: ebx fs r12 r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403549:
	byte al_1298
	word64 rsi_1294
	word32 eax_1279 = dirfd(rax_664)
	word64 rdx_1286 = Mem660[rsp_1891 + 0x0000000000000020:word64]
	branch eax_1279 < 0x00000000 l0000000000403E95
// DataOut: eax ebx fs r12 r13 r14 r15 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E95:
	rsi_1294 = r14_1435
	al_1298 = (byte) (uint64) (__xstat(0x0000000000000001, r14_1435, rdx_1286) >>u 0x0000001F) (alias)
// DataOut: al ebx fs r12 r13 r14 r15 r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040355E:
	rsi_1294 = (uint64) eax_1279
	al_1298 = (byte) (uint64) (__fxstat(0x0000000000000001, rsi_1294, rdx_1286) >>u 0x0000001F) (alias)
// DataOut: al ebx fs r12 r13 r14 r15 r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040356D:
	branch al_1298 != 0x00 l0000000000403478
// DataOut: ebx fs r12 r13 r14 r15 r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:0x00000001 r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:0x01 r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403478:
	rsi_1005 = fn0000000000405810(r14_1435, dcgettext(0x0000000000000000, 0x0000000000415CE8, 0x0000000000000005), (word32) Mem660[rsp_1891 + 0x000000000000002F:byte], r15, fs, out r8_1004)
	closedir(rax_664)
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:0x00000001 r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:0x01 r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403575:
	word64 rdx_1304 = Mem660[rsp_1891 + 0x0000000000000040:word64]
	Mem1306[rsp_1891 + 0x0000000000000010:word64] = Mem660[rsp_1891 + 0x0000000000000048:word64]
	Mem1307[rsp_1891 + 0x0000000000000008:word64] = rdx_1304
	word64 rax_1308 = fn0000000000410C40(rsi_1294, 0x0000000000000010)
	word64 rdx_1310 = Mem1307[rsp_1891 + 0x0000000000000008:word64]
	word64 rdi_1314 = Mem1307[0x000000000061B1C8:word64]
	Mem1317[rax_1308:word64] = Mem1307[rsp_1891 + 0x0000000000000010:word64]
	Mem1318[rax_1308 + 0x0000000000000008:word64] = rdx_1310
	word64 rax_1320 = fn000000000040BB50(rax_1308, rax_1308, rdi_1314, r8_1004, out rsi_1005)
	rbp_1315 = rax_1308
	eax_1322 = (word32) rax_1320 (alias)
	branch rax_1320 == 0x0000000000000000 l00000000004043BB
// DataOut: eax ebx fs r12 r13 r14 r15 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:0x00000001 r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:0x01 r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043BB:
	fn0000000000410E50()
// DataOut: eax ebx fs r12 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r15d:<invalid> ax:<invalid> r11:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> r8b:<invalid> r8d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> dil:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035BF:
	branch rax_1308 != rax_1320 l0000000000403EE2
// DataOut: fs r12 r13 r14 r15 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403EE2:
	free(rax_1308)
	word64 r12_1365
	r8_1004 = fn000000000040EAB0(r14_1435, r15, fs, out r12_1365)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415D10, 0x0000000000000005), Mem1318[rsp_1891 + -8:<unknown>])
	closedir(rax_664)
	Mem1384[0x000000000061B030:word32] = 0x00000002
	rsi_1005 = 0x0000000000000000
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035C8:
	word64 rax_1330 = Mem1318[0x000000000061AF18:word64]
	branch Mem1318[0x000000000061AF20:word64] - rax_1330 <= 0x000000000000000F l0000000000404064
// DataOut: fs r12 r13 r14 r15 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404064:
	_obstack_newchunk(0x000000000061AF00, 0x0000000000000010)
	rsi_1005 = 0x0000000000000010
	rax_1330 = Mem1318[0x000000000061AF18:word64]
// DataOut: fs r12 r13 r14 r15 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035E3:
	Mem1349[0x000000000061AF18:word64] = rax_1330 + 0x0000000000000010
	Mem1351[rax_1330 + 0x0000000000000008:word64] = Mem1349[rsp_1891 + 0x0000000000000040:word64]
	Mem1353[rax_1330:word64] = Mem1351[rsp_1891 + 0x0000000000000048:word64]
// DataOut: fs r12 r13 r14 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035FF:
	branch Mem660[0x000000000061B10E:byte] != 0x00 l0000000000403615
// DataOut: fs r12 r13 r14 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403608:
	branch Mem660[0x000000000061B0D0:byte] == 0x00 l00000000004036D6
// DataOut: fs r12 r13 r14 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403615:
	branch Mem660[0x000000000061A3C0:byte] != 0x00 l0000000000403646
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040361E:
	word64 rdi_1256 = Mem660[0x000000000061A610:word64]
	word64 rax_1258 = Mem660[rdi_1256 + 0x0000000000000028:word64]
	branch rax_1258 >=u Mem660[rdi_1256 + 0x0000000000000030:word64] l00000000004045E4
// DataOut: fs r14 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045E4:
	__overflow(rdi_1256, 0x000000000000000A)
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403633:
	Mem1272[rdi_1256 + 0x0000000000000028:word64] = rax_1258 + 0x0000000000000001
	Mem1273[rax_1258:byte] = 0x0A
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040363E:
	Mem1269[0x000000000061B018:word64] = Mem660[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403646:
	Mem1145[0x000000000061A3C0:byte] = 0x00
	branch Mem660[0x000000000061B130:byte] != 0x00 l0000000000403F2E
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F2E:
	fwrite_unlocked(0x0000000000413771, 0x0000000000000001, 0x0000000000000002, Mem1145[0x000000000061A610:word64])
	Mem1226[0x000000000061B018:word64] = Mem1145[0x000000000061B018:word64] + 0x0000000000000002
	branch Mem1226[0x000000000061B130:byte] == 0x00 l000000000040365A
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F5E:
	word64 rax_1229 = Mem1226[0x000000000061AF78:word64]
	branch Mem1226[0x000000000061AF80:word64] <u rax_1229 + 0x0000000000000008 l000000000040407F
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413771 rax:<invalid> rsi:0x0000000000000001 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0x01 esi:0x00000001 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:0x00413771 r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:0x0002 ah:<invalid> dil:0x71 r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040407F:
	_obstack_newchunk(0x000000000061AF60, 0x0000000000000008)
	rax_1229 = Mem1226[0x000000000061AF78:word64]
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413771 rax:<invalid> rsi:0x0000000000000001 r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0x01 esi:0x00000001 cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:0x00413771 r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:0x71 r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F76:
	Mem1245[rax_1229:word64] = Mem1226[0x000000000061B018:word64]
	Mem1247[0x000000000061AF78:word64] = Mem1245[0x000000000061AF78:word64] + 0x0000000000000008
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040365A:
	word64 rdx_1156 = Mem1145[0x000000000061B0E0:word64]
	branch rbx_1161 != 0x0000000000000000 l000000000040366F
// DataOut: fs r14 rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040366B_1:
	rbx_1161 = r14_1435
// DataOut: fs rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040366F:
	word64 rsi_1167
	word64 r8_1168
	byte r12b_1169
	byte r14b_1170
	Mem1173[0x000000000061B018:word64] = Mem1145[0x000000000061B018:word64] + fn00000000004052D0(rdx_1156, rbx_1161, fs, out rsi_1167, out r8_1168, out r12b_1169, out r14b_1170)
	branch Mem1173[0x000000000061B130:byte] == 0x00 l00000000004036B3
// DataOut: fs r12 r13 r14 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> ah:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403689:
	word64 rax_1191 = Mem1173[0x000000000061AF78:word64]
	branch Mem1173[0x000000000061AF80:word64] <u rax_1191 + 0x0000000000000008 l000000000040409A
// DataOut: fs r12 r13 r14 r15 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040409A:
	_obstack_newchunk(0x000000000061AF60, 0x0000000000000008)
	rax_1191 = Mem1173[0x000000000061AF78:word64]
// DataOut: fs r12 r13 r14 r15 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036A1:
	Mem1207[rax_1191:word64] = Mem1173[0x000000000061B018:word64]
	Mem1209[0x000000000061AF78:word64] = Mem1207[0x000000000061AF78:word64] + 0x0000000000000008
// DataOut: fs r12 r13 r14 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036B3:
	fwrite_unlocked(0x000000000041393B, 0x0000000000000001, 0x0000000000000002, Mem1173[0x000000000061A610:word64])
	Mem1189[0x000000000061B018:word64] = Mem1173[0x000000000061B018:word64] + 0x0000000000000002
	rsi_1005 = 0x0000000000000001
// DataOut: fs r12 r13 r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036D6:
	fn0000000000404DD0()
	word32 eax_757 = (word32) Mem660[rsp_1891 + 0x000000000000002F:byte]
	Mem758[rsp_1891 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem759[rsp_1891 + 0x0000000000000010:word32] = eax_757
// DataOut: fs r12 r13 r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036F0:
	Mem778[rax_658:word32] = 0x00000000
	word64 rax_780 = readdir(r13_672)
	branch rax_780 == 0x0000000000000000 l0000000000403CC0
// DataOut: fs r12 r13 r14 r15 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CC0:
	branch (word32) (uint64) Mem778[rax_658:word32] == 0x00000000 l0000000000403CF3
// DataOut: fs r13 r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CC8:
	word64 r8_1125
	rsi_1005 = fn0000000000405810(r14_1435, dcgettext(0x0000000000000000, 0x00000000004139B1, 0x0000000000000005), (word32) (uint64) Mem778[rsp_1891 + 0x0000000000000010:word32], r15, fs, out r8_1125)
	branch Mem778[rax_658:word32] == 0x0000004B l0000000000403770
// DataOut: fs r12 r13 r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CF3:
	branch closedir(r13_672) != 0x00000000 l0000000000403EBC
// DataOut: fs r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403EBC:
	word64 r8_1111
	rsi_1005 = fn0000000000405810(r14_1435, dcgettext(0x0000000000000000, 0x00000000004139C6, 0x0000000000000005), (word32) Mem778[rsp_1891 + 0x000000000000002F:byte], r15, fs, out r8_1111)
// DataOut: fs rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D03:
	word64 r13_967
	word64 r14_968
	rsi_1005 = fn0000000000404E80(rsi_1005, out r8_1004, out r13_967, out r14_968, out r15)
	branch Mem778[0x000000000061B10E:byte] != 0x00 l0000000000403EAA
// DataOut: fs r14 r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403EAA:
	rsi_1005 = fn0000000000405090((byte) (word32) Mem778[rsp_1891 + 0x000000000000002F:byte], r14_968)
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D15:
	branch (word32) (uint64) Mem778[0x000000000061B150:word32] == 0x00000000 l0000000000403D2C
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D1F:
	branch Mem778[0x000000000061B144:byte] == 0x00 l0000000000403E00
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D2C:
	branch Mem778[0x000000000061B130:byte] != 0x00 l0000000000403F8D
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F8D:
	fwrite_unlocked(0x0000000000413771, 0x0000000000000001, 0x0000000000000002, Mem778[0x000000000061A610:word64])
	Mem1092[0x000000000061B018:word64] = Mem778[0x000000000061B018:word64] + 0x0000000000000002
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D39:
	word64 rax_1014 = dcgettext(0x0000000000000000, 0x00000000004139DB, 0x0000000000000005)
	fputs_unlocked(rax_1014, Mem778[0x000000000061A610:word64])
	word64 rax_1021 = DPB(rax_1014, strlen(rax_1014), 0)
	word64 rdi_1022 = Mem778[0x000000000061A610:word64]
	Mem1025[0x000000000061B018:word64] = Mem778[0x000000000061B018:word64] + rax_1021
	word64 rax_1026 = Mem1025[rdi_1022 + 0x0000000000000028:word64]
	branch rax_1026 >=u Mem1025[rdi_1022 + 0x0000000000000030:word64] l00000000004044EB
// DataOut: fs rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044EB:
	__overflow(rdi_1022, 0x0000000000000020)
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D80:
	Mem1082[rdi_1022 + 0x0000000000000028:word64] = rax_1026 + 0x0000000000000001
	Mem1083[rax_1026:byte] = 0x20
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D8B:
	word64 r8_1033 = Mem1025[0x000000000061B138:word64]
	word32 edx_1036 = (word32) (uint64) Mem1025[0x000000000061B140:word32]
	word64 rdi_1038 = Mem1025[rsp_1891 + 0x0000000000000008:word64]
	Mem1041[0x000000000061B018:word64] = Mem1025[0x000000000061B018:word64] + 0x0000000000000001
	word32 r15d_1044
	word64 rax_1045 = fn000000000040BD70(0x0000000000000200, edx_1036, rsp_1891 + 0x00000000000000E0, rdi_1038, r8_1033, fs, out r8_1004, out r15d_1044)
	rsi_1005 = Mem1041[0x000000000061A610:word64]
	fputs_unlocked(rax_1045, rsi_1005)
	word64 rax_1054 = DPB(rax_1045, strlen(rax_1045), 0)
	word64 rdi_1055 = Mem1041[0x000000000061A610:word64]
	Mem1058[0x000000000061B018:word64] = Mem1041[0x000000000061B018:word64] + rax_1054
	word64 rax_1059 = Mem1058[rdi_1055 + 0x0000000000000028:word64]
	branch rax_1059 >=u Mem1058[rdi_1055 + 0x0000000000000030:word64] l00000000004044DC
// DataOut: fs r15 r8 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044DC:
	__overflow(rdi_1055, 0x000000000000000A)
	rsi_1005 = 0x000000000000000A
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403DED:
	Mem1075[rdi_1055 + 0x0000000000000028:word64] = rax_1059 + 0x0000000000000001
	Mem1076[rax_1059:byte] = 0x0A
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403DF8:
	Mem1072[0x000000000061B018:word64] = Mem1058[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E00:
	branch Mem778[0x000000000061B1B0:word64] == 0x0000000000000000 l00000000004034A1
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E0E:
	rsi_1005 = fn00000000004079F0(rsi_1005, fs, out r8_1004)
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034A1:
	word64 rbx_708 = Mem660[rsp_1891 + 0x0000000000000018:word64]
	free(Mem660[rbx_708:word64])
	free(Mem660[rbx_708 + 0x0000000000000008:word64])
	free(rbx_708)
	Mem712[0x000000000061B0D0:byte] = 0x01
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15:<invalid> r11d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034C6:
	Mem648[rsp_1891 + 0x0000000000000018:word64] = Mem607[0x000000000061B190:word64]
// DataOut: fs r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> r15:<invalid> r11d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040370C:
	word32 eax_821 = (word32) (uint64) Mem778[0x000000000061B108:word32]
	branch eax_821 == 0x00000002 l0000000000403C78
// DataOut: eax fs r12 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040371F:
	branch Mem778[rax_780 + 0x0000000000000013:byte] == 0x2E l0000000000403C58
// DataOut: eax fs r12 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C58:
	branch eax_821 == 0x00000000 l0000000000403770
// DataOut: fs r12 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C60:
	branch Mem778[rax_780 + 0x0000000000000014 + (uint64) (Mem778[rax_780 + 0x0000000000000014:byte] == 0x2E):byte] == 0x00 l0000000000403770
// DataOut: fs r12 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C74:
// DataOut: fs r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:Test(EQ,Z) dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403729:
	branch eax_821 != 0x00000000 l0000000000403C78
// DataOut: fs r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403731:
	r15 = Mem778[0x000000000061B0F8:word64]
	branch r15 != 0x0000000000000000 l0000000000403755
// DataOut: fs r12 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403755:
	branch fnmatch(Mem778[r15:word64], rax_780 + 0x0000000000000013, 0x0000000000000004) != 0x00000000 l0000000000403748
// DataOut: fs r12 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403748:
	r15 = Mem778[r15 + 0x0000000000000008:word64]
	branch r15 == 0x0000000000000000 l0000000000403C78
// DataOut: fs r12 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:0x0004 r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403769:
// DataOut: fs r12 r13 r14 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:0x0004 r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040373D:
// DataOut: fs r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C78:
	r15 = Mem778[0x000000000061B100:word64]
	branch r15 != 0x0000000000000000 l0000000000403C9D
// DataOut: fs r12 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C9D:
	branch fnmatch(Mem778[r15:word64], rax_780 + 0x0000000000000013, 0x0000000000000004) != 0x00000000 l0000000000403C90
// DataOut: fs r12 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C90:
	r15 = Mem778[r15 + 0x0000000000000008:word64]
	branch r15 == 0x0000000000000000 l0000000000403E20
// DataOut: fs r12 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:0x0004 r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CB1:
// DataOut: fs r12 r13 r14 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:0x0004 r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C84:
// DataOut: fs r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E20:
	word64 rax_849 = (uint64) ((word32) Mem778[rax_780 + 0x0000000000000012:byte] - 0x00000001)
	word64 rsi_846 = 0x0000000000000000
	byte al_853 = (byte) rax_849
	branch al_853 >u 0x0D l0000000000403E37
// DataOut: al esi fs r14 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E2D:
	rsi_846 = (uint64) Mem778[DPB(rax_849, (word32) al_853, 0) * 0x0000000000000004 + 0x00412C00:word32]
// DataOut: esi fs r14 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E37:
	word64 rsi_866
	word64 r8_867
	word32 r12d_868
	word32 r13d_869
	Mem872[rsp_1891 + 0x0000000000000008:word64] = Mem778[rsp_1891 + 0x0000000000000008:word64] + fn0000000000407EA0(r14_1435, 0x00000000, rsi_846, rax_780 + 0x0000000000000013, fs, out rsi_866, out r8_867, out r12d_868, out r13d_869)
	branch Mem872[0x000000000061B150:word32] != 0x00000001 l0000000000403770
// DataOut: fs r12 r13 r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E56:
	branch Mem872[0x000000000061B148:word32] != 0xFFFFFFFF l0000000000403770
// DataOut: fs r12 r13 r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E63:
	branch Mem872[0x000000000061B144:byte] != 0x00 l0000000000403770
// DataOut: fs r12 r13 r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E70:
	branch Mem872[0x000000000061B10E:byte] != 0x00 l0000000000403770
// DataOut: fs r12 r13 r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E7D:
	word64 r8_881
	word64 r8_886
	fn00000000004079F0(fn0000000000404E80(rsi_866, out r8_881, out r13_672, out r14_1435, out r15), fs, out r8_886)
	fn0000000000404DD0()
// DataOut: fs r12 r13 r14 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403770:
	rsi_1005 = fn0000000000406490()
// DataOut: fs r12 r13 r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004030A2:
	Mem3114[0x000000000061B134:word32] = (word32) (uint64) Mem323[0x000000000061B140:word32]
	Mem3116[0x000000000061A560:word64] = Mem3114[0x000000000061B138:word64]
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> bpl:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004030C1:
	Mem3095[0x000000000061B146:byte] = 0x01
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004030CD:
	Mem3094[0x000000000061B150:word32] = 0x00000003
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004030DC:
	branch fn0000000000410E90(Mem323[fp - 0x0000000000000398:word64], 0x00000000, 0x0000000000000000, Mem323[0x000000000061A640:word64], 0x0000000000000000, out ebx_140, out r13b_290) != 0x00000000 l0000000000403100
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004030F8:
	branch Mem323[fp - 0x0000000000000378:word64] != 0x0000000000000000 l0000000000403134
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> esi:<invalid> bpl:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> al:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403100:
	word64 r8_3076
	r15 = fn000000000040E930(Mem323[0x000000000061A640:word64], r15, fs, out rbp_1315, out r8_3076, out r12_1902)
	error(0x0000000000000002, 0x0000000000000000, dcgettext(0x0000000000000000, 0x000000000041384C, 0x0000000000000005), Mem323[fp - 960:<unknown>])
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> esi:<invalid> bpl:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> al:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403134:
	Mem3071[0x000000000061B0C8:word64] = Mem323[fp - 0x0000000000000378:word64]
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> ax:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403145:
	Mem3039[0x000000000061B148:word32] = 0x00000003
	r13b_290 = 0x01 (alias)
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040315A:
	Mem3038[0x000000000061B14C:word32] = 0x00000002
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403169:
	Mem3034[0x000000000061B148:word32] = 0x00000004
	r13b_290 = 0x01 (alias)
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040317E:
	Mem3033[0x000000000061B144:byte] = 0x01
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l000000000040318A:
	Mem3032[0x000000000061B147:byte] = 0x01
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403196:
	Mem3031[0x000000000061B0F0:byte] = 0x01
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004031A2:
	Mem3030[0x000000000061B12C:word32] = 0x00000001
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004031B1:
	Mem3028[0x000000000061B150:word32] = 0x00000000
	Mem3029[0x000000000061A568:byte] = 0x00
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402B71:
	Mem3027[0x000000000061B145:byte] = 0x01
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004031C7:
	Mem3026[0x000000000061B150:word32] = 0x00000004
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402B78:
	Mem3025[0x000000000061B150:word32] = 0x00000000
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402B84:
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402B8C:
	Mem3023[0x000000000061B114:byte] = 0x01
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402B95:
	Mem3019[0x000000000061B140:word32] = 0x000000B0
	Mem3020[0x000000000061B134:word32] = 0x000000B0
	Mem3021[0x000000000061B138:word64] = 0x0000000000000001
	Mem3022[0x000000000061A560:word64] = 0x0000000000000001
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402BC4:
	Mem3017[0x000000000061B150:word32] = 0x00000000
	Mem3018[0x000000000061A569:byte] = 0x00
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402BDA:
	Mem2995[0x000000000061B108:word32] = 0x00000002
	Mem2996[0x000000000061B148:word32] = 0xFFFFFFFF
	branch Mem323[0x000000000061B150:word32] == 0x00000000 l0000000000403C36
// DataOut: ebx fs r12 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403C36:
	Mem3016[0x000000000061B150:word32] = (word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond(isatty(0x0000000000000001) - 0x00000001)) + 0x00000002)
// DataOut: ebx fs r12 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402BFB:
	Mem3002[0x000000000061B144:byte] = 0x00
	Mem3003[0x000000000061B129:byte] = 0x00
	r13b_290 = 0x01 (alias)
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402C14:
	Mem2992[0x000000000061B10D:byte] = 0x01
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402C20:
	Mem2991[0x000000000061B14C:word32] = 0x00000001
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402C2F:
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402C40:
	Mem2985[0x000000000061B108:word32] = 0x00000002
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402C4F:
	Mem2984[0x000000000061B17D:byte] = 0x01
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402C5B:
	Mem2980[0x000000000061B148:word32] = 0x00000001
	r13b_290 = 0x01 (alias)
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402C70:
	Mem2976[0x000000000061B148:word32] = 0xFFFFFFFF
	r13b_290 = 0x01 (alias)
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402C85:
	branch fn0000000000410E90(Mem323[fp - 0x0000000000000398:word64], 0x00000000, 0x0000000000000000, Mem323[0x000000000061A640:word64], 0x0000000000000000, out ebx_140, out r13b_290) != 0x00000000 l0000000000403BFD
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403BFD:
	word64 r8_2960
	r15 = fn000000000040E930(Mem323[0x000000000061A640:word64], r15, fs, out rbp_1315, out r8_2960, out r12_1902)
	error(0x0000000000000002, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000413867, 0x0000000000000005), Mem323[fp - 960:<unknown>])
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> esi:<invalid> bpl:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> al:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402CA5:
	Mem2957[0x000000000061B0D8:word64] = Mem323[fp - 0x0000000000000378:word64]
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> ax:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402CB6:
	Mem2927[0x000000000061B148:word32] = 0x00000002
	r13b_290 = 0x01 (alias)
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402CCB:
	Mem2926[0x000000000061B10E:byte] = 0x01
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402CD7:
	fn000000000040E640(0x00000003, 0x0000000000000000)
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402CE8:
	fn000000000040E640(0x00000000, 0x0000000000000000)
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402CF6:
	Mem2915[0x000000000061B110:word32] = 0x00000005
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402D05:
	r15 = Mem323[0x000000000061A640:word64]
	word64 rax_2910 = fn0000000000410C40(rbp_1315, 0x0000000000000010)
	word64 rdx_2911 = Mem323[0x000000000061B100:word64]
	Mem2912[rax_2910:word64] = r15
	Mem2913[rax_2910 + 0x0000000000000008:word64] = rdx_2911
	Mem2914[0x000000000061B100:word64] = rax_2910
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402D30:
	Mem2906[0x000000000061B110:word32] = 0x00000003
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402D3F:
	Mem2905[0x000000000061A568:byte] = 0x00
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402D4B:
	Mem2904[0x000000000061B12C:word32] = 0x00000003
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402D5A:
	Mem2903[0x000000000061B130:byte] = 0x01
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402D66:
	Mem2902[0x000000000061B150:word32] = 0x00000002
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402D75:
	word64 rax_2891 = fn0000000000410C40(rbp_1315, 0x0000000000000010)
	word64 rdx_2892 = Mem323[0x000000000061B100:word64]
	Mem2893[rax_2891:word64] = 0x0000000000413864
	Mem2895[0x000000000061B100:word64] = rax_2891
	Mem2896[rax_2891 + 0x0000000000000008:word64] = rdx_2892
	word64 rax_2897 = fn0000000000410C40(rbp_1315, 0x0000000000000010)
	word64 rdx_2898 = Mem2896[0x000000000061B100:word64]
	Mem2899[rax_2897:word64] = 0x0000000000413863
	Mem2900[rax_2897 + 0x0000000000000008:word64] = rdx_2898
	Mem2901[0x000000000061B100:word64] = rax_2897
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402DC0:
	branch Mem323[0x000000000061B108:word32] != 0x00000000 l0000000000402B30
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402DCD:
	Mem2889[0x000000000061B108:word32] = 0x00000001
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402DDC:
	branch Mem323[0x000000000061B150:word32] == 0x00000000 l0000000000402B30
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402DE9:
	Mem2886[0x000000000061B150:word32] = 0x00000001
// DataOut: ebx fs r12 r13b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l00000000004031F9:
	fn0000000000409750(0x00000002)
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:<invalid> bpl:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000403203:
	Mem166[0x000000000061B150:word32] = 0x00000002
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 952 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -03C0(0)

l0000000000402DF8:
	fn0000000000409750(0x00000000)
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402DFF:
	word64 rsi_2853
	word32 eax_2845 = (word32) (uint64) Mem323[0x000000000061A56C:word32]
	branch eax_2845 == 0x00000001 l0000000000403BF3
// DataOut: eax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BF3:
	rsi_2853 = 0x0000000000413807
// DataOut: rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402E15:
	rsi_2853 = 0x000000000041380F
	branch eax_2845 == 0x00000002 l0000000000402E26
// DataOut: rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402E22_1:
	rsi_2853 = 0x000000000041380E
// DataOut: rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x000000000041380E rsi:0x000000000041380F r12:<invalid> rdx:0x0000000000415BC8 eax:0x0041380E r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:0x380E r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:<invalid> esi:0x0041380F al:0x0E cl:<invalid> r12d:<invalid> sil:0x0F dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402E26:
	word64 rdi_2856 = Mem323[0x000000000061A610:word64]
	Mem2857[fp - 952:word64] = 0x0000000000000000
	fn0000000000410B30(0x00, rsi_2853, rdi_2856)
	exit(0x0000000000000000)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402985:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:<invalid> cl:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000404890(word64 rdx, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdx
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(64)
// Terminates process
fn0000000000404890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000404890_entry:
// DataOut: rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404890:
	__align(fp + 8)
	__libc_start_main(0x00000000004028C0, qwArg00, fp + 8, 0x0000000000411E60, 0x0000000000411ED0, rdx, fp)
	__hlt()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004048C0(word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi r8 r8b r8d r8w rax rdi
// Preserved: rbp rsp
fn00000000004048C0_entry:
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048C0:
	branch false l00000000004048D7
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004048D7:
	branch 0x0000000000000000 == 0x0000000000000000 l00000000004048D5
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rax:0x000000000061A5FF r8:r8 - 6399480 rbp:fp - 8 -8(fp):rbp

l00000000004048E1:
	word64 rsp_42
	word32 eax_43
	word64 rax_44
	word64 rbp_45
	word64 r8_46
	byte SCZO_47
	byte CZ_48
	byte SZO_49
	bool C_50
	bool Z_51
	word32 edi_52
	word64 rdi_53
	call 0x0000000000000000 (retsize: 8; depth: 8)
		uses: C_38,CZ_9,eax,edi,qwLoc08_5,r8_7,rax_35,rbp_39,rdi_41,rsp_40,SCZO_8,SZO_36,Z_37
		defs: C_50,CZ_48,eax_43,edi_52,r8_46,rax_44,rbp_45,rdi_53,rsp_42,SCZO_47,SZO_49,Z_51
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rax:0x0000000000000000 r8:r8 - 6399480 rbp:fp - 8 -8(fp):rbp

l00000000004048D5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rax:<invalid> r8:r8 - 6399480 rbp:fp - 8 -8(fp):rbp

fn00000000004048C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r8:<invalid> rbp:rbp rdi:<invalid> -8(fp):rbp



byte fn00000000004049E0(word64 rcx, byte dl, word64 rsi, word64 rdi, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl rcx rdi rsi
// LiveOut: al ebx r12 r12d r8 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx eax ebp ebx ecx esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rsp sp spl
// Preserved: r14
fn00000000004049E0_entry:
// DataOut: dl ebx fs r12 r13 r15 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004049E0:
	word64 r8_131
	*r8Out = Mem0[rsi:word64]
	word64 r9_102 = Mem0[rdi:word64]
	word64 r10_100 = 0x0000000000000000
	word64 r11_15 = 0x0000000000000000
	word32 r11d_16 = 0x00000000
	byte r11b_17 = 0x00
	rcx_124 = rcx
// DataOut: dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A06:
	byte al_311
	byte SZO_193
	byte al_136
	word32 eax_209
	word32 eax_179
	byte al_106
	word64 rcx_124
	word64 rax_134 = 0x0000000000000000
	branch 0x00000000 == 0x00000002 l0000000000404A59
// DataOut: dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A59:
	rax_134 = DPB(rax_134, (word32) Mem0[r8_131:byte], 0) (alias)
	branch (byte) (rax_134 - 0x0000000000000030) <=u 0x07 l0000000000404A50
// DataOut: dl eax ebx fs r10 r11 r11b r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A50:
	word32 r11d_493 = rax_134 - 0x0000000000000030 + r11_15 * 0x0000000000000008
	r11_15 = DPB(r11_15, r11d_493, 0) (alias)
	r11b_17 = (byte) r11d_493 (alias)
	*r8Out = r8_131 + 0x0000000000000001
// DataOut: dl ebx fs r10 r11 r11b r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A0B:
	branch true l0000000000404B20
// DataOut: dl eax ebx fs r10 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404B20:
	branch true l0000000000404A70
// DataOut: dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A11:
	branch 0x00000000 == 0x00000003 l0000000000404AE0
// DataOut: dl eax ebx fs r10 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404AE0:
	rax_134 = DPB(rax_134, (word32) Mem0[r8_131:byte], 0) (alias)
	rcx_124 = DPB(rcx_124, rax_134 - 0x0000000000000030, 0) (alias)
	byte cl_427 = (byte) (rax_134 - 0x0000000000000030)
	branch cl_427 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax ebx fs r10 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404AF0:
	word64 r14_443 = 0x0000000000000001 << cl_427
	word32 r14d_444 = (word32) r14_443
	branch (r14d_444 & 0x007E0000) != 0x00000000 l0000000000404B78
// DataOut: al dl eax ebx fs r10 r11b r11d r12 r12d r13 r14 r14d r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404B78:
	r8_131 = r8_131 + 0x0000000000000001
	*r8Out = r8_131
	r11d_16 = rax_134 - 0x0000000000000037 + (uint64) (r11d_16 << 0x00000004)
	rax_134 = DPB(rax_134, (word32) Mem0[r8_131:byte], 0) (alias)
	r11b_17 = (byte) r11d_16 (alias)
	rcx_124 = DPB(rcx_124, rax_134 - 0x0000000000000030, 0) (alias)
	cl_427 = (byte) (rax_134 - 0x0000000000000030) (alias)
	branch cl_427 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax ebx fs r10 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404B95:
// DataOut: al cl dl eax ebx fs r10 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404AFF:
	branch (r14_443 & 0x0000000000000000) != 0x0000000000000000 l0000000000404AD0
// DataOut: al dl eax ebx fs r10 r11b r11d r12 r12d r13 r14d r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404AD0:
	r11d_16 = rax_134 - 0x0000000000000057 + (uint64) (r11d_16 << 0x00000004)
	*r8Out = r8_131 + 0x0000000000000001
	r11b_17 = (byte) r11d_16 (alias)
// DataOut: dl ebx fs r10 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404B04:
	branch (r14d_444 & 0x000003FF) == 0x00000000 l0000000000404A65
// DataOut: al dl eax ebx fs r10 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A65:
	Mem395[r9_102:byte] = r11b_17
	r10_100 = r10_100 + 0x0000000000000001
	r9_102 = r9_102 + 0x0000000000000001
// DataOut: dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404B11:
	r11d_16 = rax_134 - 0x0000000000000030 + (uint64) (r11d_16 << 0x00000004)
	*r8Out = r8_131 + 0x0000000000000001
	r11b_17 = (byte) r11d_16 (alias)
// DataOut: dl ebx fs r10 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A1A:
	branch true l0000000000404A70
// DataOut: dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A22:
	eax_179 = (word32) Mem0[r8_131:byte]
	rax_134 = (uint64) eax_179 (alias)
	al_311 = (byte) eax_179 (alias)
	branch (byte) (rax_134 - 0x0000000000000040) <=u 0x3E l0000000000404AA0
// DataOut: al dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A2E:
	branch al_311 == 0x3F l0000000000404CB0
// DataOut: dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404CB0:
	Mem374[r9_102:byte] = 0x7F
	r10_100 = r10_100 + 0x0000000000000001
	r9_102 = r9_102 + 0x0000000000000001
// DataOut: dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A70:
	word32 eax_341 = (word32) Mem0[r8_131:byte]
	al_136 = (byte) eax_341 (alias)
	rax_134 = DPB(rax_134, eax_341, 0) (alias)
	SZO_193 = cond(al_136 - 0x3D) (alias)
	branch al_136 == 0x3D l0000000000404ABA
// DataOut: al dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A78:
	branch SZO_193 l0000000000404B40
// DataOut: al dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404B40:
	branch al_136 == 0x00 l0000000000404B48
// DataOut: al dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404B44:
	branch al_136 != 0x3A l0000000000404B60
// DataOut: al dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404B48:
	eax_209 = 0x00000005 (alias)
// DataOut: eax fs r10 r13 r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A7E:
	branch al_136 == 0x5C l0000000000404CA0
// DataOut: al dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404CA0:
	r8_131 = r8_131 + 0x0000000000000001
// DataOut: dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404B29:
	word32 eax_234 = (word32) Mem0[r8_131:byte]
	byte al_236 = (byte) eax_234
	branch al_236 >u 0x78 l0000000000404C90
// DataOut: al dl eax ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404C90:
	r11_15 = (uint64) eax_234
	r11d_16 = (word32) r11_15 (alias)
	r11b_17 = (byte) r11_15 (alias)
// DataOut: dl ebx fs r10 r11 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404BD0:
	Mem272[r9_102:byte] = r11b_17
	r10_100 = r10_100 + 0x0000000000000001
	r9_102 = r9_102 + 0x0000000000000001
	eax_209 = 0x00000000 (alias)
// DataOut: dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404BB0:
	*r8Out = r8_131 + 0x0000000000000001
	branch true l0000000000404A06
// DataOut: dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404BBD:
// DataOut: eax fs r10 r13 r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404B4D:
	al_106 = eax_209 != 0x00000006
// DataOut: al fs r10 r13 r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404B35:
	word32 ecx_239 = (word32) al_236
	word64 rcx_240 = DPB(rcx_124, ecx_239, 0)
	word64 rsp_241
	word64 r14_242
	word64 r8_243
	word64 rsi_244
	word32 eax_245
	word64 rax_246
	byte SZO_247
	bool C_248
	word64 r9_249
	word64 rdi_250
	word32 r10d_251
	word64 r10_252
	word32 r11d_253
	word64 r11_254
	word64 r12_255
	word64 rbp_256
	word64 rcx_257
	word64 rbx_258
	word32 ebx_259
	byte SCZO_260
	bool Z_261
	byte CZ_262
	word32 ecx_263
	byte cl_264
	byte al_265
	byte r11b_266
	byte dl_267
	word32 r14d_268
	call Mem0[rcx_240 * 0x0000000000000008 + 0x00411F40:word64] (retsize: 8; depth: 40)
		uses: al_236,C_232,cl_224,CZ_238,dl,eax_234,ebx_33,ecx_239,qwLoc08_4,qwLoc10_22,qwLoc18_26,qwLoc20_31,r10_227,r10d_228,r11_221,r11b_219,r11d_222,r12_23,r14_233,r14d_218,r8_226,r9_229,rax_235,rbp_28,rbx_32,rcx_240,rdi,rsi,rsp_29,SCZO_237,SZO_231,Z_225
		defs: al_265,C_248,cl_264,CZ_262,dl_267,eax_245,ebx_259,ecx_263,r10_252,r10d_251,r11_254,r11b_266,r11d_253,r12_255,r14_242,r14d_268,r8_243,r9_249,rax_246,rbp_256,rbx_258,rcx_257,rdi_250,rsi_244,rsp_241,SCZO_260,SZO_247,Z_261
	return al_265
// DataOut: al ebx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14

l0000000000404A86:
	branch al_136 != 0x5E l0000000000404B60
// DataOut: al dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A8E:
	r8_131 = r8_131 + 0x0000000000000001
	*r8Out = r8_131
	eax_179 = (word32) Mem0[r8_131:byte]
	rax_134 = DPB(rax_134, eax_179, 0) (alias)
	al_311 = (byte) eax_179 (alias)
	branch (byte) (rax_134 - 0x0000000000000040) >u 0x3E l0000000000404A2E
// DataOut: al dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A9E:
// DataOut: al dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404AA0:
	word64 rax_181 = (uint64) (eax_179 & 0x0000001F)
	Mem186[r9_102:byte] = (byte) rax_181
	r8_131 = r8_131 + 0x0000000000000001
	*r8Out = r8_131
	word32 eax_187 = (word32) Mem186[r8_131:byte]
	al_136 = (byte) eax_187 (alias)
	r10_100 = r10_100 + 0x0000000000000001
	rax_134 = DPB(rax_181, eax_187, 0) (alias)
	r9_102 = r9_102 + 0x0000000000000001
	SZO_193 = cond(al_136 - 0x3D) (alias)
	branch al_136 != 0x3D l0000000000404A78
// DataOut: al dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404ABA:
	branch dl == 0x00 l0000000000404B60
// DataOut: al dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404B60:
	Mem140[r9_102:byte] = al_136
	*r8Out = r8_131 + 0x0000000000000001
	r10_100 = r10_100 + 0x0000000000000001
	r9_102 = r9_102 + 0x0000000000000001
// DataOut: dl ebx fs r10 r12 r12d r13 r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404AC2:
	al_106 = 0x01 (alias)
// DataOut: al fs r10 r13 r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A36:
	al_106 = 0x00 (alias)
// DataOut: al fs r10 r13 r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(32)

l0000000000404A38:
	Mem109[rdi:word64] = r9_102
	Mem110[rsi:word64] = r8_131
	Mem111[rcx:word64] = r10_100
	word32 ebx_113
	*ebxOut = (word32) rbx
	word64 rbp_115
	*rbpOut = rbp
	word64 r12_117
	*r12Out = r12
	word64 rsp_120
	*rspOut = fp
	return al_106
// DataOut: al ebx fs r12 r12d r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 32 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14

fn00000000004049E0_exit:
// DataOut: al ebx r12 r12d r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> al:Test(NE,Z) r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14



word32 fn0000000000404CD0(word32 edi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000404CD0_entry:
// DataOut: ebx edi fs r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CD0:
	word64 rdi_3 = (uint64) edi
	word32 eax_33 = 0x00000000
	word64 rdx_9 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E0:word64]
	word64 rsi_10 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E8:word64]
	*rsiOut = rsi_10
	branch rdx_9 == 0x0000000000000000 l0000000000404CFC
// DataOut: al eax ebx fs r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CEB:
	branch rdx_9 == 0x0000000000000001 l0000000000404D10
// DataOut: ebx fs r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D10:
	return (word32) (Mem0[rsi_10:byte] != 0x30)
// DataOut: al eax ebx fs r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404CF1:
	bool Z_42 = (bool) cond(rdx_9 - 0x0000000000000002)
	eax_33 = 0x00000001 (alias)
	branch rdx_9 == 0x0000000000000002 l0000000000404D00
// DataOut: al eax ebx fs r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D00:
	word64 rdi_46 = 0x0000000000413733
	word64 rcx_48 = 0x0000000000000002
// DataOut: ebx fs r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000001 rdx:<invalid> rsi:<invalid>

l0000000000404D0A:
	branch rcx_48 == 0x0000000000000000 l0000000000404D0C
// DataOut: ebx fs r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0A_1:
	Z_42 = (bool) cond(Mem0[rsi_85:byte] - Mem0[rdi_86:byte]) (alias)
	*rsiOut = rsi_85 + 0x0000000000000001
	rdi_46 = rdi_86 + 0x0000000000000001
	rcx_48 = rcx_48 - 0x0000000000000001
	word64 rsi_85 = rsi_10
	word64 rdi_86 = rdi_46
	branch Mem0[rsi_85:byte] != Mem0[rdi_86:byte] l0000000000404D0A
// DataOut: ebx fs r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0C:
	return DPB(0x00000001, Z_42, 0)
// DataOut: al eax ebx fs r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404CFC:
	return eax_33
// DataOut: al eax ebx fs r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

fn0000000000404CD0_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:Test(NE,Z) rcx:<invalid>



word64 fn0000000000404D20(word32 edx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx rdi rsi
// LiveOut: rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 r13 rbp rbx rsp
fn0000000000404D20_entry:
// DataOut: dl edx fs r13d r14d r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D20:
	byte r13b_8 = (byte) (uint64) edx
	word64 rax_25 = fn0000000000410C40(rsi, 0x0000000000000020)
	word64 rax_27 = 0x0000000000000000
	branch rsi == 0x0000000000000000 l0000000000404D4F
// DataOut: fs r12 r13b r14d r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D47:
	rax_27 = fn0000000000410E30(rsi, out rsi)
// DataOut: fs r13b r14d r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D4F:
	Mem35[rax_25 + 0x0000000000000008:word64] = rax_27
	word64 rax_36 = 0x0000000000000000
	branch rdi == 0x0000000000000000 l0000000000404D62
// DataOut: fs r13b r14d r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D5A:
	rax_36 = fn0000000000410E30(rdi, out rsi)
// DataOut: fs r13b r14d r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D62:
	Mem45[rax_25:word64] = rax_36
	word64 rax_46 = Mem45[0x000000000061B190:word64]
	Mem47[rax_25 + 0x0000000000000010:byte] = r13b_8
	Mem48[0x000000000061B190:word64] = rax_25
	Mem49[rax_25 + 0x0000000000000018:word64] = rax_46
	return rsi
// DataOut: fs r13d r14d r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

fn0000000000404D20_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbp:rbp rdi:<invalid> rbx:rbx rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



void fn0000000000404D90(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO di dil edi rdi
// Preserved: rbx rsp
fn0000000000404D90_entry:
// DataOut: fs r12 r12d r13 r13d r14 r14d r15 r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D90:
	free(Mem0[rdi:word64])
	free(Mem0[rdi + 0x0000000000000008:word64])
	word64 rdi_10 = Mem0[rdi + 0x00000000000000A8:word64]
	branch rdi_10 == 0x000000000061A56A l0000000000404DC0
// DataOut: fs r12 r12d r13 r13d r14 r14d r15 r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DC0:
	return
// DataOut: fs r12 r12d r13 r13d r14 r14d r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi rdi:<invalid> -8(fp):rbx

l0000000000404DB5:
	freecon(rdi_10)
	return
// DataOut: fs r12 r12d r13 r13d r14 r14d r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi rdi:<invalid> -8(fp):rbx

fn0000000000404D90_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdi:<invalid> -8(fp):rbx



void fn0000000000404DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rbx rsp
fn0000000000404DD0_entry:
// DataOut: ebx fs r12 r12d r13 r13d r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DD0:
	word64 rbx_32 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000404DFD
// DataOut: fs r12 r12d r13 r13d r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0008(32)

l0000000000404DDD:
// DataOut: fs r12 r12d r13 r13d r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l0000000000404DE0:
	fn0000000000404D90(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_32 * 0x0000000000000008:word64])
	rbx_32 = rbx_32 + 0x0000000000000001
	branch Mem0[0x000000000061B1B0:word64] >u rbx_32 l0000000000404DE0
// DataOut: fs r12 r12d r13 r13d r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rax:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l0000000000404DFD:
	Mem17[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem18[0x000000000061B17C:byte] = 0x00
	Mem19[0x000000000061B178:word32] = 0x00000000
	Mem20[0x000000000061B174:word32] = 0x00000000
	Mem21[0x000000000061B170:word32] = 0x00000000
	Mem22[0x000000000061B168:word32] = 0x00000000
	Mem23[0x000000000061B164:word32] = 0x00000000
	Mem24[0x000000000061B160:word32] = 0x00000000
	Mem25[0x000000000061B16C:word32] = 0x00000000
	Mem26[0x000000000061B15C:word32] = 0x00000000
	Mem27[0x000000000061B158:word32] = 0x00000000
	Mem28[0x000000000061B154:word32] = 0x00000000
	return
// DataOut: ebx fs r12 r12d r13 r13d r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rax:<invalid> rdi:<invalid> -8(fp):rbx

fn0000000000404DD0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> rdi:<invalid> -8(fp):rbx



word64 fn0000000000404E80(word64 rsi, ptr64 & r8Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: r13 r13d r14 r15 r8 rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000404E80_entry:
	*r8Out = r8
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
// DataOut: fs r13 r13d r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404E80:
	word64 rbx_10 = Mem0[0x000000000061B1B0:word64]
	word64 rbp_12 = rbx_10
	branch (rbx_10 >>u 0x0000000000000001) + rbx_10 >u Mem0[0x000000000061B1A0:word64] l0000000000404F98
// DataOut: fs r13 r13d r14 r15 r8 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404F98:
	word64 rdi_223 = Mem0[0x000000000061B1A8:word64]
	free(rdi_223)
	branch rbx_10 >u 0x00000000AAAAAAAA l0000000000404FF8
// DataOut: fs r13 r13d r14 r15 r8 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404FF8:
	fn0000000000410E50()
	word64 rsi_236 = Mem0[rsi:word64]
	strcmp(Mem0[rdi_223:word64], rsi_236)
	return rsi_236
// DataOut: fs r13 r13d r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:0x00000000AAAAAAAA rbp:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404FB3:
	word64 rax_231 = fn0000000000410C40(rsi, rbx_10 * 0x0000000000000018)
	rbp_12 = Mem0[0x000000000061B1B0:word64]
	Mem233[0x000000000061B1A8:word64] = rax_231
	Mem235[0x000000000061B1A0:word64] = rbp_12 * 0x0000000000000003
// DataOut: fs r13 r13d r14 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:0x00000000AAAAAAAA rbp:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EA6:
	branch rbp_12 == 0x0000000000000000 l0000000000404ED3
// DataOut: fs r13 r13d r14 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EAB:
	word64 rax_204 = Mem0[0x000000000061B1A8:word64]
	word64 rdx_208 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_210 = rax_204 + rbp_12 * 0x0000000000000008
// DataOut: fs r13 r13d r14 r15 r8 rax rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EC0:
	Mem214[rax_204:word64] = rdx_208
	rax_204 = rax_204 + 0x0000000000000008
	rdx_208 = rdx_208 + 192
	branch rax_204 != rcx_210 l0000000000404EC0
// DataOut: fs r13 r13d r14 r15 r8 rax rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404ED3:
	branch Mem0[0x000000000061B148:word32] == 0xFFFFFFFF l0000000000404F8C
// DataOut: fs r13 r13d r14 r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EE0:
	word64 rsi_127
	word32 ecx_120
	word64 rdi_115
	branch _setjmp(0x000000000061A680) == 0x00000000 l0000000000404F40
// DataOut: al fs
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F40:
	ecx_120 = (word32) (uint64) Mem0[0x000000000061B148:word32] (alias)
	rsi_127 = Mem0[0x000000000061B1B0:word64]
	rdi_115 = Mem0[0x000000000061B1A8:word64]
// DataOut: al ecx edi fs rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:0x000000000061A680 eax:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EEE:
	r8 = (uint64) Mem0[0x000000000061B148:word32]
	word32 r8d_155 = (word32) r8
	branch r8d_155 == 0x00000003 l0000000000404FDF
// DataOut: fs r8d
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:0x000000000061A680 eax:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404FDF:
	__assert_fail(0x000000000041373F, 0x0000000000413736, 0x0000000000000DDB, 0x0000000000412C95)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:0x000000000061A680 eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EFF:
	rsi_127 = Mem0[0x000000000061B1B0:word64]
	rdi_115 = Mem0[0x000000000061B1A8:word64]
	branch rsi_127 == 0x0000000000000000 l0000000000404F33
// DataOut: edi fs r8d rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:0x000000000061A680 eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F12:
	word64 rdx_175 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_177 = rdi_115 + rsi_127 * 0x0000000000000008
	word64 rax_179 = rdi_115
// DataOut: edi fs r8d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F20:
	Mem185[rax_179:word64] = rdx_175
	rax_179 = rax_179 + 0x0000000000000008
	rdx_175 = rdx_175 + 192
	branch rax_179 != rcx_177 l0000000000404F20
// DataOut: edi fs r8d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F33:
	ecx_120 = (word32) (uint64) r8d_155 (alias)
// DataOut: al ecx edi fs rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F54:
	branch ecx_120 != 0x00000004 l0000000000404F60
// DataOut: al ecx edi edx fs rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F59_1:
// DataOut: al ecx edi edx fs rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F60:
	word64 r8_137
	*r8Out = DPB(r8, (word32) Mem0[0x000000000061B10C:byte], 0)
	word64 r13_147
	word64 r14_148
	word64 r15_149
	rsi = fn000000000040D690(rsi_127, rdi_115, out r13_147, out r14_148, out r15_149)
// DataOut: fs r13 r13d r14 r15 r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F8C:
	return rsi
// DataOut: fs r13 r13d r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> r8:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000404E80_exit:
// DataOut: r13 r13d r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:rbx rax:<invalid> rbp:rbp rdx:<invalid> rcx:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> r8:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000405090(byte sil, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi sil
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000405090_entry:
// DataOut: fs r13d r8 rdi rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405090:
	word32 r14d_103 = (word32) sil
	branch rdi == 0x0000000000000000 l00000000004050C0
// DataOut: fs r13 r14d r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32)

l00000000004050AA:
	branch Mem0[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004050C0
// DataOut: fs r13 r14d r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050B4:
	rsi = fn0000000000404D20(0x00000000, rdi, 0x0000000000000000)
// DataOut: fs r13 r14d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050C0:
	word64 rbx_45 = Mem0[0x000000000061B1B0:word64]
// DataOut: fs r12 r13 r14d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405108:
	branch rbx_45 == 0x0000000000000000 l00000000004051A8
// DataOut: fs r12 r13 r14d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051A8:
	word64 rdx_189
	word64 rdi_175 = Mem0[0x000000000061B1B0:word64]
	branch rdi_175 == 0x0000000000000000 l00000000004051F7
// DataOut: fs r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051F7:
	rdx_189 = 0x0000000000000000
// DataOut: fs r8 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051B4:
	rsi = Mem0[0x000000000061B1A8:word64]
	rdx_189 = 0x0000000000000000
	word64 rax_214 = 0x0000000000000000
// DataOut: fs r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051C0:
	word64 rcx_221 = Mem0[rsi + rax_214 * 0x0000000000000008:word64]
	Mem224[rsi + rdx_189 * 0x0000000000000008:word64] = rcx_221
	rax_214 = rax_214 + 0x0000000000000001
	rdx_189 = rdx_189 + DPB(rcx_221, (word32) (Mem0[rcx_221 + 0x00000000000000A0:word32] != 0x00000009), 0)
	branch rax_214 != rdi_175 l00000000004051C0
// DataOut: fs r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051E1:
	Mem194[0x000000000061B1B0:word64] = rdx_189
	return rsi
// DataOut: fs r13d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000405090_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r14d:<invalid> r13:r13 rbx:rbx r12:r12 rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:rbp r14:r14 r15:r15 edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000405111:
	word64 rbp_70 = Mem0[Mem0[0x000000000061B1A8:word64]:word64]
	word32 eax_72 = (word32) (uint64) Mem0[rbp_70 + 0x00000000000000A0:word32]
	branch eax_72 == 0x00000009 l000000000040512C
// DataOut: eax fs r12 r13 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405127:
	branch eax_72 != 0x00000003 l0000000000405100
// DataOut: fs r12 r13 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l000000000040512C:
	word64 r15_97 = Mem0[rbp_70:word64]
	branch rdi == 0x0000000000000000 l00000000004050E2
// DataOut: fs r12 r13 r14d r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405135:
	word64 rax_129 = fn000000000040A390(r15_97, out rsi)
	branch Mem0[rax_129:byte] != 0x2E l00000000004050D8
// DataOut: fs r12 r13 r14d r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405142:
	byte al_167 = (byte) (word32) Mem0[rax_129 + 0x0000000000000001 + (uint64) (Mem0[rax_129 + 0x0000000000000001:byte] == 0x2E):byte]
	branch al_167 == 0x2F l0000000000405100
// DataOut: al fs r12 r13 r14d r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405154:
	branch al_167 == 0x00 l0000000000405100
// DataOut: fs r12 r13 r14d r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405158:
// DataOut: fs r12 r13 r14d r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050D8:
	branch Mem0[r15_97:byte] != 0x2F l0000000000405160
// DataOut: fs r12 r13 r14d r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405160:
	word64 rax_149 = fn000000000040A610(0x0000000000000000, r15_97, rdi, out r14d_103)
	rsi = fn0000000000404D20((word32) (uint64) r14d_103, Mem0[rbp_70 + 0x0000000000000008:word64], rax_149)
	free(rax_149)
	branch Mem0[rbp_70 + 0x00000000000000A0:word32] != 0x00000009 l0000000000405100
// DataOut: fs r12 r13 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050E2:
	rsi = fn0000000000404D20((word32) (uint64) r14d_103, Mem0[rbp_70 + 0x0000000000000008:word64], r15_97)
	branch Mem0[rbp_70 + 0x00000000000000A0:word32] == 0x00000009 l0000000000405194
// DataOut: fs r12 r13 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405194:
	fn0000000000404D90(rbp_70)
// DataOut: fs r12 r13 r14d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050FE:
// DataOut: fs r12 r13 r14d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405100:
	rbx_45 = rbx_45 - 0x0000000000000001
// DataOut: fs r12 r13 r14d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)



void fn0000000000405200(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000405200_entry:
// DataOut: fs r13 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405200:
	word64 rbx_11 = rdi
	branch rdi <u rsi l000000000040526B
// DataOut: fs r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040526B:
	word64 rcx_116 = Mem0[0x000000000061B0D8:word64]
	branch rcx_116 != 0x0000000000000000 l0000000000405220
// DataOut: fs r13 rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405220:
	word64 rsi_96 = rbx_11 + 0x0000000000000001
	branch (uint64) ((uint128) (uint64) rsi /u rcx_116) <=u (uint64) ((uint128) ((uint64) rsi_96) /u rcx_116) l00000000004052A8
// DataOut: fs r13 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004052A8:
	rbx_11 = rsi_96
// DataOut: fs r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040523C:
	word64 rdi_110 = Mem0[0x000000000061A610:word64]
	word64 rax_111 = Mem0[rdi_110 + 0x0000000000000028:word64]
	branch rax_111 >=u Mem0[rdi_110 + 0x0000000000000030:word64] l00000000004052B9
// DataOut: fs r13 rax rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004052B9:
	__overflow(rdi_110, 0x0000000000000009)
	rcx_116 = Mem0[0x000000000061B0D8:word64]
// DataOut: fs r13 rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040524D:
	Mem129[rdi_110 + 0x0000000000000028:word64] = rax_111 + 0x0000000000000001
	Mem130[rax_111:byte] = 0x09
// DataOut: fs r13 rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405258:
	rbx_11 = rbx_11 + rcx_116 - (uint64) ((uint128) ((uint64) rbx_11) % rcx_116)
// DataOut: fs r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405277:
	rbx_11 = rbx_11 + 0x0000000000000001
// DataOut: fs r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040527B:
	word64 rdi_78 = Mem0[0x000000000061A610:word64]
	word64 rdx_79 = Mem0[rdi_78 + 0x0000000000000028:word64]
	branch rdx_79 >=u Mem0[rdi_78 + 0x0000000000000030:word64] l00000000004052AD
// DataOut: fs r13 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004052AD:
	__overflow(rdi_78, 0x0000000000000020)
// DataOut: fs r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405266:
	branch rsi <=u rbx_11 l000000000040529C
// DataOut: fs r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040528C:
	Mem87[rdi_78 + 0x0000000000000028:word64] = rdx_79 + 0x0000000000000001
	Mem88[rdx_79:byte] = 0x20
	branch rsi >u rbx_11 l000000000040526B
// DataOut: fs r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405211:
// DataOut: fs r13
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:rdi -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040529C:
	return
// DataOut: fs r13
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000405200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn00000000004052D0(word64 rdx, word64 rsi, selector fs, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r12bOut, ptr64 & r14bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs rdx rsi
// LiveOut: r12b r14b r8 rax rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn00000000004052D0_entry:
// DataOut: fs rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004052D0:
	word64 r8_45
	word64 rax_46 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, 0x0000000000002000, fp + 0xFFFFFFFFFFFFDFB8, rdx, fs, out r8_45)
	Mem52[fp + 0xFFFFFFFFFFFFDF90:word64] = fp + 0xFFFFFFFFFFFFDFB8
	word64 rsi_22
	*rsiOut = 0x0000000000002000
	word64 rbx_290 = rax_46
	word64 rax_49 = fp + 0xFFFFFFFFFFFFDFB8
	branch rax_46 >u 0x0000000000001FFF l0000000000405590
// DataOut: fs r12 r13 r14 r8 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405590:
	Mem521[fp + 0xFFFFFFFFFFFFDF90:word64] = fp - 8328 - (rax_46 + 0x000000000000001F & 0xFFFFFFFFFFFFFFF0) + 0x000000000000000F
	Mem523[fp + 0xFFFFFFFFFFFFDF90:word64] = Mem521[fp + 0xFFFFFFFFFFFFDF90:word64] & 0xFFFFFFFFFFFFFFF0
	*rsiOut = rax_46 + 0x0000000000000001
	word64 r8_527
	rax_49 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, rax_46 + 0x0000000000000001, Mem523[fp + 0xFFFFFFFFFFFFDF90:word64], rdx, fs, out r8_527)
// DataOut: fs r12 r8 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):fp + 0xFFFFFFFFFFFFDFB8 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405343:
	word64 rdx_190 = rsi
	branch Mem52[0x000000000061B0F0:byte] != 0x00 l0000000000405412
// DataOut: fs r12 r8 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405412:
	word64 rax_215 = DPB(rax_49, __ctype_get_mb_cur_max(), 0)
	branch rax_215 <=u 0x0000000000000001 l00000000004055D1
// DataOut: fs r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055D1:
	word64 r14_460 = Mem52[fp + 0xFFFFFFFFFFFFDF90:word64]
	word64 r12_462 = r14_460 + rax_46
	branch r14_460 >=u r12_462 l0000000000405602
// DataOut: fs r12 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055E1:
	word64 rax_485 = __ctype_b_loc()
	word64 rdx_489 = r14_460
// DataOut: fs r12 r8 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055E9:
	rsi_22 = DPB(rsi_22, (word32) Mem52[rdx_489:byte], 0) (alias)
	*rsiOut = rsi_22
	branch (Mem52[Mem52[rax_485:word64] + 0x0000000000000001 + rsi_22 * 0x0000000000000002:byte] & 0x40) != 0x00 l00000000004055F9
// DataOut: fs r12 r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8264(fp):0x3F -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055F6:
	Mem511[rdx_489:byte] = 0x3F
// DataOut: fs r12 r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8264(fp):0x3F -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055F9:
	rdx_489 = rdx_489 + 0x0000000000000001
	branch rdx_489 != r12_462 l00000000004055E9
// DataOut: fs r12 r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8264(fp):0x3F -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405602:
	r12 = rax_46
// DataOut: fs r12 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8264(fp):0x3F -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405421:
	word64 r15_218 = Mem52[fp + 0xFFFFFFFFFFFFDF90:word64]
	word64 r13_219 = r15_218 + rax_46
	branch r15_218 >=u r13_219 l0000000000405612
// DataOut: fs r13 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405612:
	rbx_290 = 0x0000000000000000
	r12 = 0x0000000000000000
// DataOut: fs r12 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r9:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405435:
	word64 rbx_222 = r15_218
	r12 = 0x0000000000000000
// DataOut: fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r9:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405440:
	word32 eax_256 = (word32) Mem52[r15_218:byte]
	rax_215 = DPB(rax_215, eax_256, 0) (alias)
	byte al_258 = (byte) eax_256
	branch al_258 > 0x3F l0000000000405520
// DataOut: al fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405520:
	branch al_258 < 0x41 l0000000000405460
// DataOut: al fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405528:
	branch al_258 <= 0x5F l0000000000405538
// DataOut: al fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040552C:
	branch (byte) (rax_215 - 0x0000000000000061) >u 0x1D l0000000000405460
// DataOut: al fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040544C:
	branch al_258 >= 0x25 l0000000000405538
// DataOut: al fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405454:
	branch (byte) (rax_215 - 0x0000000000000020) <=u 0x03 l0000000000405538
// DataOut: al fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405538:
	Mem431[rbx_222:byte] = al_258
	r15_218 = r15_218 + 0x0000000000000001
	r12 = r12 + 0x0000000000000001
	rbx_222 = rbx_222 + 0x0000000000000001
	branch r15_218 <u r13_219 l0000000000405440
// DataOut: fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040554F:
// DataOut: fs r12 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405460:
	Mem299[fp + 0xFFFFFFFFFFFFDFA8:word64] = 0x0000000000000000
// DataOut: fs r12 r13 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405470:
	rax_215 = DPB(rax_215, mbrtowc(fp + 0xFFFFFFFFFFFFDFA4, r15_218, r13_219 - r15_218, fp + 0xFFFFFFFFFFFFDFA8), 0) (alias)
	word64 rsi_320 = r15_218
	*rsiOut = rsi_320
	word64 r14_328 = rax_215
	branch rax_215 == 0xFFFFFFFFFFFFFFFF l0000000000405551
// DataOut: fs r12 r13 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405551:
	Mem417[rbx_222:byte] = 0x3F
	r15_218 = r15_218 + 0x0000000000000001
	r12 = r12 + 0x0000000000000001
	rbx_222 = rbx_222 + 0x0000000000000001
	branch r15_218 <u r13_219 l0000000000405440
// DataOut: fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405569:
// DataOut: fs r12 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405499:
	branch rax_215 == 0xFFFFFFFFFFFFFFFE l000000000040556B
// DataOut: fs r12 r13 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040556B:
	Mem408[rbx_222:byte] = 0x3F
	r15_218 = r13_219
	r12 = r12 + 0x0000000000000001
	rbx_222 = rbx_222 + 0x0000000000000001
	branch r13_219 <u r13_219 l0000000000405440
// DataOut: fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405582:
// DataOut: fs r12 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054A3:
	word64 rdi_332 = (uint64) Mem299[fp + 0xFFFFFFFFFFFFDFA4:word32]
	branch rax_215 != 0x0000000000000000 l00000000004054B5
// DataOut: fs r12 r13 r14 r15 r8 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054B1_1:
	r14_328 = 0x0000000000000001
// DataOut: fs r12 r13 r14 r15 r8 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> eax:0x00000001 r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054B5:
	word32 eax_340 = wcwidth(rdi_332)
	rax_215 = DPB(0x0000000000000001, eax_340, 0) (alias)
	byte al_342 = (byte) eax_340
	branch eax_340 < 0x00000000 l0000000000405510
// DataOut: al fs r12 r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> eax:0x00000001 r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405510:
	Mem397[rbx_222:byte] = 0x3F
	r15_218 = r15_218 + r14_328
	r12 = r12 + 0x0000000000000001
	rbx_222 = rbx_222 + 0x0000000000000001
// DataOut: fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054BE:
	word64 rsi_371 = r15_218 + r14_328
	*rsiOut = rsi_371
	word64 rdx_373 = rbx_222
// DataOut: al fs r12 r13 r14 r15 r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054C8:
	r15_218 = r15_218 + 0x0000000000000001
	rdx_373 = rdx_373 + 0x0000000000000001
	Mem388[rdx_373 - 0x0000000000000001:byte] = (byte) (word32) Mem299[r15_218 - 0x0000000000000001:byte]
	branch r15_218 != rsi_371 l00000000004054C8
// DataOut: al fs r12 r13 r14 r15 r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054DD:
	rax_215 = DPB(rax_215, (int16) al_342, 0) (alias)
	rbx_222 = rbx_222 + r14_328
	r12 = r12 + rax_215
// DataOut: fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054E5:
	branch mbsinit(fp + 0xFFFFFFFFFFFFDFA8) == 0x00000000 l0000000000405470
// DataOut: fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054F9:
	branch r15_218 <u r13_219 l0000000000405440
// DataOut: fs r12 r13 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405502:
	rbx_290 = rbx_222 - Mem52[fp + 0xFFFFFFFFFFFFDF90:word64]
// DataOut: fs r12 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405350:
	branch Mem52[fp + 0xFFFFFFFFFFFFDF88:word64] == 0x0000000000000000 l0000000000405379
// DataOut: fs r12 r8 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040535A:
	branch DPB(rax_49, __ctype_get_mb_cur_max(), 0) <=u 0x0000000000000001 l00000000004053CD
// DataOut: fs r8 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053CD:
	word64 r14_172 = Mem52[fp + 0xFFFFFFFFFFFFDF90:word64]
	word64 r13_174 = r14_172 + rax_46
	branch r14_172 >=u r13_174 l000000000040560A
// DataOut: fs r13 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040560A:
	r12 = 0x0000000000000000
// DataOut: fs r12 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053E1:
	r12 = 0x0000000000000000
	word64 rcx_183 = Mem52[__ctype_b_loc():word64]
	word64 rax_186 = r14_172
// DataOut: fs r12 r13 r8 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053F0:
	rdx_190 = DPB(rdx_190, (word32) Mem52[rax_186:byte], 0) (alias)
	r12 = r12 - 0xFF - (((word16) ((word32) Mem52[rcx_183 + rdx_190 * 0x0000000000000002:word16]) & 0x4000) <u 0x0001)
	rax_186 = rax_186 + 0x0000000000000001
	branch rax_186 != r13_174 l00000000004053F0
// DataOut: fs r12 r13 r8 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040540D:
// DataOut: fs r12 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405365:
	word64 rsi_166
	r12 = (int64) fn000000000040D240(0x00000000, rax_46, Mem52[fp + 0xFFFFFFFFFFFFDF90:word64], fs, out rsi_166)
// DataOut: fs r12 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405379:
	word64 rcx_91 = Mem52[fp + 0xFFFFFFFFFFFFDF80:word64]
	branch rcx_91 == 0x0000000000000000 l0000000000405399
// DataOut: fs r12 r8 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405385:
	fwrite_unlocked(Mem52[fp + 0xFFFFFFFFFFFFDF90:word64], 0x0000000000000001, rbx_290, rcx_91)
	word64 rsi_140
	*rsiOut = 0x0000000000000001
// DataOut: fs r12 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405399:
	word64 rax_101 = Mem52[fp + 0xFFFFFFFFFFFFDF88:word64]
	branch rax_101 == 0x0000000000000000 l00000000004053A8
// DataOut: fs r12 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053A5:
	Mem137[rax_101:word64] = r12
// DataOut: fs r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053A8:
	branch (Mem52[fp - 0x0000000000000040:word64] ^ Mem52[fs:0x00000028:word64]) != 0x0000000000000000 l000000000040561C
// DataOut: fs r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040561C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053BE:
	byte r12b_122
	*r12bOut = (byte) Mem52[fp - 0x0000000000000028:word64]
	byte r14b_127
	*r14bOut = (byte) Mem52[fp - 0x0000000000000018:word64]
	return rbx_290
// DataOut: fs r12b r14b r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

fn00000000004052D0_exit:
// DataOut: r12b r14b r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -8264(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp



void fn0000000000405630(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn0000000000405630_entry:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(0)

l0000000000405630:
	word64 rax_13 = Mem0[rsi + 0x0000000000000018:word64]
	word64 rbp_15 = Mem0[rsi + 0x0000000000000010:word64]
	word64 r12_19 = (uint64) ((word32) (rax_13 - rbp_15) >>u 0x00000003)
	branch r12_19 == 0x0000000000000000 l00000000004056DB
// DataOut: r12 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(0)

l000000000040564F:
	branch rax_13 == rbp_15 l00000000004056E6
// DataOut: r12 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rax:<invalid> rbp:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(0)

l00000000004056E6:
	Mem132[rsi + 0x0000000000000050:byte] = Mem0[rsi + 0x0000000000000050:byte] | 0x02
// DataOut: r12 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rax:<invalid> rbp:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(0)

l0000000000405658:
	word64 rcx_76 = (int64) Mem0[rsi + 0x0000000000000030:word32]
	word64 rcx_81 = Mem0[rsi + 0x0000000000000020:word64]
	word64 rdx_86 = (int64) (word32) (uint64) ~(word32) (uint64) (word32) rcx_76 & rax_13 + rcx_76
	word64 rax_87 = Mem0[rsi + 0x0000000000000008:word64]
	Mem89[rsi + 0x0000000000000018:word64] = rdx_86
	branch rdx_86 - rax_87 > rcx_81 - rax_87 l00000000004056E0
// DataOut: r12 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rax:<invalid> rbp:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(0)

l00000000004056E0:
	Mem130[rsi + 0x0000000000000018:word64] = rcx_81
// DataOut: r12 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(0)

l0000000000405683:
	Mem99[rsi + 0x0000000000000010:word64] = Mem89[rsi + 0x0000000000000018:word64]
	fputs_unlocked(rdi, Mem99[0x000000000061A610:word64])
	word64 rbx_102 = 0x0000000000000000
// DataOut: r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(0)

l00000000004056A0:
	__printf_chk(0x0000000000000001, 0x0000000000413759, tLoc20)
	rbx_102 = rbx_102 + 0x0000000000000001
	branch r12_19 >u rbx_102 l00000000004056A0
// DataOut: r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:<invalid> eax:<invalid> rdi:0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(0)

l00000000004056BF:
	word64 rdi_113 = Mem99[0x000000000061A610:word64]
	word64 rax_115 = Mem99[rdi_113 + 0x0000000000000028:word64]
	branch rax_115 >=u Mem99[rdi_113 + 0x0000000000000030:word64] l00000000004056EF
// DataOut: rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004056EF:
	__overflow(rdi_113, 0x000000000000000A)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l00000000004056D0:
	Mem120[rdi_113 + 0x0000000000000028:word64] = rax_115 + 0x0000000000000001
	Mem121[rax_115:byte] = 0x0A
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004056DB:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000405630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbp:rbp r12:r12 rbx:rbx rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



void fn0000000000405700(word32 edx, word64 rdi, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi rax rbx rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000405700_entry:
// DataOut: edx fs rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(0)

l0000000000405700:
	word64 rbp_29
	word32 ebx_12 = (word32) (uint64) edx
	branch rdi == 0x0000000000000000 l0000000000405780
// DataOut: ebx fs rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(0)

l0000000000405780:
	__printf_chk(0x0000000000000001, 0x000000000041375E, tLoc20)
	rbp_29 = (int64) ebx_12
// DataOut: fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:(uint64) edx -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405710:
	word64 rsi_45
	word32 eax_46 = fn000000000040D420(0x00000000, rdi, fs, out rsi_45)
	word64 rsi_47 = Mem0[0x000000000061A610:word64]
	word32 ebx_50 = (word32) (uint64) (ebx_12 - eax_46)
	branch ebx_50 >= 0x00000000 l0000000000405728
// DataOut: ebx fs rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:(uint64) edx -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405725_1:
	ebx_50 = 0x00000000
// DataOut: ebx fs rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 eax:0x00000000 rdx:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405728:
	fputs_unlocked(rdi, rsi_47)
	rbp_29 = (int64) ebx_50 + (uint64) strlen(rdi)
// DataOut: ebx fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 ebx:<invalid> eax:0x00000000 rdx:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405740:
	word64 rdi_71 = Mem0[0x000000000061A610:word64]
	word64 rcx_73 = Mem0[rdi_71 + 0x0000000000000028:word64]
	branch rcx_73 >=u Mem0[rdi_71 + 0x0000000000000030:word64] l0000000000405799
// DataOut: ebx fs rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405799:
	__overflow(rdi_71, 0x0000000000000020)
// DataOut: ebx fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405751:
	Mem84[rdi_71 + 0x0000000000000028:word64] = rcx_73 + 0x0000000000000001
	Mem85[rcx_73:byte] = 0x20
// DataOut: ebx fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040575C:
	ebx_50 = (word32) (uint64) (ebx_50 - 0x00000001) (alias)
	branch ebx_50 != 0xFFFFFFFF l0000000000405740
// DataOut: ebx fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405764:
	Mem33[0x000000000061B018:word64] = rbp_29 + 0x0000000000000001 + Mem0[0x000000000061B018:word64]
	return
// DataOut: fs
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000405700_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp



void fn00000000004057B0(byte dl, word64 rsi, word32 edi, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edi esi fs rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi rax rbx rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn00000000004057B0_entry:
// DataOut: dl edi esi fs rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057B0:
	word64 rax_18 = 0x0000000000413764
	branch dl == 0x00 l00000000004057CB
// DataOut: edi esi fs rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057C0:
	rax_18 = 0x0000000000000000
	branch Mem0[0x000000000061B145:byte] == 0x00 l00000000004057E0
// DataOut: edi esi fs rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:0x0000000000413764 rbx:(uint64) edi -8(fp):rbx
// LocalsOut: fp(64)

l00000000004057E0:
	rax_18 = fn000000000040C9B0(rsi, edi)
	esi = (word32) (uint64) esi (alias)
// DataOut: esi fs rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbx:(uint64) edi -8(fp):rbx
// LocalsOut: fp(64)

l00000000004057CB:
	word32 edx_25 = (word32) (uint64) esi
// DataOut: edx fs rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbx:(uint64) edi rsi:<invalid> rdx:<invalid> rdi:<invalid> eax:<invalid> -12(fp):esi -8(fp):rbx

l00000000004057D8_thunk_fn0000000000405700:
	fn0000000000405700(edx_25, rax_18, fs)
	return
// DataOut: fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdx:(uint64) esi rsi:(uint64) edi rdi:<invalid> eax:<invalid> -12(fp):esi -8(fp):rbx

fn00000000004057B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> eax:<invalid> ebx:<invalid> edx:<invalid> -12(fp):esi -8(fp):rbx



word64 fn0000000000405810(word64 rdx, word64 rsi, word32 edi, word64 r15, selector fs, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r15 rdx rsi
// LiveOut: r8 rsi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn0000000000405810_entry:
// DataOut: edi fs r13 r14 r15 r15b rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(0)

l0000000000405810:
	word64 r12_20
	word64 r8_21
	*r8Out = fn000000000040EAB0(rdx, r15, fs, out r12_20)
	word64 rsi_26 = (uint64) Mem0[__errno_location():word32]
	error(0x0000000000000000, rsi_26, rsi, tLoc20)
	branch (byte) (uint64) edi == 0x00 l0000000000405850
// DataOut: fs r13 r14 r15 r15b r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405850:
	branch (word32) (uint64) Mem0[0x000000000061B030:word32] != 0x00000000 l000000000040584A
// DataOut: fs r13 r14 r15 r15b r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 r12:(uint64) edi rdi:<invalid> rbx:rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:rsi r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040585A:
	Mem68[0x000000000061B030:word32] = 0x00000001
	return rsi_26
// DataOut: fs r13 r14 r15 r15b r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 r12:(uint64) edi rdi:<invalid> rbx:rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:rsi r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000405840:
	Mem57[0x000000000061B030:word32] = 0x00000002
// DataOut: fs r13 r14 r15 r15b r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 r12:(uint64) edi rdi:<invalid> rbx:rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:rsi r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040584A:
	return rsi_26
// DataOut: fs r13 r14 r15 r15b r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 r12:(uint64) edi rdi:<invalid> rbx:rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:rsi r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000405810_exit:
// DataOut: r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r12:r12 rdi:<invalid> rbx:rbx rbp:rbp rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:rsi r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn0000000000405C20(word32 edx, word32 esi, byte dil, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx eax ecx esi rax rcx rsi si sil
// Preserved: rsp
fn0000000000405C20_entry:
	*rsiOut = rsi
// DataOut: dil edx esi fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C20:
	byte cl_129
	word32 eax_107
	branch dil == 0x00 l0000000000405C40
// DataOut: dil edx esi fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C40:
	eax_107 = 0x00000000 (alias)
	branch edx == 0x00000005 l0000000000405C3E
// DataOut: al dil eax edx esi fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C47:
	cl_129 = (byte) (uint64) (DPB(ecx, edx == 0x00000009, 0) | (word32) (edx == 0x00000003)) (alias)
// DataOut: cl dil edx esi fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C25:
	word32 eax_102 = (word32) (uint64) ((word32) (uint64) esi & 0x0000F000)
	branch eax_102 != 0x00008000 l0000000000405CA0
// DataOut: dil eax edx esi fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405CA0:
	cl_129 = eax_102 == 0x00004000
// DataOut: cl dil edx esi fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C55:
	eax_107 = 0x0000002F (alias)
	branch cl_129 != 0x00 l0000000000405C3E
// DataOut: al dil eax edx esi fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid>

l0000000000405C5E:
	branch Mem0[0x000000000061B12C:word32] == 0x00000001 l0000000000405CF0
// DataOut: dil edx esi fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CF0:
	return 0x00000000
// DataOut: al eax fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C6B:
	word32 eax_53
	branch dil == 0x00 l0000000000405CC0
// DataOut: edx esi fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CC0:
	eax_107 = 0x00000040 (alias)
	branch edx == 0x00000006 l0000000000405C3E
// DataOut: al eax edx fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CCE:
	eax_107 = 0x0000007C (alias)
	branch edx == 0x00000001 l0000000000405C3E
// DataOut: al eax edx fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid>

l0000000000405CDC:
	eax_53 = DPB(0x0000007C, edx == 0x00000007, 0) (alias)
// DataOut: eax fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid>

l0000000000405C70:
	word64 rsi_61 = (uint64) (esi & 0x0000F000)
	*rsiOut = rsi_61
	word32 esi_62 = (word32) rsi_61
	eax_107 = 0x00000040 (alias)
	branch esi_62 == 0x0000A000 l0000000000405C3E
// DataOut: al eax esi fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C83:
	eax_107 = 0x0000007C (alias)
	branch esi_62 == 0x00001000 l0000000000405C3E
// DataOut: al eax esi fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid> rsi:<invalid>

l0000000000405C90:
	eax_53 = DPB(0x0000007C, esi_62 == 0x0000C000, 0) (alias)
// DataOut: eax fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid> rsi:<invalid>

l0000000000405CE2:
	return (word32) (uint64) ((word32) (uint64) -eax_53 & 0x0000003D)
// DataOut: al eax fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid> rsi:<invalid>

l0000000000405C33:
	eax_107 = 0x00000000 (alias)
	branch Mem0[0x000000000061B12C:word32] == 0x00000003 l0000000000405CB0
// DataOut: al eax esi fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405CB0:
	word64 rsi_114 = (uint64) (esi & 0x00000049)
	*rsiOut = rsi_114
	return (word32) (uint64) ((word32) (uint64) ~(word32) (uint64) (0x00000000 - (bool) cond((word32) rsi_114 - 0x00000001)) & 0x0000002A)
// DataOut: al eax fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C3E:
	return eax_107
// DataOut: al eax fs r12 r12b r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> rsi:<invalid>

fn0000000000405C20_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid>



byte fn0000000000405D00(word32 edx, word32 esi, byte dil, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000405D00_entry:
// DataOut: dil edx esi fs r12 r13 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D00:
	word64 rsi_10
	word32 eax_11 = fn0000000000405C20(edx, esi, (byte) (word32) dil, out rsi_10)
	byte bl_18 = (byte) (uint64) eax_11
	branch (byte) eax_11 == 0x00 l0000000000405D33
// DataOut: bl fs r12 r13 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405D10:
	word64 rdi_42 = Mem0[0x000000000061A610:word64]
	word64 rax_45 = Mem0[rdi_42 + 0x0000000000000028:word64]
	branch rax_45 >=u Mem0[rdi_42 + 0x0000000000000030:word64] l0000000000405D3A
// DataOut: bl fs r12 r13 r15 r8 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 edi:(word32) dil rbx:(uint64) eax rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D3A:
	word64 rsi_61 = DPB(rsi_10, (word32) bl_18, 0)
	*rsiOut = rsi_61
	__overflow(rdi_42, rsi_61)
// DataOut: bl fs r12 r13 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D21:
	Mem58[rdi_42 + 0x0000000000000028:word64] = rax_45 + 0x0000000000000001
	Mem59[rax_45:byte] = bl_18
// DataOut: bl fs r12 r13 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D2B:
	Mem55[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bl fs r12 r13 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:(word32) bl eax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D33:
	return bl_18 != 0x00
// DataOut: al fs r12 r13 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:(word32) bl eax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

fn0000000000405D00_exit:
// DataOut: al rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rbx:rbx al:Test(NE,Z) rdi:<invalid> rax:<invalid> rdx:<invalid> esi:(word32) bl eax:<invalid> rsi:<invalid> cl:<invalid> rcx:<invalid> -8(fp):rbx



word64 fn0000000000405D50(word64 rdi, selector fs, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r12bOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs rdi
// LiveOut: r12b r13 r14 r15 r8 rax rsi
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000405D50_entry:
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
// DataOut: fs rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D50:
	word64 rbx_10 = 0x0000000000000000
	word64 rax_152 = 0x0000000000000000
	branch Mem0[0x000000000061B114:byte] == 0x00 l0000000000405D92
// DataOut: fs rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D7A:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405EA0
// DataOut: fs rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405EA0:
	word64 rax_192 = fn000000000040CD70(fp - 0x00000000000002B8, Mem0[rdi + 0x0000000000000018:word64])
	rax_152 = DPB(rax_192, strlen(rax_192), 0) (alias)
	rbx_10 = rax_152 + 0x0000000000000001
// DataOut: fs rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405D87:
	rbx_10 = (int64) Mem0[0x000000000061B178:word32] + 0x0000000000000001
// DataOut: fs rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405D92:
	branch Mem0[0x000000000061B144:byte] == 0x00 l0000000000405DB6
// DataOut: fs rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405D9B:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E58
// DataOut: fs rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405E58:
	rax_152 = 0x0000000000000002
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000405DB3
// DataOut: fs rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405E6A:
	word64 r8_174
	word32 r15d_175
	word64 rax_176 = fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], fp - 0x00000000000002B8, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out r8_174, out r15d_175)
	rax_152 = DPB(rax_176, strlen(rax_176), 0) + 0x0000000000000001
// DataOut: fs rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:0x0000000000000002 rdi:<invalid> rsi:<invalid> eax:0x00000002 rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DA8:
	rax_152 = (int64) Mem0[0x000000000061B174:word32] + 0x0000000000000001
// DataOut: fs rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DB3:
	rbx_10 = rbx_10 + rax_152
// DataOut: fs rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DB6:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000405DD6
// DataOut: fs rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DBF:
	word64 rax_125
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E40
// DataOut: fs rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405E40:
	rax_125 = DPB(rax_152, strlen(Mem0[rdi + 0x00000000000000A8:word64]), 0) + 0x0000000000000001
// DataOut: fs rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DC8:
	rax_125 = (int64) Mem0[0x000000000061B16C:word32] + 0x0000000000000001
// DataOut: fs rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DD3:
	rbx_10 = rbx_10 + rax_125
// DataOut: fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DD6:
	word64 rsi_60
	word64 r8_61
	byte r12b_62
	byte r14b_63
	fn00000000004052D0(Mem0[0x000000000061B0E8:word64], Mem0[rdi:word64], fs, out rsi_60, out r8_61, out r12b_62, out r14b_63)
	word64 rax_65 = (uint64) Mem0[0x000000000061B12C:word32]
	word64 rbx_119 = rbx_10 + Mem0[fp - 0x00000000000002C0:word64]
	branch (word32) rax_65 == 0x00000000 l0000000000405E1C
// DataOut: fs r12b r13 r14 r15 r8 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 712 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405DFC:
	word64 rsi_111
	rbx_119 = rbx_119 + DPB(rax_65, (word32) ((byte) fn0000000000405C20((word32) ((uint64) Mem0[rdi + 0x00000000000000A0:word32]), (word32) ((uint64) Mem0[rdi + 0x0000000000000028:word32]), (byte) ((word32) Mem0[rdi + 0x00000000000000B0:byte]), out rsi_111) != 0x00), 0)
// DataOut: fs r12b r13 r14 r15 r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> edi:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405E1C:
	branch (Mem0[fp - 0x0000000000000020:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000405EBF
// DataOut: fs r12b r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405EBF:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405E36:
	return rbx_119
// DataOut: fs r12b r13 r14 r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000405D50_exit:
// DataOut: r12b r13 r14 r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000405ED0(word64 rsi, word32 edi, selector fs, ptr64 & rsiOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs rsi
// LiveOut: r8 rax rsi
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 rbp rbx rsp
fn0000000000405ED0_entry:
// DataOut: edi fs rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405ED0:
	word64 rdx_6 = Mem0[0x000000000061B1B0:word64]
	word64 rax_8 = Mem0[0x000000000061B020:word64]
	word64 rbx_117 = rdx_6
	branch rax_8 >u rdx_6 l0000000000405EF3
// DataOut: fs rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405EEF_1:
	rbx_117 = rax_8
// DataOut: fs rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405EF3:
	word64 rax_310
	word64 rsi_305
	word64 r8_304
	branch rbx_117 <=u Mem0[0x000000000061A660:word64] l00000000004060C8
// DataOut: fs rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060C8:
	rax_310 = 0x0000000000000000
	r8_304 = rdx_6
	*r8Out = r8_304
	rsi_305 = Mem0[0x000000000061B028:word64]
	*rsiOut = rsi_305
	branch rbx_117 == 0x0000000000000000 l0000000000406004
// DataOut: fs r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060DD:
// DataOut: fs r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405F00:
	word64 rbp_375
	word64 rdi_341 = Mem0[0x000000000061B028:word64]
	word32 edi_342 = (word32) rdi_341
	branch rbx_117 <u rax_8 >>u 0x0000000000000001 l0000000000406170
// DataOut: edi fs rax rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406170:
	branch rbx_117 >u 0x0000000055555555 l000000000040619D
// DataOut: edi fs rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040617F:
	rbp_375 = rbx_117 * 0x0000000000000002
	word64 r8_475
	Mem477[0x000000000061B028:word64] = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rbp_375 + rbx_117 << 0x0000000000000004, rdi_341, out r8_475)
// DataOut: fs rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:0x0000000055555555 r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405F16:
	branch rax_8 >u 0x00000000AAAAAAAA l000000000040619D
// DataOut: edi fs rax rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405F29:
	word64 r8_461
	word64 rax_462 = fn0000000000410C90(0x00000000AAAAAAAA, rax_8 * 0x0000000000000018, rdi_341, out r8_461)
	rbp_375 = Mem0[0x000000000061B020:word64]
	Mem465[0x000000000061B028:word64] = rax_462
// DataOut: fs rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:0x00000000AAAAAAAA rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405F44:
	word64 rax_376 = Mem0[0x000000000061A660:word64]
	word64 rdi_379 = rbp_375 - rax_376
	rsi = rbp_375 + 0x0000000000000001 + rax_376
	edi_342 = (word32) rdi_379 (alias)
	word64 rcx_382 = rsi *s rdi_379
	branch rbp_375 >u rsi l000000000040619D
// DataOut: edi fs rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405F66:
	branch rsi != (uint64) ((uint128) ((uint64) rcx_382) /u rdi_379) l000000000040619D
// DataOut: edi fs rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405F77:
	branch rcx_382 >>u 0x0000000000000001 >u 0x00000000FFFFFFFF l000000000040619D
// DataOut: edi fs rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040619D:
	fn0000000000410E50()
// DataOut: edi fs rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// Terminates process

l00000000004061A2_thunk_fn00000000004061B0:
	word64 rsi_363
	word64 r8_364
	return fn00000000004061B0(rsi, edi_342, fs, out rsi_363, out r8_364)
// DataOut: fs r8 rax rsi
// DataOut (flags): 
// SymbolicIn: -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F8D:
	word64 rax_401 = fn0000000000410C40(rsi, (rcx_382 >>u 0x0000000000000001) * 0x0000000000000008)
	word64 rcx_405 = Mem0[0x000000000061A660:word64]
	branch rbp_375 <=u rcx_405 l0000000000405FE4
// DataOut: fs rax rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:0x00000000FFFFFFFF r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405FA6:
	word64 rsi_425 = Mem0[0x000000000061B028:word64]
	word64 rcx_428 = rcx_405 * 0x0000000000000008 + 0x00000008
	word64 rdx_430 = rsi_425 + rcx_405 * 0x0000000000000018 + 0x0000000000000010
	word64 rsi_433 = rsi_425 + rbp_375 * 0x0000000000000018
// DataOut: fs rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405FD0:
	Mem437[rdx_430 + 0x0000000000000000:word64] = rax_401
	rdx_430 = rdx_430 + 0x0000000000000018
	rax_401 = rax_401 + rcx_428
	rcx_428 = rcx_428 + 0x0000000000000008
	branch rdx_430 != rsi_433 l0000000000405FD0
// DataOut: fs rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405FE4:
	Mem422[0x000000000061A660:word64] = rbp_375
	rax_310 = 0x0000000000000000
	r8_304 = Mem422[0x000000000061B1B0:word64]
	*r8Out = r8_304
	rsi_305 = Mem422[0x000000000061B028:word64]
	*rsiOut = rsi_305
	branch rbx_117 != 0x0000000000000000 l00000000004060E0
// DataOut: fs r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060E0:
	word64 rcx_316 = Mem0[rsi_305 + 0x0000000000000010:word64]
	Mem318[rsi_305:byte] = 0x01
	word64 rdi_314 = rax_310 + 0x0000000000000001
	Mem320[rsi_305 + 0x0000000000000008:word64] = rdi_314 * 0x0000000000000003
	word64 rdx_321 = 0x0000000000000000
// DataOut: fs r8 rax rbx rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060F8:
	Mem327[rcx_316 + rdx_321 * 0x0000000000000008:word64] = 0x0000000000000003
	rdx_321 = rdx_321 + 0x0000000000000001
	branch rdx_321 <=u rax_310 l00000000004060F8
// DataOut: fs r8 rax rbx rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406109:
	rsi_305 = rsi_305 + 0x0000000000000018
	*rsiOut = rsi_305
	branch rdi_314 == rbx_117 l0000000000406004
// DataOut: fs r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406116:
	rax_310 = rdi_314
// DataOut: fs r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406004:
	word64 rbp_173 = 0x0000000000000000
	branch r8_304 == 0x0000000000000000 l000000000040612D
// DataOut: fs r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040600F:
// DataOut: fs rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406010:
	word64 rsi_177
	word64 r8_178
	byte r12b_179
	word64 r13_180
	word64 r14_181
	word64 r15_182
	word64 rax_183 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + rbp_173 * 0x0000000000000008:word64], fs, out rsi_177, out r8_178, out r12b_179, out r13_180, out r14_181, out r15_182)
	word64 r14_188 = Mem0[0x000000000061B1B0:word64]
	branch rbx_117 == 0x0000000000000000 l0000000000406120
// DataOut: fs r11 r12b r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406033:
	word64 r13_211 = Mem0[0x000000000061B0C8:word64]
	word64 rsi_212 = Mem0[0x000000000061B028:word64]
	word64 rcx_213 = 0x0000000000000001
// DataOut: fs r11 r12b r13 r14 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060A7:
	word64 r9_232 = rcx_489 - 0x0000000000000001
	branch Mem0[rsi_212:byte] == 0x00 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060B3:
	word64 r10_255
	branch r12b_179 != 0x00 l0000000000406050
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406050:
	r10_255 = (uint64) ((uint128) (uint64) rbp_173 /u (uint64) ((uint128) ((uint64) ((r14_188 - 0x0000000000000001) + rcx_489)) /u rcx_489))
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060B8:
	r10_255 = (uint64) ((uint128) (uint64) rbp_173 % rcx_489)
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040606A:
	word64 rax_264 = Mem0[rsi_212 + 0x0000000000000010:word64] + r10_255 * 0x0000000000000008
	word64 rdx_261 = rax_183 + (uint64) (r9_232 != r10_255) * 0x0000000000000002
	word64 r9_268 = Mem0[rax_264:word64]
	branch rdx_261 <=u r9_268 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rax rbp rbx rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406086:
	Mem274[rsi_212 + 0x0000000000000008:word64] = Mem0[rsi_212 + 0x0000000000000008:word64] + (rdx_261 - r9_268)
	Mem275[rax_264:word64] = rdx_261
	Mem278[rsi_212:byte] = Mem275[rsi_212 + 0x0000000000000008:word64] <u r13_211
// DataOut: fs r11 r12b r13 r14 r8 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> al:<invalid> edi:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040609A:
	word64 r8_235
	*r8Out = rcx_489
	rsi_212 = rsi_212 + 0x0000000000000018
	*rsiOut = rsi_212
	rcx_213 = rcx_489 + 0x0000000000000001
	word64 rcx_489 = rcx_213
	branch rbx_117 <=u rcx_489 l0000000000406120
// DataOut: fs r11 r12b r13 r14 r8 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406120:
	rbp_173 = rbp_173 + 0x0000000000000001
	branch rbp_173 <u r14_188 l0000000000406010
// DataOut: fs r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040612D:
	branch rbx_117 <=u 0x0000000000000001 l0000000000406164
// DataOut: fs r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406133:
	word64 rdx_132 = Mem0[0x000000000061B028:word64]
	word64 rax_134 = rbx_117 * 0x0000000000000003
	branch Mem0[rdx_132 - 0x0000000000000018 + (rax_134 << 0x0000000000000003):byte] != 0x00 l0000000000406164
// DataOut: fs r8 rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406149:
	word64 rax_141 = (rax_134 << 0x0000000000000003) + rdx_132
// DataOut: fs r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040615A:
	rbx_117 = rbx_117 - 0x0000000000000001
	branch rbx_117 != 0x0000000000000001 l0000000000406150
// DataOut: fs r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406150:
	rax_141 = rax_141 - 0x0000000000000018
	branch Mem0[rax_141 - 0x0000000000000018:byte] != 0x00 l0000000000406164
// DataOut: fs r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406164:
	return rbx_117
// DataOut: fs r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

fn0000000000405ED0_exit:
// DataOut: r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> rax:<invalid> r12:r12 rbx:rbx r8:<invalid> rsi:<invalid> rbp:rbp r13:r13 r14:r14 rdi:<invalid> edx:<invalid> r11:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edi:<invalid> al:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14



word64 fn00000000004061B0(word64 rsi, word32 edi, selector fs, ptr64 & rsiOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs rsi
// LiveOut: eax r8 rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn00000000004061B0_entry:
	rsp = fp
// DataOut: edi fs r12 r14 r15d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(0)

l00000000004061B0:
	rsp = fp - 8
	qwLoc08 = rbp
	rbp = (uint64) edi
	ebp = (word32) rbp (alias)
	rsp = fp - 16
	qwLoc10 = rbx
	rsp = fp - 0x0000000000000038
	rax = Mem0[fs:0x00000028:word64]
	qwLoc20 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	Z = (bool) SCZO (alias)
	branch Test(EQ,Z) l0000000000406248
// DataOut: ebp edi fs r12 r14 r15d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64) Local -0040(0)

l0000000000406248:
	rax = fn000000000040C9B0(rsi, edi)
	SZO = cond(rax & rax)
	Z = (bool) SZO (alias)
	C = false
	rdi = rax
	edi = (word32) rdi (alias)
	branch Test(EQ,Z) l00000000004061D1
// DataOut: ebp fs r12 r14 r15d r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -0040(0)

l0000000000406259:
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	eax = fn000000000040D420(esi, rdi, fs, out rsi)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000406267
// DataOut: eax edx fs r12 r14 r15d r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406264_1:
	edx = eax
// DataOut: edx fs r12 r14 r15d r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406267:
// DataOut: edx fs r12 r14 r15d r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> rcx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004061D1:
	r8 = (uint64) ebp
	rcx = 0x000000000041375A
	rdx = 0x0000000000000015
	rsi = 0x0000000000000001
	rdi = fp - 0x0000000000000038
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(fp - 0x0000000000000038, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A, tLoc40)
	rbx = fp - 0x0000000000000038
	rax = fp - 0x0000000000000038
// DataOut: ebx fs r12 r14 r15d r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004061F3:
	rcx = (uint64) Mem0[rax:word32]
	rax = rax + 0x0000000000000004
	edx = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rdx = (uint64) (edx & ecx)
	rdx = (uint64) (edx & 0x80808080)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00000000004061F3
// DataOut: dl eax ebx edx fs r12 r14 r15d r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040620B:
	rcx = (uint64) edx
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(edx & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000406219
// DataOut: cl dl eax ebx fs r12 r14 r15d r8 rax
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406216_1:
	edx = ecx
// DataOut: dl eax ebx fs r12 r14 r15d r8 rax
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406219:
	rcx = rax + 0x0000000000000002
	branch Test(NE,Z) l0000000000406221
// DataOut: dl eax ebx ecx fs r12 r14 r15d r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040621D_1:
	rax = rcx
// DataOut: dl eax ebx fs r12 r14 r15d r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406221:
	dl = dl + dl
	SCZO = cond(dl)
	rax = rax - 0x03 - C
	rdx = (uint64) eax
	rdx = (uint64) (edx - ebx)
	SCZO = cond(edx)
// DataOut: edx fs r12 r14 r15d r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040622B:
	rsi = qwLoc20
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	rax = (uint64) edx
	branch Test(NE,Z) l0000000000406269
// DataOut: eax fs r12 r14 r15d r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:fp - 0x0000000000000038 dl:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000406269:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:fp - 0x0000000000000038 dl:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040623D:
	rsp = fp - 0x0000000000000010
	SCZO = cond(fp - 0x0000000000000010)
	rbx = qwLoc10
	rsp = fp - 0x0000000000000008
	rbp = qwLoc08
	rsp = fp
	return rax
// DataOut: eax fs r12 r14 r15d r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:fp - 0x0000000000000038 dl:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

fn00000000004061B0_exit:
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
// DataOut: eax r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbx:rbx eax:<invalid> r8:(uint64) ebp rcx:<invalid> dl:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp



void fn0000000000406400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406400_entry:
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406400:
	branch Mem0[0x000000000061A408:word64] == 0x0000000000000000 l0000000000406418
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406418:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A410)
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406439_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 eax:<invalid>

l000000000040640A:
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040640F_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A400)
	return
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A400

fn0000000000406400_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 eax:<invalid>



word64 fn0000000000406440(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406440_entry:
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406440:
	branch Mem0[0x000000000061B128:byte] == 0x00 l0000000000406470
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406470:
	Mem18[0x000000000061B128:byte] = 0x01
	fn0000000000406400()
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018

l000000000040644D:
	word64 rsi_10 = Mem0[rdi:word64]
	fwrite_unlocked(Mem0[rdi + 0x0000000000000008:word64], rsi_10, 0x0000000000000001, Mem0[0x000000000061A610:word64])
	return rsi_10
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdi:rdi rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 eax:<invalid> -16(fp):rdi

fn0000000000406440_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 rdi:<invalid> eax:<invalid> -16(fp):rdi



word64 fn0000000000406490()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000406490_entry:
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406490:
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004064EF:
	branch (word32) (uint64) Mem0[0x000000000061B038:word32] != 0x00000000 l0000000000406503
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF78 rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064F9:
	branch (word32) (uint64) Mem0[0x000000000061B034:word32] == 0x00000000 l0000000000406538
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF78 rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000406538:
	return rsi
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF78 rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -8(fp):rbx

fn0000000000406490_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF78 rcx:<invalid> rdx:<invalid> eax:<invalid> -8(fp):rbx

l0000000000406503:
	branch Mem0[0x000000000061B128:byte] == 0x00 l00000000004064A0
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF78 rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l000000000040650C:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF78 rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064A0:
	fflush_unlocked(Mem0[0x000000000061A610:word64])
	sigprocmask(0x0000000000000000, 0x000000000061B040, fp + 0xFFFFFFFFFFFFFF78)
	word32 ebx_40 = (word32) (uint64) Mem0[0x000000000061B038:word32]
	word32 eax_42 = (word32) (uint64) Mem0[0x000000000061B034:word32]
	branch eax_42 == 0x00000000 l0000000000406528
// DataOut: eax ebx fs r12 r13 r14 r14b r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000406528:
	signal((uint64) ebx_40, 0x0000000000000000)
// DataOut: ebx fs r12 r13 r14 r14b r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:0x000000000061B040 rcx:<invalid> rdx:fp + 0xFFFFFFFFFFFFFF78 eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064CB:
	Mem65[0x000000000061B034:word32] = (word32) (uint64) (eax_42 - 0x00000001)
	ebx_40 = 0x00000013 (alias)
// DataOut: ebx fs r12 r13 r14 r14b r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:0x000000000061B040 rcx:<invalid> rdx:fp + 0xFFFFFFFFFFFFFF78 eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064D9:
	raise((uint64) ebx_40)
	sigprocmask(0x0000000000000002, fp + 0xFFFFFFFFFFFFFF78, 0x0000000000000000)
	rsi = fp + 0xFFFFFFFFFFFFFF78
// DataOut: fs r12 r13 r14 r14b r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:fp + 0xFFFFFFFFFFFFFF78 eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)



word64 fn0000000000406540(word64 rdx, byte sil, word64 rdi, selector fs, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs rdi rdx sil
// LiveOut: r8 rsi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rax rbp rbx rsp
fn0000000000406540_entry:
// DataOut: fs rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406540:
	byte r15b_303
	word32 r15d_302
	word32 edx_284
	byte r14b_307
	word32 r14d_305
	word64 rbp_247
	word64 rdx_33 = Mem0[rdi:word64]
	word64 r12_248 = Mem0[rdi + 0x0000000000000008:word64]
	branch sil == 0x00 l00000000004069BD
// DataOut: fs r12 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004069BD:
	branch Mem0[0x000000000061B129:byte] != 0x00 l00000000004069D8
// DataOut: fs rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069D8:
	word32 r14d_698
	branch Mem0[0x000000000061B198:byte] == 0x00 l0000000000406A08
// DataOut: fs rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406A08:
	r14d_698 = (word32) Mem0[rdi + 0x00000000000000B1:byte]
// DataOut: fs r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069E1:
	branch Mem0[rdi + 0x00000000000000B1:byte] == 0x00 l0000000000406A20
// DataOut: fs rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406A20:
	r14d_698 = 0x00000000 (alias)
// DataOut: fs r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406A10:
	word64 r15_716 = (uint64) Mem0[rdi + 0x0000000000000028:word32]
	r15d_302 = (word32) r15_716 (alias)
	r15b_303 = (byte) r15_716 (alias)
// DataOut: fs r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069EA:
	word64 r15_721 = (uint64) Mem0[rdi + 0x00000000000000A4:word32]
	r15d_302 = (word32) r15_721 (alias)
	r15b_303 = (byte) r15_721 (alias)
	r14d_698 = 0x00000001 (alias)
// DataOut: fs r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069F7:
	word64 r14_702 = (uint64) (r14d_698 ^ 0x00000001)
	r14d_305 = (word32) r14_702 (alias)
	r14b_307 = (byte) r14_702 (alias)
	r12_248 = rdx_33
// DataOut: fs r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r14d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069C6:
	r12_248 = rdx_33
// DataOut: fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406567:
	branch Mem0[0x000000000061B129:byte] != 0x00 l0000000000406580
// DataOut: fs r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406580:
	r14d_305 = (word32) Mem0[rdi + 0x00000000000000B1:byte]
	word64 r15_668 = (uint64) Mem0[rdi + 0x00000000000000A4:word32]
	r14b_307 = (byte) r14d_305 (alias)
	r15d_302 = (word32) r15_668 (alias)
	r15b_303 = (byte) r15_668 (alias)
	branch r14b_307 != 0x00 l00000000004065B0
// DataOut: fs r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406594:
	word64 rsi_676
	eax = fn0000000000404CD0(0x0000000C, out rsi_676)
	edx_284 = 0x0000000C (alias)
	branch (byte) eax != 0x00 l00000000004066B0
// DataOut: edx fs r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065AB:
// DataOut: fs r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000C r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065B0:
	word64 rax_332
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l0000000000406628
// DataOut: fs r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406628:
	rax_332 = (uint64) ((word32) (uint64) r15d_302 & 0x0000F000)
	word32 eax_452 = (word32) rax_332
	branch eax_452 == 0x00008000 l0000000000406868
// DataOut: eax fs r12 r14b r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406868:
	branch (r15d_302 & 0x00000800) == 0x00000000 l00000000004068B8
// DataOut: fs r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406871:
	word64 rsi_642
	branch (byte) fn0000000000404CD0(0x00000010, out rsi_642) == 0x00 l00000000004068B8
// DataOut: fs r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068B8:
	branch (r15d_302 & 0x00000400) == 0x00000000 l000000000040693B
// DataOut: fs r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068C1:
	word64 rsi_630
	branch (byte) fn0000000000404CD0(0x00000011, out rsi_630) == 0x00 l000000000040693B
// DataOut: fs r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040693B:
	word64 rsi_576
	branch (byte) fn0000000000404CD0(0x00000015, out rsi_576) == 0x00 l000000000040695C
// DataOut: fs r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406949:
	branch Mem0[rdi + 0x00000000000000B8:byte] == 0x00 l000000000040695C
// DataOut: fs r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040695C:
	branch (word32) (uint64) (r15d_302 & 0x00000049) == 0x00000000 l000000000040697A
// DataOut: fs r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406962:
	word64 rsi_612
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_612) == 0x00 l000000000040697A
// DataOut: fs r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040697A:
	branch Mem0[rdi + 0x0000000000000020:word64] <=u 0x0000000000000001 l00000000004065CF
// DataOut: fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406985:
	word64 rsi_600
	branch (byte) fn0000000000404CD0(0x00000016, out rsi_600) == 0x00 l00000000004065CF
// DataOut: fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406997:
	edx_284 = 0x00000016 (alias)
// DataOut: edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406970:
	edx_284 = 0x0000000E (alias)
// DataOut: edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406952:
	edx_284 = 0x00000015 (alias)
// DataOut: edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068CF:
	edx_284 = 0x00000011 (alias)
// DataOut: edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040687F:
	edx_284 = 0x00000010 (alias)
// DataOut: edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040663B:
	branch eax_452 == 0x00004000 l00000000004068E0
// DataOut: eax fs r12 r14b r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068E0:
	branch (word32) (uint64) ((word32) (uint64) r15d_302 & 0x00000202) == 0x00000202 l00000000004069A1
// DataOut: fs r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069A1:
	edx_284 = 0x00000014 (alias)
	word64 rsi_553
	branch (byte) fn0000000000404CD0(0x00000014, out rsi_553) != 0x00 l00000000004066B0
// DataOut: edx fs r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069B8:
// DataOut: fs r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000014 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068F3:
	branch (r15b_303 & 0x02) == 0x00 l0000000000406910
// DataOut: fs r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068F9:
	edx_284 = 0x00000013 (alias)
	word64 rsi_541
	branch (byte) fn0000000000404CD0(0x00000013, out rsi_541) != 0x00 l00000000004066B0
// DataOut: edx fs r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406910:
	edx_284 = 0x00000006 (alias)
	branch (word32) (uint64) (r15d_302 & 0x00000200) == 0x00000000 l00000000004066B0
// DataOut: edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406922:
	word64 rsi_525
	edx_284 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((byte) fn0000000000404CD0(0x00000012, out rsi_525) - 0x01)) & 0xFFFFFFF4) + 0x00000012) (alias)
// DataOut: edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000006 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406646:
	branch eax_452 == 0x0000A000 l0000000000406859
// DataOut: eax fs r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406859:
	edx_284 = 0x00000007 (alias)
// DataOut: edx fs r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406651:
	edx_284 = 0x00000008 (alias)
	branch eax_452 == 0x00001000 l00000000004066B0
// DataOut: eax edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040665D:
	edx_284 = 0x00000009 (alias)
	branch eax_452 == 0x0000C000 l00000000004066B0
// DataOut: eax edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000008 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406666:
	edx_284 = 0x0000000A (alias)
	branch eax_452 == 0x00006000 l00000000004066B0
// DataOut: eax edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x09 rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040666F:
	word64 rdx_482 = (uint64) (eax_452 != 0x00002000)
	edx_284 = rdx_482 + 0x000000000000000B + rdx_482
// DataOut: edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x0A rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065B9:
	rax_332 = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	edx_284 = (word32) (uint64) Mem0[rax_332 * 0x0000000000000004 + 0x00412C60:word32] (alias)
	branch edx_284 != 0x00000005 l0000000000406680
// DataOut: edx fs r12 r14b r14d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406680:
	r14b_307 = (byte) (uint64) (r14d_305 & DPB(eax, edx_284 == 0x00000007, 0)) (alias)
// DataOut: edx fs r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406689:
	branch r14b_307 == 0x00 l00000000004066B0
// DataOut: edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040668E:
	edx_284 = 0x0000000D (alias)
	branch Mem0[0x000000000061B198:byte] != 0x00 l00000000004066B0
// DataOut: edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040669C:
	word64 rsi_417
	edx_284 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((byte) fn0000000000404CD0(0x0000000D, out rsi_417) - 0x01)) & 0xFFFFFFFA) + 0x0000000D) (alias)
// DataOut: edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000D r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065CF:
	word64 rax_335 = DPB(rax_332, strlen(r12_248), 0)
	word64 rbp_336 = Mem0[0x000000000061B120:word64]
	word64 r15_341 = r12_248 + rax_335
	branch rbp_336 == 0x0000000000000000 l0000000000406619
// DataOut: fs r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065EA:
// DataOut: fs r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065F0:
	word64 rdx_367 = Mem0[rbp_336:word64]
	branch rax_335 <u rdx_367 l0000000000406610
// DataOut: fs r12 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065F9:
	branch strncmp(r15_341 - rdx_367, Mem0[rbp_336 + 0x0000000000000008:word64], rdx_367) == 0x00000000 l00000000004068A0
// DataOut: fs r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068A0:
	branch rbp_336 == 0x0000000000000000 l0000000000406619
// DataOut: fs r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068A9:
	rbp_247 = rbp_336 + 0x0000000000000010
// DataOut: fs r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406610:
	rbp_336 = Mem0[rbp_336 + 0x0000000000000020:word64]
	branch rbp_336 != 0x0000000000000000 l00000000004065F0
// DataOut: fs r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406619:
	edx_284 = 0x00000005 (alias)
// DataOut: edx fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066B0:
	rbp_247 = ((uint64) edx_284 << 0x0000000000000004) + 6398944
// DataOut: fs r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066C0:
	branch Mem0[rbp_247 + 0x0000000000000008:word64] == 0x0000000000000000 l0000000000406890
// DataOut: edi fs r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406890:
	word64 rsi_272
	fn0000000000404CD0(0x00000004, out rsi_272)
// DataOut: fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066D0:
	word64 rsi_255
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_255) != 0x00 l0000000000406840
// DataOut: fs r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406840:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: fs r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066DD:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(rbp_247)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406570:
// DataOut: fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066FF:
	word64 rbp_157
	byte r14b_148
	branch rdx == 0x0000000000000000 l00000000004067D8
// DataOut: fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004067D8:
	word64 rsi_220
	word64 r8_221
	byte r12b_222
	word64 rax_224 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], r12_248, fs, out rsi_220, out r8_221, out r12b_222, out r14b_148)
	Mem228[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + rax_224
	rbp_157 = rax_224
// DataOut: fs r13 r14b r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406708:
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406732
// DataOut: fs r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406711:
	word64 rax_189 = Mem0[rdx + 0x0000000000000018:word64]
	branch Mem0[rdx + 0x0000000000000020:word64] <u rax_189 + 0x0000000000000008 l0000000000406820
// DataOut: fs r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406820:
	_obstack_newchunk(rdx, 0x0000000000000008)
	rax_189 = Mem0[rdx + 0x0000000000000018:word64]
// DataOut: fs r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406723:
	Mem203[rax_189:word64] = Mem0[0x000000000061B018:word64]
	Mem205[rdx + 0x0000000000000018:word64] = Mem203[rdx + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r12
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406732:
	word64 rsi_145
	word64 r8_146
	byte r12b_147
	word64 rax_149 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], r12_248, fs, out rsi_145, out r8_146, out r12b_147, out r14b_148)
	word64 rdx_151 = rax_149 + Mem0[0x000000000061B018:word64]
	Mem159[0x000000000061B018:word64] = rdx_151
	rbp_157 = rax_149
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406781
// DataOut: fs r13 r14b r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406767:
	word64 rax_160 = Mem159[rdx + 0x0000000000000018:word64]
	branch Mem159[rdx + 0x0000000000000020:word64] <u rax_160 + 0x0000000000000008 l0000000000406800
// DataOut: fs r13 r14b r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406800:
	_obstack_newchunk(rdx, 0x0000000000000008)
	rax_160 = Mem159[rdx + 0x0000000000000018:word64]
	rdx_151 = Mem159[0x000000000061B018:word64]
// DataOut: fs r13 r14b r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406779:
	Mem176[rax_160:word64] = rdx_151
	Mem178[rdx + 0x0000000000000018:word64] = Mem176[rdx + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r13 r14b r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406781:
	word64 rsi_119 = fn0000000000406490()
	branch r14b_148 != 0x00 l00000000004067A0
// DataOut: fs r13 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004067A0:
	fn0000000000406400()
	word64 rcx_111 = Mem0[0x000000000061B0C8:word64]
	word64 rax_117 = (uint64) ((uint128) (uint64) rcx /u rcx_111)
	rsi_119 = rax_117
	branch rax_117 == (uint64) ((uint128) ((uint64) ((rbp_157 - 0x0000000000000001) + rcx)) /u rcx_111) l000000000040678B
// DataOut: fs r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004067C6:
	rsi_119 = fn0000000000406440(0x000000000061A550)
// DataOut: fs r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040678B:
	return rsi_119
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000406540_exit:
// DataOut: r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 rbp:rbp rbx:rbx rdx:<invalid> r12:r12 r14:r14 rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r15:r15 eax:<invalid> r8:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000406A30()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406A30_entry:
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A30:
	branch Mem0[0x000000000061B129:byte] == 0x00 l0000000000406A4F
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A39:
	word64 rsi_36
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_36) != 0x00 l0000000000406A58
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406A58:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A420)
// DataOut: fs r13 r15 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A75_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 eax:<invalid> rax:<invalid> al:<invalid>

l0000000000406A4B:
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A4F:
	return
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

fn0000000000406A30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> rax:<invalid> al:<invalid>



word64 fn0000000000406A80(word32 ecx, word64 rdx, word64 rsi, word64 rdi, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx fs rdi rdx rsi
// LiveOut: rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 rbp rbx rsp
fn0000000000406A80_entry:
// DataOut: ecx fs rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A80:
	word64 rbx_25 = rsi
	branch Mem0[0x000000000061A748:word64] == 0x0000000000000000 l0000000000406ADB
// DataOut: fs r12 r13d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406AB8:
	word64 rax_69 = strstr(rsi, 0x0000000000413766)
	branch rax_69 == 0x0000000000000000 l0000000000406ADB
// DataOut: fs r12 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 312 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406ACD:
	branch DPB(rax_69, strlen(rsi), 0) <=u 0x0000000000000065 l0000000000406B20
// DataOut: fs r12 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 312 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406B20:
	word64 rax_85 = __mempcpy_chk(fp - 312, rsi, rax_69 - rsi, 0x0000000000000105)
	word64 rcx_86 = (int64) Mem0[rdx + 0x0000000000000010:word32]
	strcpy(stpcpy(rax_85, rcx_86 + 0x000000000061A760 + rcx_86 * 0x00000000000000A0), rax_69 + 0x0000000000000002)
	rbx_25 = fp - 312
// DataOut: fs r12 r13d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 312 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> eax:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406ADB:
	word64 rax_48 = fn0000000000410600(rdx, rbx_25, 0x00000000000003E9, rdi, 0x00000000, fs)
	branch (Mem0[fp - 0x0000000000000030:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000406B66
// DataOut: fs rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 312 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406B66:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ax:<invalid> r15:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406B07:
	return rax_48
// DataOut: fs rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ax:<invalid> r15:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

fn0000000000406A80_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbp:rbp rbx:rbx rax:<invalid> rsi:<invalid> rdi:<invalid> r14:r14 r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ax:<invalid> r15:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14



word64 fn0000000000406B70(word64 rdi, selector fs, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs rdi
// LiveOut: r8 rsi
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000406B70_entry:
	rsp = fp
// DataOut: fs rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406B70:
	rsp = fp - 8
	qwLoc08 = r15
	rsp = fp - 16
	qwLoc10 = r14
	rsp = fp - 24
	qwLoc18 = r13
	rsp = fp - 32
	qwLoc20 = r12
	rsp = fp - 40
	qwLoc28 = rbp
	rsp = fp - 48
	qwLoc30 = rbx
	rbx = rdi
	rsp = fp - 4840
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[rdi + 0x00000000000000B0:byte] - 0x00)
	Z = (bool) SCZO (alias)
	branch Test(EQ,Z) l0000000000406E00
// DataOut: fs rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E00:
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	Z = (bool) SCZO (alias)
	r13 = fp - 0x00000000000012A8
	rcx = 0x0000000000003F3F
	cx = (word16) rcx (alias)
	eax = (word32) Mem0[rax + 0x0000000000413728:byte]
	al = (byte) eax (alias)
	bLoc12A8 = al
	rax = 0x000000003F3F3F3F
	qwLoc12A7 = 0x000000003F3F3F3F
	wLoc129F = cx
	bLoc129D = 0x00
	branch Test(EQ,Z) l0000000000406BC2
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406BA4:
	r13 = fp - 0x00000000000012A8
	rdi = rdi + 0x0000000000000010
	rsi = fp - 0x00000000000012A8
	fn000000000040A600(rsi, rdi)
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	Z = (bool) SCZO (alias)
	branch Test(NE,Z) l0000000000406E41
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E41:
	rax = (uint64) Mem0[rbx + 0x00000000000000B4:word32]
	SCZO = cond(eax - 0x00000001)
	Z = (bool) SCZO (alias)
	branch Test(EQ,Z) l0000000000407138
// DataOut: eax fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:0x3F3F3F3F rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407138:
	bLoc129E = 0x2E
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E50:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406BC7
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E59:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	bLoc129E = 0x2B
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000406BD6
// DataOut: eax fs rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E6D:
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):0x2B -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406BC2:
	bLoc129E = 0x00
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:0x3F3F3F3F rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406BC7:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000406E70
// DataOut: eax fs rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E70:
	rax = Mem0[rbx + 0x0000000000000080:word64]
	rdx = Mem0[rbx + 0x0000000000000078:word64]
	qwLoc12B0 = rax
	qwLoc12B8 = rdx
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406BD6:
	branch Test(ULT,C) l0000000000407040
// DataOut: eax fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407040:
	rax = Mem0[rbx + 0x0000000000000070:word64]
	rdx = Mem0[rbx + 0x0000000000000068:word64]
	qwLoc12B0 = rax
	qwLoc12B8 = rdx
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406BDC:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406E90
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E90:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406BE5:
	rax = Mem0[rbx + 0x0000000000000060:word64]
	rdx = Mem0[rbx + 0x0000000000000058:word64]
	qwLoc12B0 = rax
	qwLoc12B8 = rdx
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406BF7:
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	r12 = fp - 0x0000000000000E88
	rbp = fp - 0x0000000000000E88
	branch Test(NE,Z) l0000000000407060
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407060:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	r9 = 0x0000000000413764
	branch Test(EQ,Z) l0000000000407085
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l000000000040706F:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407085
// DataOut: dil fs rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:0x0000000000413764 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407078:
	rsi = fp - 0x0000000000001278
	rax = fn000000000040CD70(rsi, rdi)
	r9 = rax
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:0x0000000000413764 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407085:
	r12 = fp - 0x0000000000000E88
	r8 = (uint64) Mem0[0x000000000061B178:word32]
	rdx = 0x0000000000000E3B
	rcx = 0x0000000000413779
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = fp - 0x0000000000000E88
	eax = __sprintf_chk(fp - 0x0000000000000E88, 0x0000000000000001, 0x0000000000000E3B, 0x0000000000413779, tLoc12F0)
	rdx = fp - 0x0000000000000E88
// DataOut: fs rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l00000000004070B0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004070B0
// DataOut: al eax fs rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l00000000004070C7:
	rcx = (uint64) eax
	rbp = rdx + 0x0000000000000002
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l00000000004070D8
// DataOut: al cl fs rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l00000000004070D5_1:
	eax = ecx
// DataOut: al fs rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l00000000004070D8:
	branch Test(EQ,Z) l00000000004070DC
// DataOut: al fs rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l00000000004070D8_1:
	rbp = rdx
// DataOut: al fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l00000000004070DC:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 0x03 - C
	SCZO = cond(rbp)
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C0F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406C8F
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C18:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	r14 = 0x0000000000413764
	branch Test(NE,Z) l0000000000407288
// DataOut: fs r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407288:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = fp - 0x0000000000001278
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	rcx = 0x0000000000000200
	rax = fn000000000040BD70(rcx, edx, rsi, rdi, r8, fs, out r8, out r15d)
	r14 = rax
// DataOut: fs r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:0x0000000000413764 r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C2B:
	r15 = (uint64) Mem0[0x000000000061B174:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	eax = fn000000000040D420(esi, rdi, fs, out rsi)
	r15 = (uint64) (r15d - eax)
	SZO = cond(r15d & r15d)
	C = false
	rax = (uint64) r15d
	branch Test(LE,SZO) l0000000000406F50
// DataOut: eax fs r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r8:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C4B:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r14 rbp rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C60:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406C60
// DataOut: al fs r14 rbp rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):0x20 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C6D:
	ax = (int16) al
	rdx = rbp + 0x0000000000000001 + rax
// DataOut: fs r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):0x20 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C74:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[r14 - 0x0000000000000001:byte]
	rbp = rdx + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(NE,Z) l0000000000406F50
// DataOut: fs r14 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406F50:
	rdx = rbp
// DataOut: fs r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C8C:
	Mem0[rdx:byte] = 0x20
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C8F:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = 0x0000000000413764
	branch Test(NE,Z) l0000000000407120
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> r9:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407120:
	rdi = Mem0[rbx + 0x0000000000000020:word64]
	rsi = fp - 0x0000000000001278
	rax = fn000000000040CD70(rsi, rdi)
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:0x0000000000413764 r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:0x3764 r9:<invalid> al:0x64 edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406CA1:
	r9 = (uint64) Mem0[0x000000000061B170:word32]
	rdi = rbp
	qwLoc12E8 = rax
	r8 = fp - 0x00000000000012A8
	rcx = 0x0000000000413769
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413769, tLoc12F0)
	rdi = rbp
	eax = strlen(rdi)
	rbp = rbp + rax
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l00000000004070F0
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:0x3764 r9:<invalid> al:0x64 edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070F0:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000002
	rsi = 0x0000000000000001
	rdi = 0x0000000000413771
	eax = fwrite_unlocked(0x0000000000413771, 0x0000000000000001, 0x0000000000000002, rcx)
	v35 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v35
	SCZO = cond(v35)
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:0x0000000000413769 eax:<invalid> rdx:0xFFFFFFFFFFFFFFFF r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:0xFFFFFFFF r11:<invalid> r10:<invalid> cl:0x69 ah:<invalid> r15d:<invalid> ecx:0x00413769 r14d:<invalid> dl:0xFF sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406CE2:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406CEB:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406CF4:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407148
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407148:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407155:
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D01:
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D08:
	rsi = Mem0[0x000000000061A610:word64]
	rdi = fp - 0x0000000000000E88
	rbp = rbp - (fp - 0x0000000000000E88)
	eax = fputs_unlocked(fp - 0x0000000000000E88, rsi)
	v33 = Mem0[0x000000000061B018:word64] + rbp
	Mem0[0x000000000061B018:word64] = v33
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000407248
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407248:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rsi = (uint64) Mem0[0x000000000061B168:word32]
	fn00000000004057B0(dl, rsi, edi, fs)
	rsp = fp - 0x00000000000012F0
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 4840 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D2E:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000407210
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407210:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = (uint64) Mem0[rbx + 0x0000000000000030:word32]
	rdi = 0x0000000000413764
	rdx = (uint64) Mem0[0x000000000061B164:word32]
	rsi = (uint64) eax
	branch Test(EQ,Z) l0000000000407238
// DataOut: eax edx fs rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407229:
	rdi = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407415
// DataOut: eax edx fs rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:0x0000000000413764 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00413764 -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407415:
	rdi = (uint64) eax
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	Mem0[rsp + 0x0000000000000010:word32] = edx
	rax = fn000000000040CB40(rsi, edi)
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rdi = rax
	rdx = (uint64) Mem0[rsp + 0x0000000000000010:word32]
// DataOut: edx fs rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407238:
	fn0000000000405700(edx, rdi, fs)
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D3B:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l00000000004071D0
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004071D0:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rbp = fp - 0x0000000000000E88
	rsi = (uint64) Mem0[0x000000000061B160:word32]
	fn00000000004057B0(dl, rsi, edi, fs)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D48:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	rbp = fp - 0x0000000000000E88
	branch Test(NE,Z) l00000000004071F5
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004071F5:
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	rdx = (uint64) Mem0[0x000000000061B16C:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	fn0000000000405700(edx, rdi, fs)
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D58:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F60:
	r14 = 0x0000000000413764
// DataOut: fs r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D65:
	rax = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004072B0:
	rax = Mem0[rbx + 0x0000000000000038:word64]
	rsi = rsp + 0x0000000000000070
	r13 = 0x00000000FFFFFFFE
	r13 = (uint64) (r13d - Mem0[0x000000000061B15C:word32])
	r13 = (uint64) (r13d - Mem0[0x000000000061B158:word32])
	rdi = rax
	eax = (word32) al
	r13 = (uint64) (r13d + Mem0[0x000000000061B154:word32])
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi)
	rdx = Mem0[rbx + 0x0000000000000038:word64]
	r15 = rax
	rsi = rsp + 0x0000000000000050
	r14 = (uint64) Mem0[0x000000000061B158:word32]
	rdi = rdx
	rdx = rdx >>u 0x0000000000000008
	rax = (uint64) edx
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi)
	r8 = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	r9 = rax
	branch Test(SG,S) l0000000000407328
// DataOut: fs r13d r14d r15 r8d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407324_1:
	r8d = r13d
// DataOut: fs r14d r15 r8d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x00000000CCCCCCCD rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407328:
	r8 = (uint64) (r8d + Mem0[0x000000000061B15C:word32])
	Mem0[rsp + 0x0000000000000008:word64] = r15
	Mem0[rsp:word32] = r14d
	rcx = 0x0000000000413774
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rdi = rbp
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413774, Mem0[rsp + -8:<unknown>])
	rax = (int64) Mem0[0x000000000061B154:word32]
	r13 = rbp + 0x0000000000000001 + rax
// DataOut: fs r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x00000000CCCCCCCD rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:r13d edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D78:
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rsi, rdi, r8, fs, out r8, out r15d)
	r14 = rax
// DataOut: fs r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D9B:
	r13 = (uint64) Mem0[0x000000000061B154:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	eax = fn000000000040D420(esi, rdi, fs, out rsi)
	r13 = (uint64) (r13d - eax)
	SZO = cond(r13d & r13d)
	C = false
	rax = (uint64) r13d
	branch Test(LE,SZO) l0000000000406DDC
// DataOut: eax fs r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406DB7:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r14 rbp rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:(uint64) r13d r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406DC8:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406DC8
// DataOut: al fs r14 rbp rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406DD5:
	ax = (int16) al
	rbp = rbp + 0x0000000000000001 + rax
// DataOut: fs r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406DDC:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[r14 - 0x0000000000000001:byte]
	r13 = rbp + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[r13 - 0x0000000000000001:byte] = al
	branch Test(EQ,Z) l0000000000406E98
// DataOut: fs r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E98:
	Mem0[rbp + 0x0000000000000000:byte] = 0x20
// DataOut: fs r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E9C:
	rdi = rsp + 0x0000000000000030
	rax = localtime(rdi)
	Mem0[r13 + 0x0000000000000000:byte] = 0x01
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F80
// DataOut: fs r13 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EB8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407364
// DataOut: fs r13 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EC1:
	rdx = Mem0[0x000000000061B180:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdi = Mem0[0x000000000061B188:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(rsi - rdx)
	branch Test(GT,SZO) l0000000000407380
// DataOut: ecx edi fs r13 rax rbx rdx rsi rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EE2:
	branch Test(LT,SO) l0000000000406EEC
// DataOut: ecx edi fs r13 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EE4:
	SCZO = cond(edi - ecx)
	branch Test(SG,S) l0000000000407380
// DataOut: ecx edi fs r13 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407380:
	rdi = 0x000000000061B180
	Mem0[rsp + 0x0000000000000010:word64] = rax
	fn000000000040AB30(rdi)
	rdx = Mem0[0x000000000061B180:word64]
	r8 = Mem0[0x000000000061B188:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	rax = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: ecx fs r13 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EEC:
	r8 = rdi
// DataOut: ecx fs r13 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EEF:
	rdi = rdx + 0xFFFFFFFFFF0F3D54
	SCZO = cond(rdi - rsi)
	branch Test(GE,SO) l0000000000407268
// DataOut: ecx fs r13 r8d rax rbx rdx rsi rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407268:
	rdi = 0x0000000000000000
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r13 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407273:
	SCZO = cond(r8d - ecx)
	branch Test(NS,S) l0000000000406F20
// DataOut: ecx edi fs r13 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040727C:
// DataOut: ecx fs r13 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EFF:
	SCZO = cond(rdx - rsi)
	rdi = 0x0000000000000001
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r13 r8d rax rbx rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F09:
	dil = 0x00
	branch Test(LT,SO) l0000000000406F20
// DataOut: ecx edi fs r13 r8d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:0x0000000000000001 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x01 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000001 -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F0E:
	rdi = (uint64) ecx
	rdi = (uint64) (edi - r8d)
	rdi = (uint64) (edi >>u 0x0000001F)
	SCZO = cond(edi)
// DataOut: ecx edi fs r13 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F20:
	rdi = (int64) edi
	rdx = rax
	rsi = Mem0[0x0061A3D0 + rdi * 0x0000000000000008:word64]
	rdi = r13
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, fs)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000406F6B
// DataOut: fs r13 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F6B:
	SCZO = cond(Mem0[r13 + 0x0000000000000000:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F3B
// DataOut: fs r13 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> ebp:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F72:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000407364
// DataOut: fs r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> ebp:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407364:
	rdi = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rsp + 0x0000000000000050
	rax = fn000000000040CCD0(rsi, rdi)
	r9 = rax
// DataOut: fs r13 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F7F:
// DataOut: fs r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> ebp:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F80:
	r9 = 0x0000000000413764
// DataOut: fs r13 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> r15d:<invalid> r14d:<invalid> ebp:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F86:
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004073B1
// DataOut: fs r13 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004073B1:
	rdi = rsp + 0x0000000000000028
	Mem0[rsp + 0x0000000000000010:word64] = r9
	Mem0[rsp + 0x0000000000000028:word64] = 0x0000000000000000
	rax = localtime(rdi)
	SZO = cond(rax & rax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(EQ,Z) l0000000000407403
// DataOut: fs r13 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004073D3:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdi = rsp + 0x0000000000000070
	rcx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = rax
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, fs)
	SZO = cond(rax & rax)
	C = false
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(NE,Z) l0000000000407436
// DataOut: fs r13 r8d r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407436:
	rdi = rsp + 0x0000000000000070
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rsi = rax
	Mem0[rsp + 0x0000000000000010:word64] = r9
	eax = fn000000000040D240(edx, rsi, rdi, fs, out rsi)
	rsp = rsp + 0x0000000000000008
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[0x000000000061A3C4:word32] = eax
	r8 = (uint64) eax
// DataOut: fs r13 r8d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> ebx:<invalid> r11d:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004073FA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000406F96
// DataOut: fs r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> ebx:<invalid> r11d:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407403:
	Mem0[0x000000000061A3C4:word32] = 0x00000000
	r8 = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: fs r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F96:
	rdi = r13
	rcx = 0x0000000000413779
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413779, Mem0[rsp + -8:<unknown>])
	rdi = r13
	eax = strlen(rdi)
	r13 = r13 + rax
	SCZO = cond(r13)
// DataOut: fs r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F3B:
	rax = rax + r13
	SCZO = cond(rax)
	r13 = rax + 0x0000000000000001
	Mem0[rax:byte] = 0x20
	Mem0[rax + 0x0000000000000001:byte] = 0x00
// DataOut: fs r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> ebp:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406FBC:
	rsi = Mem0[0x000000000061A610:word64]
	r13 = r13 - (fp - 0x0000000000000E88)
	rdi = fp - 0x0000000000000E88
	eax = fputs_unlocked(fp - 0x0000000000000E88, rsi)
	rdx = 0x000000000061AFC0
	rsi = 0x0000000000000000
	rcx = r13
	rdi = rbx
	v39 = Mem0[0x000000000061B018:word64] + r13
	Mem0[0x000000000061B018:word64] = v39
	SCZO = cond(v39)
	rsi = fn0000000000406540(rdx, sil, rdi, fs, out r8)
	rdx = (uint64) Mem0[rbx + 0x00000000000000A0:word32]
	rbp = rax
	SCZO = cond(edx - 0x00000006)
	branch Test(EQ,Z) l0000000000407160
// DataOut: edx fs r13 r8 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407160:
	SCZO = cond(Mem0[rbx + 0x0000000000000008:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r13 r8 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040716B:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000004
	rsi = 0x0000000000000001
	rdi = 0x000000000041377E
	eax = fwrite_unlocked(0x000000000041377E, 0x0000000000000001, 0x0000000000000004, rcx)
	rcx = r13 + 0x0000000000000004 + rbp
	rdx = 0x0000000000000000
	rsi = 0x0000000000000001
	rdi = rbx
	v40 = Mem0[0x000000000061B018:word64] + 0x0000000000000004
	Mem0[0x000000000061B018:word64] = v40
	SCZO = cond(v40)
	rsi = fn0000000000406540(rdx, sil, rdi, fs, out r8)
	rdx = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004071B0:
	rsi = (uint64) Mem0[rbx + 0x00000000000000A4:word32]
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = 0x0000000000000001
	al = fn0000000000405D00(edx, esi, dil, out rsi)
// DataOut: fs r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x7E r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406FF9:
	rax = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: edx fs r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407003:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rsi = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	al = fn0000000000405D00(edx, esi, dil, out rsi)
// DataOut: fs r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407012:
	rax = Mem0[rsp + 0x00000000000012A8:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(NE,Z) l000000000040745A
// DataOut: fs r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040745A:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407029:
	rsp = rsp + 4792
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8
	return rsi
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000406B70_exit:
	use r8 (=> r8Out)
// DataOut: r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> r13:r13 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:r12 rbp:rbp r9:<invalid> r8:<invalid> dil:<invalid> r15:r15 r14:r14 r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406DF5:
	rbp = r13
// DataOut: fs r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> ax:<invalid> r10:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4767(fp):cx -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)



word64 fn0000000000407870(word64 rdi, selector fs, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs rdi
// LiveOut: r12 r15 r8 rsi
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000407870_entry:
	*r12Out = r12
	*r15Out = r15
// DataOut: fs r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -02C0(0)

l0000000000407870:
	word64 rax_15 = Mem0[fs:0x00000028:word64]
	fn0000000000406A30()
	branch Mem0[0x000000000061B114:byte] != 0x00 l0000000000407970
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l0000000000407970:
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000407992
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l000000000040797E:
	word64 rdi_179 = Mem0[rdi + 0x0000000000000018:word64]
	branch rdi_179 == 0x0000000000000000 l0000000000407992
// DataOut: dil fs r13 r15 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l0000000000407987:
	fn000000000040CD70(fp - 696, rdi_179)
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l0000000000407992:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004079A7
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004079A0_1:
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004079A7:
	__printf_chk(0x0000000000000001, 0x0000000000413779, tLoc02C0)
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078A4:
	branch Mem0[0x000000000061B144:byte] == 0x00 l00000000004078E0
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078AD:
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l00000000004079C0
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004079C0:
	word64 r8_154
	word32 r15d_155
	fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], fp - 696, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out r8_154, out r15d_155)
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078BF:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004078D4
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078CD_1:
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 rdi:<invalid> r8:<invalid> edx:<invalid> eax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078D4:
	__printf_chk(0x0000000000000001, 0x0000000000413779, tLoc02C0)
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078E0:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000407911
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078E9:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000407900
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078F9_1:
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l0000000000407900:
	__printf_chk(0x0000000000000001, 0x0000000000413779, tLoc02C0)
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000407911:
	word64 r8_67
	fn0000000000406540(0x0000000000000000, 0x00, rdi, fs, out r8_67)
	branch (word32) (uint64) Mem0[0x000000000061B12C:word32] == 0x00000000 l0000000000407948
// DataOut: fs r12 r13 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:rsi rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040792D:
	word64 rsi_109
	fn0000000000405D00((word32) (uint64) Mem0[rdi + 0x00000000000000A0:word32], (word32) (uint64) Mem0[rdi + 0x0000000000000028:word32], (byte) (word32) Mem0[rdi + 0x00000000000000B0:byte], out rsi_109)
// DataOut: fs r12 r13 r15 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000407948:
	word64 rsi_85 = rax_15 ^ Mem0[fs:0x00000028:word64]
	branch rsi_85 != 0x0000000000000000 l00000000004079E6
// DataOut: fs r12 r13 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> ecx:<invalid> ax:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004079E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> ecx:<invalid> ax:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000407962:
	return rsi_85
// DataOut: fs r12 r13 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 696 rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> ecx:<invalid> ax:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000407870_exit:
// DataOut: r12 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> ecx:<invalid> ax:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp



word64 fn00000000004079F0(word64 rsi, selector fs, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs rsi
// LiveOut: r8 rsi
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn00000000004079F0_entry:
	*r8Out = r8
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F0:
	branch Mem0[0x000000000061B150:word32] >u 0x00000004 l0000000000407A46
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F9:
	switch (Mem0[0x000000000061B150:word32]) { l0000000000407C01 l0000000000407C75 l0000000000407CDA l0000000000407A48 l0000000000407B31 }
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407B31:
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000407A18
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407B3F:
	word64 rsi_597
	word64 r8_598
	byte r12b_599
	word64 r14_601
	word64 r15_602
	word64 r13_600
	fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64]:word64], fs, out rsi_597, out r8_598, out r12b_599, out r13_600, out r14_601, out r15_602)
	word64 rbx_588 = 0x0000000000000000
// DataOut: fs r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407B60:
	rbx_588 = rbx_588 + 0x0000000000000001
	word64 r8_626
	word64 r12_627
	word64 r15_628
	rsi = fn0000000000407870(r13_600, fs, out r8_626, out r12_627, out r15_628)
	branch rbx_588 >=u Mem0[0x000000000061B1B0:word64] l0000000000407A18
// DataOut: fs r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r9:<invalid> dx:<invalid> r14d:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407B7F:
	word64 rsi_637
	word64 r8_638
	byte r12b_639
	word64 r14_641
	word64 r15_642
	word64 rax_643 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_588 * 0x0000000000000008:word64], fs, out rsi_637, out r8_638, out r12b_639, out r13_600, out r14_641, out r15_642)
	branch rbx_588 == 0x0000000000000000 l0000000000407E00
// DataOut: fs r13 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E00:
// DataOut: fs r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407B9B:
	word32 r15d_655
	byte r14b_654
	branch rax_643 >=u Mem0[0x000000000061B0C8:word64] l0000000000407E10
// DataOut: fs r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E10:
	r15d_655 = 0x0000000A (alias)
	r14b_654 = 0x0A (alias)
// DataOut: fs r13 r14b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407BB0:
	r15d_655 = 0x00000020 (alias)
	r14b_654 = 0x20 (alias)
// DataOut: fs r13 r14b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407BBC:
	word64 rdi_661 = Mem0[0x000000000061A610:word64]
	word64 rax_663 = Mem0[rdi_661 + 0x0000000000000028:word64]
	branch rax_663 >=u Mem0[rdi_661 + 0x0000000000000030:word64] l0000000000407E8B
// DataOut: fs r13 r14b r15d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E8B:
	__overflow(rdi_661, 0x000000000000002C)
// DataOut: fs r13 r14b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407BD1:
	Mem683[rdi_661 + 0x0000000000000028:word64] = rax_663 + 0x0000000000000001
	Mem684[rax_663:byte] = 0x2C
// DataOut: fs r13 r14b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407BDC:
	word64 rdi_670 = Mem0[0x000000000061A610:word64]
	word64 rax_672 = Mem0[rdi_670 + 0x0000000000000028:word64]
	branch rax_672 >=u Mem0[rdi_670 + 0x0000000000000030:word64] l0000000000407E7E
// DataOut: fs r13 r14b r15d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E7E:
	__overflow(rdi_670, (uint64) r15d_655)
// DataOut: fs r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407BF1:
	Mem678[rdi_670 + 0x0000000000000028:word64] = rax_672 + 0x0000000000000001
	Mem679[rax_672:byte] = r14b_654
// DataOut: fs r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407A48:
	word64 rsi_467
	word64 r8_468
	fn0000000000405ED0(rsi, 0x00000000, fs, out rsi_467, out r8_468)
	word64 rbx_475 = Mem0[Mem0[0x000000000061B1A8:word64]:word64]
	word64 rsi_477
	word64 r8_478
	byte r12b_479
	word64 r14_481
	word64 r15_482
	word64 r13_480
	word64 rax_483 = fn0000000000405D50(rbx_475, fs, out rsi_477, out r8_478, out r12b_479, out r13_480, out r14_481, out r15_482)
	word64 rbx_490 = 0x0000000000000001
	word64 r8_495
	word64 r12_496
	word64 r15_497
	rsi = fn0000000000407870(rbx_475, fs, out r8_495, out r12_496, out r15_497)
	word64 rcx_502 = rax_483
	branch Mem0[0x000000000061B1B0:word64] >u 0x0000000000000001 l0000000000407B0D
// DataOut: fs r12 r13 r15 r8 rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407B0D:
	word64 rdx_523 = (uint64) ((uint128) (uint64) rbx_490 % r13_480)
	branch rdx_523 == 0x0000000000000000 l0000000000407AB0
// DataOut: fs r12 r15 rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407AB0:
	word64 rdi_567 = Mem0[0x000000000061A610:word64]
	word64 rax_569 = Mem0[rdi_567 + 0x0000000000000028:word64]
	branch rax_569 >=u Mem0[rdi_567 + 0x0000000000000030:word64] l0000000000407E27
// DataOut: fs rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E27:
	__overflow(rdi_567, 0x000000000000000A)
// DataOut: fs rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407AC5:
	Mem578[rdi_567 + 0x0000000000000028:word64] = rax_569 + 0x0000000000000001
	Mem579[rax_569:byte] = 0x0A
// DataOut: fs rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407B1D:
	fn0000000000405200(r12_496 + r15_497, rcx_502 + r15_497)
// DataOut: fs rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407AD3:
	word64 r8_542
	word64 r12_543
	word64 r15_544
	fn0000000000407870(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_490 * 0x0000000000000008:word64], fs, out r8_542, out r12_543, out r15_544)
	word64 r8_549
	byte r12b_550
	word64 r14_552
	rcx_502 = fn0000000000405D50(r12_543, fs, out rsi, out r8_549, out r12b_550, out r13_480, out r14_552, out r15_497)
	rbx_490 = rbx_490 + 0x0000000000000001
	r12_496 = Mem0[Mem0[r14_552 + 0x0000000000000010:word64] + rdx_523 * 0x0000000000000008:word64]
	branch rbx_490 >=u Mem0[0x000000000061B1B0:word64] l0000000000407A18
// DataOut: fs r12 r13 r15 r8 rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407AA1:
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:0x0000000000000001 rsi:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> r11:<invalid> cl:<invalid> esi:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407A18:
	word64 rdi_434 = Mem0[0x000000000061A610:word64]
	word64 rax_436 = Mem0[rdi_434 + 0x0000000000000028:word64]
	branch rax_436 >=u Mem0[rdi_434 + 0x0000000000000030:word64] l0000000000407E39
// DataOut: fs r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r11:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E39:
	__overflow(rdi_434, 0x000000000000000A)
	return 0x000000000000000A
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r11:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407A2D:
	Mem442[rdi_434 + 0x0000000000000028:word64] = rax_436 + 0x0000000000000001
	Mem443[rax_436:byte] = 0x0A
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r11:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407CDA:
	word64 r8_286
	word64 rax_287 = fn0000000000405ED0(rsi, 0x00000001, fs, out rsi, out r8_286)
	word128 rdx_rax_294 = (uint128) (uint64) Mem0[0x000000000061B1B0:word64]
	word64 rdx_296 = (uint64) (rdx_rax_294 % rax_287)
	word64 rdx_303 = DPB(rdx_296, (word32) (rdx_296 != 0x0000000000000000), 0) + (uint64) (rdx_rax_294 /u rax_287)
	branch rdx_303 == 0x0000000000000000 l0000000000407A38
// DataOut: fs r8 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0050(64)

l0000000000407D1A:
	word64 qwLoc40_311 = 0x0000000000000000
// DataOut: fs
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> r8:<invalid> rsi:<invalid> r11:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> dx:<invalid> esi:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407D30:
	word64 rbp_331 = 0x0000000000000000
	word64 rbx_332 = 0x0000000000000000
	word64 r13_336 = qwLoc40_311 * 0x0000000000000008
// DataOut: fs r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r11:<invalid> esi:<invalid> cl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407D6B:
	word64 rsi_345
	word64 r8_346
	byte r12b_347
	word64 r13_348
	word64 r14_349
	word64 r15_350
	word64 rax_351 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + r13_336:word64], fs, out rsi_345, out r8_346, out r12b_347, out r13_348, out r14_349, out r15_350)
	word64 rcx_356 = Mem0[Mem0[r15_350 + 0x0000000000000010:word64] + rbp_331:word64]
	rbp_331 = rbp_331 + 0x0000000000000008
	word64 r8_360
	word64 r12_361
	word64 r15_362
	rsi = fn0000000000407870(r14_349, fs, out r8_360, out r12_361, out r15_362)
	r13_336 = r13_348 + rdx_303 * 0x0000000000000008
	branch r12_361 + rdx_303 <u Mem0[0x000000000061B1B0:word64] l0000000000407D50
// DataOut: fs r13 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r8:<invalid> esi:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64) Local -0058(64) Local -0060(64)

l0000000000407D50:
	word64 r14_407 = rcx_356 + rbx_332
	fn0000000000405200(r14_407, rax_351 + rbx_332)
	rbx_332 = r14_407
// DataOut: fs r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407DB2:
	word64 rdi_369 = Mem0[0x000000000061A610:word64]
	word64 rax_371 = Mem0[rdi_369 + 0x0000000000000028:word64]
	branch rax_371 >=u Mem0[rdi_369 + 0x0000000000000030:word64] l0000000000407E51
// DataOut: fs r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407E51:
	__overflow(rdi_369, 0x000000000000000A)
	rsi = 0x000000000000000A
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407DC7:
	Mem400[rdi_369 + 0x0000000000000028:word64] = rax_371 + 0x0000000000000001
	Mem401[rax_371:byte] = 0x0A
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407DD2:
	word64 v32_380 = qwLoc40_311 + 0x0000000000000001
	qwLoc40_311 = v32_380
	branch v32_380 != rdx_303 l0000000000407D30
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> eax:<invalid> edi:<invalid> al:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407DE8:
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> eax:<invalid> edi:<invalid> al:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407C75:
	word64 rbx_230 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000407A38
// DataOut: fs r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407C85:
// DataOut: fs rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407C88:
	word64 r8_243
	word64 r12_244
	word64 r15_245
	rsi = fn0000000000407870(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_230 * 0x0000000000000008:word64], fs, out r8_243, out r12_244, out r15_245)
	word64 rdi_248 = Mem0[0x000000000061A610:word64]
	word64 rax_250 = Mem0[rdi_248 + 0x0000000000000028:word64]
	branch rax_250 >=u Mem0[rdi_248 + 0x0000000000000030:word64] l0000000000407E60
// DataOut: fs r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> ecx:<invalid> ax:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E60:
	__overflow(rdi_248, 0x000000000000000A)
	rsi = 0x000000000000000A
// DataOut: fs r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> ecx:<invalid> ax:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407CAF:
	Mem278[rdi_248 + 0x0000000000000028:word64] = rax_250 + 0x0000000000000001
	Mem279[rax_250:byte] = 0x0A
// DataOut: fs r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> ecx:<invalid> ax:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407CBA:
	rbx_230 = rbx_230 + 0x0000000000000001
	branch Mem0[0x000000000061B1B0:word64] >u rbx_230 l0000000000407C88
// DataOut: fs r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> ecx:<invalid> ax:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407CC7:
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> ecx:<invalid> ax:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407C01:
	word64 rbx_179 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000407A38
// DataOut: fs r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407A38:
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> r13:<invalid> r14:<invalid> rsi:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r11:<invalid> esi:<invalid> cl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407C11:
// DataOut: fs rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407C18:
	fn0000000000406A30()
	word64 r8_190
	rsi = fn0000000000406B70(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_179 * 0x0000000000000008:word64], fs, out r8_190)
	word64 rdi_193 = Mem0[0x000000000061A610:word64]
	word64 rax_195 = Mem0[rdi_193 + 0x0000000000000028:word64]
	branch rax_195 >=u Mem0[rdi_193 + 0x0000000000000030:word64] l0000000000407E6F
// DataOut: fs r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r8d:<invalid> r14d:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E6F:
	__overflow(rdi_193, 0x000000000000000A)
	rsi = 0x000000000000000A
// DataOut: fs r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r8d:<invalid> r14d:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407C42:
	Mem225[rdi_193 + 0x0000000000000028:word64] = rax_195 + 0x0000000000000001
	Mem226[rax_195:byte] = 0x0A
// DataOut: fs r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r8d:<invalid> r14d:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407C4D:
	Mem205[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	rbx_179 = rbx_179 + 0x0000000000000001
	branch Mem205[0x000000000061B1B0:word64] >u rbx_179 l0000000000407C18
// DataOut: fs r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r8d:<invalid> r14d:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407C62:
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r8d:<invalid> r14d:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407A46:
	return rsi
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:r15 dl:<invalid> edx:<invalid> rbp:rbp r12:r12 r13:r13 r14:r14 rsi:<invalid> eax:<invalid> r8:<invalid> edi:<invalid> al:<invalid> r11:<invalid> esi:<invalid> cl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dil:<invalid> r8d:<invalid> ebx:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn00000000004079F0_exit:
// DataOut: r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:r15 dl:<invalid> edx:<invalid> rbp:rbp r12:r12 r13:r13 r14:r14 rsi:<invalid> eax:<invalid> r8:<invalid> edi:<invalid> al:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> r9:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> dil:<invalid> r8d:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn0000000000407EA0(word64 rcx, word32 edx, word64 rsi, word64 rdi, selector fs, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r12dOut, ptr64 & r13dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi fs rcx rdi rsi
// LiveOut: r12d r13d r8 rax rsi
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000407EA0_entry:
	rsp = fp
// DataOut: ebx edi edx esi fs r12d r13d r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0370(64)

l0000000000407EA0:
	rsp = fp - 8
	qwLoc08 = rbp
	rbp = fp - 8
	rsp = fp - 16
	qwLoc10 = r15
	rsp = fp - 24
	qwLoc18 = r14
	rsp = fp - 32
	qwLoc20 = r13
	r13 = (uint64) esi
	rsp = fp - 40
	qwLoc28 = r12
	rsp = fp - 48
	qwLoc30 = rbx
	rbx = rdi
	rsp = fp - 936
	dwLoc038C = edx
	rdx = rcx
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	rcx = Mem0[0x000000000061B1B0:word64]
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
	SCZO = cond(rcx - Mem0[0x000000000061B1B8:word64])
	Z = (bool) SCZO (alias)
	r9 = Mem0[0x000000000061B1C0:word64]
	r9d = (word32) r9 (alias)
	r9w = (word16) r9 (alias)
	branch Test(EQ,Z) l0000000000408400
// DataOut: cl ebx fs r12d r13d r8 r9 r9b rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408400:
	rax = 0x00000000AAAAAAAA
	rdi = Mem0[0x000000000061B1C0:word64]
	SCZO = cond(rcx - 0x00000000AAAAAAAA)
	branch Test(UGT,CZ) l0000000000408C7B
// DataOut: ebx fs r12d r13d rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408C7B:
	fn0000000000410E50()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[rsi + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rdx = (uint64) (edx | r8d)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0000000000408CE8
// DataOut: al dl ebx fs r12d r13d r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:0x00000000AAAAAAAA rcx:<invalid> r9:<invalid> rdi:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// Terminates process

l0000000000408CE8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000408CAF
// DataOut: al dl ebx fs r12d r13d r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CEC:
// DataOut: ebx fs r12d r13d r8 rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CAF:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408CC0
// DataOut: dl ebx fs r12d r13d r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CB3:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408CC0
// DataOut: ebx fs r12d r13d r8 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CC0:
	rcx = Mem0[rsi + 0x0000000000000068:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000068:word64] - rcx)
	rax = Mem0[rdi + 0x0000000000000070:word64]
	rdx = Mem0[rsi + 0x0000000000000070:word64]
	branch Test(GT,SZO) l0000000000408CF0
// DataOut: eax ebx edx fs r12d r13d r8 rbp rbx rdi rsi rsp
// DataOut (flags): SO
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CF0:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: ebx fs r12d r13d r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CD2:
	branch Test(LT,SO) l0000000000408D00
// DataOut: eax ebx edx fs r12d r13d r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408D00:
	rax = 0x0000000000000001
	return rax
// DataOut: ebx fs r12d r13d r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CD4:
	rdx = (uint64) (edx - eax)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000408D06
// DataOut: ebx edx fs r12d r13d r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408D06:
	rax = (uint64) edx
	return rax
// DataOut: ebx fs r12d r13d r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CD8:
	rsi = Mem0[rsi:word64]
	rdi = Mem0[rdi:word64]
// DataOut: fs r12d r13d r8 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405020:
	rsp = rsp - 8
	Mem0[rsp:word64] = rbp
	rbp = rsi
	rsp = rsp - 8
	Mem0[rsp:word64] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000008
	rax = __errno_location()
	Mem0[rax:word32] = 0x00000000
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rdi = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8
	rsi = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8
	eax = strcoll(rdi, rsi)
	return rax
// DataOut: ebx fs r12d r13d r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CBC:
	return rax
// DataOut: ebx fs r12d r13d r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rax:0x0000000000000001 r8:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040841A:
	rsi = rcx + rcx * 0x0000000000000002
	qwLoc0398 = rdx
	rsi = rsi << 0x0000000000000007
	SCZO = cond(rsi)
	rax = fn0000000000410C90(rdx, rsi, rdi, out r8)
	v29 = Mem0[0x000000000061B1B8:word64] << 0x0000000000000001
	Mem0[0x000000000061B1B8:word64] = v29
	SCZO = cond(v29)
	Mem0[0x000000000061B1C0:word64] = rax
	r9 = rax
	rcx = Mem0[0x000000000061B1B0:word64]
	rdx = qwLoc0398
// DataOut: cl fs r13d r8 r9 r9b rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:0x00000000AAAAAAAA rcx:<invalid> r9:<invalid> rdi:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407EED:
	rcx = rcx + rcx * 0x0000000000000002
	rsi = 0x00000000000000C0
	rcx = rcx << 0x0000000000000006
	r14 = r9 + rcx
	SZO = cond(r14b & 0x01)
	C = false
	rdi = r14
	branch Test(NE,Z) l0000000000408A18
// DataOut: dil esi fs r13d r14 r14b r8 rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408A18:
	Mem0[r14:byte] = 0x00
	rdi = r14 + 0x0000000000000001
	sil = 0xBF
// DataOut: dil esi fs r13d r14 r8 rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000000000C0 r14:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407F0B:
	SZO = cond(dil & 0x02)
	C = false
	branch Test(NE,Z) l00000000004089E0
// DataOut: dil esi fs r13d r14 r8 rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004089E0:
	r9 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	rsi = (uint64) (esi - 0x00000002)
	Mem0[rdi - 0x0000000000000002:word16] = r9w
	SZO = cond(dil & 0x04)
	C = false
	branch Test(EQ,Z) l0000000000407F1F
// DataOut: esi fs r13d r14 r8 rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004089F9:
// DataOut: esi fs r13d r14 r8 rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407F15:
	SZO = cond(dil & 0x04)
	C = false
	branch Test(NE,Z) l0000000000408A00
// DataOut: esi fs r13d r14 r8 rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408A00:
	Mem0[rdi:word32] = 0x00000000
	rsi = (uint64) (esi - 0x00000004)
	rdi = rdi + 0x0000000000000004
	SCZO = cond(rdi)
// DataOut: esi fs r13d r14 r8 rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407F1F:
	rcx = (uint64) esi
	rax = 0x0000000000000000
	rcx = (uint64) (ecx >>u 0x00000003)
	SZO = cond(sil & 0x04)
	C = false
// DataOut: esi fs r13d r14 r8 rax rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407F2A:
	branch rcx == 0x0000000000000000 l0000000000407F2D
// DataOut: esi fs r13d r14 r8 rax rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407F2D:
	branch Test(NE,Z) l0000000000408360
// DataOut: esi fs r13d r14 r8 rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408360:
	Mem0[rdi:word32] = 0x00000000
	rdi = rdi + 0x0000000000000004
	SZO = cond(sil & 0x02)
	C = false
	branch Test(EQ,Z) l0000000000407F3D
// DataOut: esi fs r13d r14 r8 rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408374:
// DataOut: esi fs r13d r14 rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407F33:
	SZO = cond(sil & 0x02)
	C = false
	branch Test(NE,Z) l0000000000408340
// DataOut: esi fs r13d r14 r8 rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408340:
	r8 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	Mem0[rdi - 0x0000000000000002:word16] = r8w
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l0000000000407F46
// DataOut: fs r13d r14 r8 rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408355:
// DataOut: fs r13d r14 r8 rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407F3D:
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000408338
// DataOut: fs r13d r14 r8 rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408338:
	Mem0[rdi:byte] = 0x00
// DataOut: fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407F46:
	SCZO = cond(bLoc038C - 0x00)
	Mem0[r14 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r14 + 0x00000000000000A0:word32] = r13d
	branch Test(EQ,Z) l0000000000408220
// DataOut: fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408220:
	SCZO = cond(Mem0[0x000000000061B0C1:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040822D:
	SCZO = cond(r13d - 0x00000003)
	branch Test(EQ,Z) l0000000000408910
// DataOut: fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408910:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408237
// DataOut: fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040891D:
	rdi = 0x0000000000000013
	qwLoc0398 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0) Local -0398(64)

l000000000040893D:
	rdi = 0x0000000000000012
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0) Local -0398(64)

l0000000000408956:
	rdi = 0x0000000000000014
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040896F:
// DataOut: fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408237:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000408818
// DataOut: al fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408818:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(NE,Z) l0000000000408246
// DataOut: al fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408246:
	SZO = cond(r13d & r13d)
	C = false
	sil = Test(EQ,Z)
	branch Test(EQ,Z) l0000000000408255
// DataOut: al fs r13d r14 r8 rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040824F:
	SCZO = cond(r13d - 0x00000006)
	branch Test(NE,Z) l0000000000408280
// DataOut: al fs r13d r14 r8 rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408255:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
	SCZO = cond(ecx - 0x00000005)
	branch Test(EQ,Z) l0000000000408BD0
// DataOut: al ecx fs r13d r14 r8 rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408BD0:
	rcx = 0x0000000000000005
// DataOut: ecx fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408264:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al ecx fs r13d r14 r8 rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408271:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al ecx fs r13d r14 r8 rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040827E:
// DataOut: al fs r13d r14 r8 rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408280:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r13d r14 r8 rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408288:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408825
// DataOut: fs r13d r14 r8 rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408825:
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
// DataOut: fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408295:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040829E:
	r12 = 0x0000000000000000
	SCZO = cond(r13d - 0x00000005)
	branch Test(NE,Z) l00000000004081E1
// DataOut: fs r12 r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004082AB:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000407F62
// DataOut: fs r12 r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004082B8:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081E1
// DataOut: fs r12 r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004082C5:
	rdi = 0x000000000000000E
	qwLoc0398 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r12 r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0) Local -0398(64)

l00000000004082E5:
	rdi = 0x0000000000000010
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r12 r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0) Local -0398(64)

l00000000004082FE:
	rdi = 0x0000000000000011
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r12 r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0) Local -0398(64)

l0000000000408317:
	rdi = 0x0000000000000015
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r12 r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408330:
// DataOut: fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000407F62:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
// DataOut: ecx fs r13d r14 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407F68:
	esi = (word32) Mem0[rbx:byte]
	r12 = rbx
	SCZO = cond(sil - 0x2F)
	branch Test(EQ,Z) l0000000000407F81
// DataOut: ecx esi fs r12 r13d r14 r8 rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407F74:
	r15d = (word32) Mem0[rdx:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000408670
// DataOut: ecx esi fs r12 r13d r14 r15b r8 rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:rdi sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408670:
	rdi = rbx
	dwLoc039C = ecx
	dwLoc0390 = esi
	qwLoc0398 = rdx
	eax = strlen(rdi)
	rdx = qwLoc0398
	r12 = rax
	rdi = rdx
	eax = strlen(rdi)
	rax = r12 + 0x0000000000000020 + rax
	rdx = qwLoc0398
	rsi = (uint64) dwLoc0390
	rcx = (uint64) dwLoc039C
	rax = rax & 0xFFFFFFFFFFFFFFF0
	rsp = fp - 936 - rax
	rax = rsp + 0x000000000000000F
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SCZO = cond(r15b - 0x2E)
	r12 = rax
	branch Test(EQ,Z) l0000000000408B30
// DataOut: ecx fs r12 r13d r14 r15b r8 rax rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:rdi r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408B30:
	SCZO = cond(Mem0[rdx + 0x0000000000000001:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408705
// DataOut: ecx fs r12 r13d r14 r15b r8 rax rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408B3A:
// DataOut: ecx fs r12 r13d r14 r15b r8 rax rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004086D2:
	rsi = rdx
// DataOut: ecx fs r12 r13d r14 r15b r8 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004086D8:
	rax = rax + 0x0000000000000001
	rsi = rsi + 0x0000000000000001
	Mem0[rax - 0x0000000000000001:byte] = r15b
	r15d = (word32) Mem0[rsi:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004086D8
// DataOut: ecx fs r12 r13d r14 r15b r8 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004086ED:
	SCZO = cond(rdx - rsi)
	rdi = rax
	branch Test(UGE,C) l0000000000408702
// DataOut: ecx fs r12 r13d r14 r8 rax rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004086F5:
	SCZO = cond(Mem0[rsi - 0x0000000000000001:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408702
// DataOut: ecx fs r12 r13d r14 r8 rax rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004086FB:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rdi:byte] = 0x2F
// DataOut: ecx fs r12 r13d r14 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408702:
	esi = (word32) Mem0[rbx:byte]
// DataOut: ecx fs r12 r13d r14 r8 rax rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408705:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000408724
// DataOut: ecx fs r12 r13d r14 r8 rax rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040870A:
	rdx = rbx
// DataOut: ecx fs r12 r13d r14 r8 rax rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408710:
	rax = rax + 0x0000000000000001
	rdx = rdx + 0x0000000000000001
	Mem0[rax - 0x0000000000000001:byte] = sil
	esi = (word32) Mem0[rdx:byte]
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000408710
// DataOut: ecx fs r12 r13d r14 r8 rax rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408724:
	Mem0[rax:byte] = 0x00
// DataOut: ecx fs r12 r13d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407F81:
	SCZO = cond(ecx - 0x00000003)
	branch Test(ULT,C) l0000000000407FFD
// DataOut: ecx fs r12 r13d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407F86:
	SCZO = cond(ecx - 0x00000004)
	branch Test(ULE,CZ) l0000000000407FF0
// DataOut: ecx fs r12 r13d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000407FF0:
	SCZO = cond(bLoc038C - 0x00)
	branch Test(NE,Z) l00000000004088B0
// DataOut: ecx fs r12 r13d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(8)

l00000000004088B0:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	dwLoc0398 = ecx
	rdx = r15
	eax = __xstat(0x0000000000000001, rsi, rdx)
	rcx = (uint64) dwLoc0398
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SCZO = cond(ecx - 0x00000003)
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r12 r13d r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(8)

l00000000004088E0:
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408B5E
// DataOut: eax edx fs r12 r13d r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:0x01 al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):ecx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(8)

l0000000000408B5E:
	dwLoc0398 = eax
	rax = __errno_location()
	SCZO = cond(Mem0[rax:word32] - 0x00000002)
	rdx = (uint64) dwLoc0398
	al = Test(EQ,Z)
// DataOut: al edx fs r12 r13d r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:0x01 al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):ecx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(8)

l00000000004088E8:
	rax = (uint64) Mem0[r14 + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00004000)
	al = Test(NE,Z)
// DataOut: al edx fs r12 r13d r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:0x01 al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):ecx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(8)

l00000000004088F9:
	SZO = cond(al & al)
	C = false
	rsi = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408015
// DataOut: edx esi fs r12 r13d r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:0x01 cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(8)

l0000000000408906:
// DataOut: fs r12 r13d r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:0x01 cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(8)

l0000000000407F8B:
	SCZO = cond(ecx - 0x00000005)
	branch Test(NE,Z) l0000000000407FFD
// DataOut: fs r12 r13d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(8)

l0000000000407FFD:
	r15 = r14 + 0x0000000000000010
// DataOut: fs r12 r13d r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(8)

l0000000000408001:
	rdx = r15
	rsi = r12
	rdi = 0x0000000000000001
	eax = __lxstat(0x0000000000000001, rsi, rdx)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = (uint64) eax
// DataOut: edx esi fs r12 r13d r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(8)

l0000000000408015:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000407FB1
// DataOut: edx esi fs r12 r13d r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(8)

l0000000000407F92:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	rdx = r15
	eax = __xstat(0x0000000000000001, rsi, rdx)
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408019
// DataOut: edx esi fs r12 r13d r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(8)

l0000000000408019:
	SCZO = cond(r13d - 0x00000005)
	Mem0[r14 + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r12 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040802B:
	rax = (uint64) Mem0[r14 + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r12 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408380:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r12 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040838D:
	rdi = 0x0000000000000015
	dwLoc0390 = esi
	dwLoc0398 = edx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = (uint64) dwLoc0398
	rsi = (uint64) dwLoc0390
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r12 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0) Local -0390(64) Local -0398(64)

l00000000004083B7:
	r13 = Mem0[r14 + 0x0000000000000010:word64]
	SCZO = cond(r13 - Mem0[0x000000000061A678:word64])
	branch Test(EQ,Z) l0000000000408C1F
// DataOut: edx esi fs r12 r13 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0) Local -0390(64) Local -0398(64)

l0000000000408C1F:
	rax = __errno_location()
	rdx = (uint64) dwLoc0398
	Mem0[rax:word32] = 0x0000005F
	rsi = (uint64) dwLoc0390
// DataOut: edx fs r12 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004083C8:
	dwLoc0390 = esi
	dwLoc0398 = edx
	rax = __errno_location()
	rsi = (uint64) dwLoc0390
	rdx = (uint64) dwLoc0398
	Mem0[rax:word32] = 0x0000005F
	Mem0[0x000000000061A678:word64] = r13
// DataOut: edx fs r12 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004083F2:
	Mem0[r14 + 0x00000000000000B8:byte] = 0x00
// DataOut: edx fs r12 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040803F:
	rcx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000408056
// DataOut: edx fs r12 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408049:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
// DataOut: edx fs r12 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408056:
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[r14 + 0x0000000000000010:word64] - rax)
	dwLoc0398 = edx
	branch Test(EQ,Z) l0000000000408C52
// DataOut: fs r12 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0) Local -0398(64)

l0000000000408C52:
	rax = __errno_location()
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0398
	Mem0[r14 + 0x00000000000000A8:word64] = 0x000000000061A56A
// DataOut: edx fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040806D:
	SZO = cond(sil & sil)
	C = false
	rdi = r12
	rsi = r14 + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
// DataOut: fs r12 r14 r15 r8 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0) Local -0398(64)

l0000000000408458:
	eax = fn0000000000411840(rsi, rdi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0398
	branch Test(NS,S) l0000000000408093
// DataOut: edx fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408080:
	eax = fn0000000000411820(rsi, rdi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0398
	branch Test(SG,S) l000000000040846B
// DataOut: edx fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040846B:
	dwLoc0398 = edx
	rax = __errno_location()
	rax = (uint64) Mem0[rax:word32]
	rdx = (uint64) dwLoc0398
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
// DataOut: eax edx fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408483:
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
// DataOut: eax edx fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004089C0:
	SCZO = cond(eax - 0x0000005F)
	branch Test(NE,Z) l0000000000408497
// DataOut: eax edx fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004089C9:
// DataOut: eax edx fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040848C:
	rcx = Mem0[r14 + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
// DataOut: eax edx fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408497:
	SCZO = cond(eax - 0x0000005F)
	Mem0[r14 + 0x00000000000000A8:word64] = 0x000000000061A56A
	branch Test(EQ,Z) l00000000004089D0
// DataOut: eax edx fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004084AB:
	SCZO = cond(eax - 0x0000003D)
	branch Test(EQ,Z) l00000000004089D0
// DataOut: edx fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004089D0:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
// DataOut: edx fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004084B4:
	Mem0[r14 + 0x00000000000000B4:word32] = 0x00000000
// DataOut: fs r12 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408093:
	rdi = Mem0[r14 + 0x00000000000000A8:word64]
	rsi = 0x00000000004137B1
	rcx = 0x000000000000000A
// DataOut: edx fs r12 r14 r15 r8 rbx rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004080A4:
	branch rcx == 0x0000000000000000 l00000000004080A6
// DataOut: edx fs r12 r14 r15 r8 rbx rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004080A4_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l00000000004080A4
// DataOut: edx fs r12 r14 r15 r8 rbx rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004080A6:
	r13b = Test(NE,Z)
// DataOut: edx fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004080AA:
	rax = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000408830
// DataOut: edx fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408830:
	rax = Mem0[0x000000000061A668:word64]
	SCZO = cond(Mem0[r14 + 0x0000000000000010:word64] - rax)
	branch Test(EQ,Z) l0000000000408B40
// DataOut: edx fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408B40:
	dwLoc0398 = edx
	rax = __errno_location()
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0398
// DataOut: cl edx fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408841:
	dwLoc0390 = edx
	rax = __errno_location()
	rsi = r15
	Mem0[rax:word32] = 0x00000000
	rdi = r12
	qwLoc0398 = rax
	eax = fn0000000000409CC0(rsi, rdi)
	SZO = cond(eax & eax)
	C = false
	rcx = 0x0000000000000001
	r8 = qwLoc0398
	rdx = (uint64) dwLoc0390
	branch Test(GT,SZO) l00000000004080BA
// DataOut: cl eax edx fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040887E:
	rdx = (uint64) Mem0[r8:word32]
	SCZO = cond(edx - 0x00000016)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040888A:
	SCZO = cond(edx - 0x00000026)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408893:
	SCZO = cond(edx - 0x0000005F)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408C3B:
	rdx = Mem0[r14 + 0x0000000000000010:word64]
	rax = (uint64) (eax >>u 0x0000001F)
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[0x000000000061A668:word64] = rdx
	rdx = (uint64) eax
// DataOut: cl edx fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l000000000040889C:
	rax = (uint64) (eax >>u 0x0000001F)
	SCZO = cond(eax)
	rdx = (uint64) eax
// DataOut: edx fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004080B8:
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
// DataOut: cl edx fs r12 r13b r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004080BA:
	rsi = (uint64) ecx
	rax = 0x0000000000000000
	sil = sil | r13b
	SZO = cond(sil)
	C = false
	branch Test(EQ,Z) l00000000004080D9
// DataOut: cl eax edx fs r12 r13b r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004080C3:
	rcx = (uint64) (ecx ^ 0x00000001)
	r13b = r13b & cl
	SZO = cond(r13b)
	C = false
	rax = (uint64) r13d
	branch Test(EQ,Z) l00000000004080D0
// DataOut: eax edx fs r12 r13b r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004080CC_2:
	esi = r13d
// DataOut: eax edx fs r12 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004080D0:
	rax = (uint64) (eax << 0x0000001F)
	rax = (uint64) (eax >> 0x0000001F)
	rax = (uint64) (eax + 0x00000002)
	SCZO = cond(eax)
// DataOut: eax edx fs r12 r14 r15 r8 rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004080D9:
	v44 = Mem0[0x000000000061B17C:byte] | sil
	Mem0[0x000000000061B17C:byte] = v44
	SZO = cond(Mem0[0x000000000061B17C:byte])
	SZO = cond(edx & edx)
	C = false
	Mem0[r14 + 0x00000000000000B4:word32] = eax
	branch Test(NE,Z) l00000000004084BF
// DataOut: fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> r13b:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004084BF:
	rdi = r12
	r8 = fn000000000040EAB0(rdi, r15, fs, out r12)
	r13 = rax
	rax = __errno_location()
	rsi = (uint64) Mem0[rax:word32]
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	rcx = r13
	rdx = 0x0000000000415E54
	error(0x0000000000000000, rsi, 0x0000000000415E54, Mem0[rsp + -8:<unknown>])
	rax = (uint64) Mem0[r14 + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> r13b:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004084F6:
// DataOut: fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:0x0000000000415E54 rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(32)

l00000000004080EF:
	rax = (uint64) Mem0[r14 + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000408500
// DataOut: eax fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408500:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000408519
// DataOut: fs r12 r13d r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(32)

l000000000040850C:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l000000000040862A
// DataOut: fs r12 r13d r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(32)

l0000000000408519:
	rsi = Mem0[r14 + 0x0000000000000040:word64]
	rdi = r12
	rax = fn0000000000409D20(rsi, rdi)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	Mem0[r14 + 0x0000000000000008:word64] = rax
	branch Test(EQ,Z) l0000000000408BDA
// DataOut: fs r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(32)

l0000000000408BDA:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rsi = 0x0000000000413794
	rax = dcgettext(0x0000000000000000, 0x0000000000413794, 0x0000000000000005)
	edi = (word32) bLoc038C
	rdx = r12
	rsi = rax
	rsi = fn0000000000405810(rdx, rsi, edi, r15, fs, out r8)
	r13 = Mem0[r14 + 0x0000000000000008:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(NE,Z) l0000000000408535
// DataOut: fs r12 r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408C0A:
// DataOut: fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -038C(0)

l0000000000408535:
	SCZO = cond(Mem0[r13 + 0x0000000000000000:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408C0F
// DataOut: fs r12 r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408C0F:
	rdi = r13
	rax = fn0000000000410E30(rdi, out rsi)
	r13 = rax
// DataOut: fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408540:
	rdi = r12
	rax = fn000000000040A2B0(rdi, out rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	rdi = r13
	branch Test(EQ,Z) l0000000000408B98
// DataOut: fs r12 r13 r14 r15 r8 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408B98:
	rax = fn0000000000410E30(rdi, out rsi)
	r13 = rax
// DataOut: fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408557:
	eax = strlen(rdi)
	rdi = r15 + 0x0000000000000002 + rax
	rax = fn0000000000410C40(rsi, rdi)
	rcx = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[r12 - 0x0000000000000001 + r15:byte] - 0x2F)
	rdi = rcx
	rsi = r12
	qwLoc0398 = rcx
	al = Test(NE,Z)
	r15 = r15 + rax
	SCZO = cond(r15)
	rdx = r15
	rax = stpncpy(rdi, rsi, rdx)
	rsi = r13
	rdi = rax
	rax = strcpy(rdi, rsi)
	rcx = qwLoc0398
	r13 = rcx
// DataOut: fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004085A1:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000408607
// DataOut: fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004085A6:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000001)
	branch Test(ULE,CZ) l0000000000408B80
// DataOut: fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408B80:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408607
// DataOut: fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l0000000000408B8D:
// DataOut: fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004085B3:
	rdx = fp - 0x0000000000000388
	rsi = r13
	rdi = 0x0000000000000001
	eax = __xstat(0x0000000000000001, rsi, fp - 0x0000000000000388)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000408607
// DataOut: fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)

l00000000004085CB:
	SCZO = cond(bLoc038C - 0x00)
	Mem0[r14 + 0x00000000000000B1:byte] = 0x01
	rax = (uint64) dwLoc0370
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:fp - 0x0000000000000388 rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -038C(0)

l00000000004085E2:
	rdx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:fp - 0x0000000000000388 rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -038C(0)

l00000000004085EC:
	rdx = (uint64) eax
	rdx = (uint64) (edx & 0x0000F000)
	SCZO = cond(edx - 0x00004000)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -038C(0)

l00000000004085FC:
// DataOut: eax fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -038C(0)

l0000000000408600:
	Mem0[r14 + 0x00000000000000A4:word32] = eax
// DataOut: fs r13 r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -038C(0)

l0000000000408607:
	rdi = r13
	free(rdi)
	rax = (uint64) Mem0[r14 + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -038C(0)

l0000000000408623:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r13d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l000000000040862A:
	Mem0[r14 + 0x00000000000000A0:word32] = 0x00000006
// DataOut: fs r13d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408103:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l0000000000408978
// DataOut: fs r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -038C(0)

l0000000000408978:
	SCZO = cond(bLoc038C - 0x00)
	branch Test(EQ,Z) l00000000004089A8
// DataOut: fs r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408981:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(NE,Z) l00000000004089A8
// DataOut: fs r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l00000000004089A8:
	Mem0[r14 + 0x00000000000000A0:word32] = 0x00000003
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r13d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l000000000040898A:
	Mem0[r14 + 0x00000000000000A0:word32] = 0x00000009
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r13d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l000000000040810E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	Mem0[r14 + 0x00000000000000A0:word32] = 0x00000005
// DataOut: fs r13d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408120:
	SZO = cond(r13d & r13d)
	C = false
	r12 = Mem0[r14 + 0x0000000000000050:word64]
	branch Test(EQ,Z) l0000000000408132
// DataOut: fs r12 r13d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408129:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081A8
// DataOut: fs r12 r13d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408132:
	r8 = Mem0[0x000000000061B138:word64]
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	r15 = fp - 0x00000000000002D8
	rcx = 0x0000000000000200
	rdi = r12
	rsi = fp - 0x00000000000002D8
	rax = fn000000000040BD70(rcx, edx, rsi, rdi, r8, fs, out r8, out r15d)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	eax = fn000000000040D420(esi, rdi, fs, out rsi)
	SCZO = cond(eax - Mem0[0x000000000061B174:word32])
	branch Test(LE,SZO) l000000000040816E
// DataOut: eax fs r12 r14 r15d r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408168:
	Mem0[0x000000000061B174:word32] = eax
// DataOut: fs r12 r14 r15d r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l000000000040816E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(NE,Z) l00000000004081A8
// DataOut: fs r12 r13d r14 r15d r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l000000000040817A:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000408B10
// DataOut: fs r12 r14 r15d r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408B10:
	rdi = (uint64) Mem0[r14 + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rsi, edi, fs, out rsi, out r8)
	SCZO = cond(eax - Mem0[0x000000000061B168:word32])
	branch Test(LE,SZO) l0000000000408187
// DataOut: eax fs r12 r14 r15d r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408B25:
	Mem0[0x000000000061B168:word32] = eax
// DataOut: fs r12 r14 r15d r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408187:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A90
// DataOut: fs r12 r14 r15d r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408A90:
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	r13 = (uint64) Mem0[r14 + 0x0000000000000030:word32]
	branch Test(EQ,Z) l0000000000408BA8
// DataOut: fs r12 r13d r14 r15d r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408BA8:
	rdi = (uint64) r13d
	rax = fn000000000040CB40(rsi, edi)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l0000000000408AA1
// DataOut: fs r12 r13d r14 r15d r8 rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408BBC:
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = fn000000000040D420(esi, rdi, fs, out rsi)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408BCA
// DataOut: eax edx fs r12 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408BC7_1:
	edx = eax
// DataOut: edx fs r12 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408BCA:
// DataOut: edx fs r12 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408AA1:
	rdx = 0x0000000000000015
	r8 = (uint64) r13d
	rcx = 0x000000000041375A
	rsi = 0x0000000000000001
	rdi = fp - 0x00000000000002D8
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(fp - 0x00000000000002D8, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A, Mem0[rsp + -8:<unknown>])
	rdx = fp - 0x00000000000002D8
// DataOut: fs r12 r14 r15d r8 rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408AC0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000408AC0
// DataOut: al eax edx fs r12 r14 r15d r8 rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:fp - 0x00000000000002D8 r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:0x01 r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408AD7:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000408AE4
// DataOut: al cl edx fs r12 r14 r15d r8 rbx rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:fp - 0x00000000000002D8 r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:0x01 r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408AE1_1:
	eax = ecx
// DataOut: al edx fs r12 r14 r15d r8 rbx rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:fp - 0x00000000000002D8 r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:0x01 r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408AE4:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000408AEC
// DataOut: al ecx edx fs r12 r14 r15d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:fp - 0x00000000000002D8 r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:0x01 r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408AE8_1:
	rdx = rcx
// DataOut: al edx fs r12 r14 r15d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:fp - 0x00000000000002D8 r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:0x01 r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408AEC:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = (uint64) (edx - r15d)
	SCZO = cond(edx)
// DataOut: edx fs r12 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:fp - 0x00000000000002D8 r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:0x01 r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408AF5:
	SCZO = cond(Mem0[0x000000000061B164:word32] - edx)
	branch Test(GE,SO) l0000000000408194
// DataOut: edx fs r12 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408B01:
	Mem0[0x000000000061B164:word32] = edx
// DataOut: fs r12 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408194:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A70
// DataOut: fs r12 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408A70:
	rdi = (uint64) Mem0[r14 + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rsi, edi, fs, out rsi, out r8)
	SCZO = cond(eax - Mem0[0x000000000061B160:word32])
	branch Test(LE,SZO) l00000000004081A1
// DataOut: eax fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408A85:
	Mem0[0x000000000061B160:word32] = eax
// DataOut: fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l00000000004081A1:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r12 r13d r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l00000000004081A8:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081C9
// DataOut: fs r12 r13d r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l00000000004081B1:
	rdi = Mem0[r14 + 0x00000000000000A8:word64]
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B16C:word32])
	branch Test(GT,SZO) l0000000000408730
// DataOut: eax fs r12 r13d r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408730:
	SZO = cond(r13d & r13d)
	C = false
	Mem0[0x000000000061B16C:word32] = eax
	branch Test(NE,Z) l00000000004081D2
// DataOut: fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l00000000004081C9:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040873F
// DataOut: fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l000000000040873F:
	rdi = Mem0[r14 + 0x0000000000000020:word64]
	rsi = fp - 0x00000000000002F8
	rax = fn000000000040CD70(rsi, rdi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
// DataOut: eax fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l000000000040875F:
	Mem0[0x000000000061B170:word32] = eax
// DataOut: fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408765:
	rax = (uint64) Mem0[r14 + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(NE,Z) l0000000000408A30
// DataOut: fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408A30:
	rdi = Mem0[r14 + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = fp - 0x00000000000002D8
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rsi, rdi, r8, fs, out r8, out r15d)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	eax = fn000000000040D420(esi, rdi, fs, out rsi)
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408A68:
// DataOut: eax fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408779:
	rax = Mem0[r14 + 0x0000000000000038:word64]
	r15 = fp - 0x00000000000002D8
	rsi = fp - 0x00000000000002D8
	rdi = rax
	rax = rax >>u 0x0000000000000008
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B15C:word32])
	branch Test(LE,SZO) l00000000004087BA
// DataOut: eax fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l00000000004087B4:
	Mem0[0x000000000061B15C:word32] = eax
// DataOut: fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l00000000004087BA:
	rax = Mem0[r14 + 0x0000000000000038:word64]
	rsi = fp - 0x00000000000002D8
	rdi = rax
	eax = (word32) al
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi)
	rdi = rax
	eax = strlen(rdi)
	rdx = (uint64) Mem0[0x000000000061B158:word32]
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l00000000004087F0
// DataOut: eax edx fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l00000000004087E8:
	Mem0[0x000000000061B158:word32] = eax
	rdx = (uint64) eax
// DataOut: edx fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l00000000004087F0:
	rax = (uint64) Mem0[0x000000000061B15C:word32]
	eax = rdx + 0x0000000000000002 + rax
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:fp - 0x00000000000002D8 eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408806:
	Mem0[0x000000000061B154:word32] = eax
// DataOut: fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> dil:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l00000000004081D2:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408640
// DataOut: fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dil:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408640:
	rdi = Mem0[r14 + 0x0000000000000018:word64]
	rsi = fp - 0x00000000000002D8
	rax = fn000000000040CD70(rsi, rdi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B178:word32])
	branch Test(LE,SZO) l00000000004081E1
// DataOut: eax fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dil:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000408664:
	Mem0[0x000000000061B178:word32] = eax
// DataOut: fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> sil:<invalid> r14d:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dil:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000407FB1:
	rdi = 0x0000000000000000
	rdx = 0x0000000000000005
	rsi = 0x0000000000413783
	rax = dcgettext(0x0000000000000000, 0x0000000000413783, 0x0000000000000005)
	r15 = (uint64) dwLoc038C
	rdx = r12
	rsi = rax
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
	edi = (word32) r15b
	rsi = fn0000000000405810(rdx, rsi, edi, r15, fs, out r8)
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004081F4
// DataOut: fs r12 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l0000000000407FE4:
// DataOut: fs r12 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l00000000004081E1:
	rdi = rbx
	rax = fn0000000000410E30(rdi, out rsi)
	v41 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v41
	SCZO = cond(v41)
	Mem0[r14:word64] = rax
// DataOut: fs r12 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> sil:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64)

l00000000004081F4:
	rbx = qwLoc40
	rbx = rbx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rbx)
	C = false
	rax = r12
	branch Test(NE,Z) l0000000000408C76
// DataOut: fs r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32)

l0000000000408C76:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040820A:
	rsp = fp - 0x0000000000000030
	rbx = qwLoc30
	rsp = fp - 0x0000000000000028
	r12 = qwLoc28
	rsp = fp - 0x0000000000000020
	r13 = qwLoc20
	rsp = fp - 0x0000000000000018
	r14 = qwLoc18
	rsp = fp - 0x0000000000000010
	r15 = qwLoc10
	rsp = fp - 0x0000000000000008
	rbp = qwLoc08
	rsp = fp
	return rax
// DataOut: ebx fs r12d r13d r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 8 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

fn0000000000407EA0_exit:
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r12d (=> r12dOut)
	use r13d (=> r13dOut)
// DataOut: r12d r13d r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> rdx:<invalid> rsp:fp rcx:<invalid> rsi:<invalid> rdi:<invalid> rbp:rbp rbx:rbx eax:<invalid> r13:r13 r9:<invalid> r14:r14 r12:r12 esi:<invalid> r15d:<invalid> r15:r15 edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):<invalid> -8(fp):rbp

l0000000000407F2A_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 0x0000000000000008
	rcx = rcx - 0x0000000000000001
// DataOut: esi fs r13d r14 r8 rax rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 936 rbp:fp - 8 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0030(32) Local -0040(64) Local -0370(64) Local -038C(0)



void fn0000000000409750(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000409750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000409750_entry:
// DataOut: edi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(0)

l0000000000409750:
	word32 ebx_11 = (word32) (uint64) edi
	branch edi == 0x00000000 l0000000000409794
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0020(0)

l0000000000409794:
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D88, 0x0000000000000005), tLoc20)
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413DB0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E40, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E90, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413FA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004141E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414398, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414540, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414580, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414670, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414780, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414928, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414AC0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414C28, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414DA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414F58, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415020, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004151F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004153F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415480, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004155E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415748, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415778, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004157B0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415850, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415970, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	word64 rsi_253
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_253)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137BB, 0x0000000000000005), tLoc20)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137E8, 0x0000000000000005), tLoc20)
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415A30, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	word64 rax_283 = setlocale(0x0000000000000005, 0x0000000000000000)
	branch rax_283 == 0x0000000000000000 l0000000000409BC8
// DataOut: ebx rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: Local -0020(0)

l0000000000409BB2:
	branch strncmp(rax_283, 0x000000000041380A, 0x0000000000000003) != 0x00000000 l0000000000409BFF
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> rdi:0x0000000000000005 rsi:<invalid> rax:<invalid> eax:<invalid> rcx:0x0000000000415A08 edx:0x00000005 ecx:0x00415A08 -16(fp):rbx -8(fp):rbp
// LocalsOut: Local -0020(0)

l0000000000409BFF:
	word64 rsi_312
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_312)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415A70, 0x0000000000000005), tLoc20)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000003 rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:0x000000000041380A rax:<invalid> eax:<invalid> rcx:0x0000000000415A08 edx:0x00000003 ecx:0x00415A08 -16(fp):rbx -8(fp):rbp
// LocalsOut: Local -0020(0)

l0000000000409BC8:
	word64 rsi_290
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_290)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415AB8, 0x0000000000000005), tLoc20)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000409768:
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D60, 0x0000000000000005), tLoc20)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -16(fp):rbx -8(fp):rbp

l000000000040978D:
	exit((uint64) ebx_11)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp



word32 fn0000000000409CC0(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000409CC0_entry:
// DataOut: fs r12 r13b r14 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409CC0:
	branch (word32) (uint64) ((word32) (uint64) Mem0[rsi + 0x0000000000000018:word32] & 0x0000F000) == 0x0000A000 l0000000000409D10
// DataOut: fs r12 r13b r14 r15 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D10:
	return 0x00000000
// DataOut: eax fs r12 r13b r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000409CCF:
	word32 eax_21 = acl_extended_file(rdi)
	branch eax_21 < 0x00000000 l0000000000409CE8
// DataOut: eax fs r12 r13b r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000409CE8:
	word32 eax_36 = (word32) (uint64) Mem0[__errno_location():word32]
	branch eax_36 == 0x0000005F l0000000000409D18
// DataOut: eax fs r12 r13b r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>

l0000000000409CF4:
	branch eax_36 == 0x00000026 l0000000000409D18
// DataOut: eax fs r12 r13b r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>

l0000000000409CF9:
	branch eax_36 == 0x00000016 l0000000000409D18
// DataOut: eax fs r12 r13b r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>

l0000000000409D18:
	return 0x00000000
// DataOut: eax fs r12 r13b r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>

l0000000000409CFE:
	eax_21 = (word32) (uint64) -(word32) (eax_36 != 0x00000010) (alias)
// DataOut: eax fs r12 r13b r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>

l0000000000409CDC:
	return eax_21
// DataOut: eax fs r12 r13b r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid> al:<invalid>

fn0000000000409CC0_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> eax:<invalid> al:<invalid>



word64 fn0000000000409D20(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000409D20_entry:
// DataOut: fs r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D20:
	word64 rbx_127 = 0x0000000000000401
	branch rsi >u 0x0000000000000400 l0000000000409D59
// DataOut: fs r13 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D55_1:
	rbx_127 = rsi + 0x0000000000000001
// DataOut: fs r13 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:0x0000000000000401 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D59:
// DataOut: fs r13 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D60:
	word64 rax_125 = malloc(rbx_127)
	word64 rbp_128 = rax_125
	branch rax_125 == 0x0000000000000000 l0000000000409DAB
// DataOut: fs r13 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D70:
	word64 rax_133 = DPB(rax_125, readlink(rdi, rax_125, rbx_127), 0)
	branch rax_133 < 0x0000000000000000 l0000000000409DD8
// DataOut: fs r12 r13 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DD8:
	word64 rax_197 = __errno_location()
	word32 edx_201 = (word32) (uint64) Mem0[rax_197:word32]
	branch edx_201 == 0x00000022 l0000000000409D86
// DataOut: edx fs r12 r13 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DE4:
	free(rbp_128)
	Mem210[rax_197:word32] = (word32) (uint64) edx_201
// DataOut: fs r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D86:
	branch rbx_127 >u rax_133 l0000000000409E08
// DataOut: fs r13 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409E08:
	Mem180[rbp_128:byte] = 0x00
	return rbp_128
// DataOut: fs r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000409D8B:
	free(rbp_128)
	branch rbx_127 >u 0x00000000FFFFFFFF l0000000000409DC0
// DataOut: fs r13 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DC0:
	branch rbx_127 >u 0x00000000FFFFFFFE l0000000000409E20
// DataOut: fs r13 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409E20:
	Mem162[__errno_location():word32] = 0x0000000C
	return 0x0000000000000000
// DataOut: fs r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000409DC5:
	rbx_127 = 0x00000000FFFFFFFF
// DataOut: fs r13 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D98:
	rbx_127 = rbx_127 * 0x0000000000000002
	rax_125 = malloc(rbx_127)
	rbp_128 = rax_125
	branch rax_125 != 0x0000000000000000 l0000000000409D70
// DataOut: fs r13 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DAB:
// DataOut: fs r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DAD:
	return 0x0000000000000000
// DataOut: fs r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> r12:<invalid> -72(fp):<invalid> -60(fp):edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000409D20_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r15:r15 r14:r14 r13:r13 rbx:rbx rdi:<invalid> rbp:rbp r12:r12 rdx:<invalid> rsi:<invalid> eax:<invalid> -72(fp):<invalid> -60(fp):edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn0000000000409E50(word64 rcx, word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx rdi rdx rsi
// LiveOut: al eax rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000409E50_entry:
// DataOut: ebp ebx fs r14b r8 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409E50:
	word64 qwLoc50_109
	word64 rax_105
	word64 rax_32 = DPB(rax, strlen(rdi), 0)
	word64 rbp_126 = rdx
	word64 r14_127 = Mem0[rsi:word64]
	branch r14_127 == 0x0000000000000000 l0000000000409F72
// DataOut: fs r12 r14 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0058(64)

l0000000000409F72:
	qwLoc50_109 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -88(fp):rdi -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0050(64)

l0000000000409E81:
	byte bLoc41_108 = 0x00
	qwLoc50_109 = 0xFFFFFFFFFFFFFFFF
	word64 rbx_110 = 0x0000000000000000
	rax_122 = rax_32
// DataOut: fs r12 r13 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -88(fp):rdi -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409EE8:
	word64 rax_122
	branch strncmp(r14_127, rdi, rax_32) != 0x00000000 l0000000000409ED8
// DataOut: fs r12 r13 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409EFB:
	rax_122 = DPB(rax_122, strlen(r14_127), 0) (alias)
	branch rax_122 == rax_32 l0000000000409F60
// DataOut: fs r12 r13 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(32) Local -0050(0) Local -0058(64)

l0000000000409F60:
	return rbx_110
// DataOut: al eax ebp ebx fs r14b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000409F08:
	branch qwLoc50_109 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
// DataOut: fs r12 r13 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(32) Local -0050(64) Local -0058(64)

l0000000000409EA0:
	rax_122 = rdx
	branch rdx == 0x0000000000000000 l0000000000409F50
// DataOut: fs r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(32) Local -0050(64) Local -0058(64)

l0000000000409F50:
	bLoc41_108 = 0x01
// DataOut: fs r12 r13 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409EAE:
	byte cl_198 = (byte) (word32) bLoc41_108
	rax_122 = 0x0000000000000001
	branch memcmp(qwLoc50_109 *s rcx + rdx, rbp_126, rcx) == 0x00000000 l0000000000409ED4
// DataOut: cl fs r12 r13 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0050(0) Local -0058(64)

l0000000000409ED1_1:
	cl_198 = 0x01 (alias)
// DataOut: cl fs r12 r13 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0050(0) Local -0058(64)

l0000000000409ED4:
	bLoc41_108 = cl_198
// DataOut: fs r12 r13 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409ED8:
	rbx_110 = rbx_110 + 0x0000000000000001
	rbp_126 = rbp_126 + rcx
	r14_127 = Mem0[rsi + rbx_110 * 0x0000000000000008:word64]
	branch r14_127 == 0x0000000000000000 l0000000000409F28
// DataOut: fs r12 r13 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409F10:
	rbx_110 = rbx_110 + 0x0000000000000001
	qwLoc50_109 = rbx_110
	rbp_126 = rbp_126 + rcx
	r14_127 = Mem0[rsi + rbx_110 * 0x0000000000000008:word64]
	branch r14_127 != 0x0000000000000000 l0000000000409EE8
// DataOut: fs r12 r13 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409F25:
// DataOut: fs r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0041(0) Local -0050(64)

l0000000000409F28:
	rax_105 = 0xFFFFFFFFFFFFFFFE
	branch bLoc41_108 != 0x00 l0000000000409F3B
// DataOut: al eax fs r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0050(64)

l0000000000409F36:
	rax_105 = qwLoc50_109
// DataOut: al eax fs r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:0xFFFFFFFFFFFFFFFE ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32)

l0000000000409F3B:
	return rax_105
// DataOut: al eax ebp ebx fs r14b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> rax:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000409E50_exit:
// DataOut: al eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r12:r12 rbp:rbp eax:<invalid> r14:r14 rax:<invalid> rbx:rbx r13:r13 rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000409F80(word64 rdx, word64 rsi, word64 rdi, word64 r12, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r12 r15 rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn0000000000409F80_entry:
// DataOut: fs r12 r15 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409F80:
	branch rdx == 0xFFFFFFFFFFFFFFFF l0000000000409FE0
// DataOut: fs r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(0)

l0000000000409FE0:
	dcgettext(0x0000000000000000, 0x0000000000415DFD, 0x0000000000000005)
// DataOut: fs r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rdx:0x0000000000000005 rbp:rdi rbx:rsi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(0)

l0000000000409F95:
	dcgettext(0x0000000000000000, 0x0000000000415E18, 0x0000000000000005)
// DataOut: fs r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rdx:0x0000000000000005 rbp:rdi rbx:rsi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0008(0)

l0000000000409FA4:
	fn000000000040EBF0(rdi, 0x00000001, r15, fs)
	error(0x0000000000000000, 0x0000000000000000, fn000000000040E970(rsi, 0x00000006, 0x00000000, r15, fs), tLoc08)
	return
// DataOut: fs r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rdx:0x0000000000000005 rbp:rdi rbx:rsi rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000409F80_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> rbp:rbp rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> r12:r12 rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



void fn000000000040A000(word64 rdx, word64 rsi, word64 rdi, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040A000_entry:
// DataOut: fs rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(0)

l000000000040A000:
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415E35, 0x0000000000000005), Mem0[0x000000000061A650:word64])
	word64 r14_11 = 0x0000000000000000
	word64 rbp_120 = rsi
	word64 rbx_119 = 0x0000000000000000
	word64 r12_121 = Mem0[rdi:word64]
	branch r12_121 != 0x0000000000000000 l000000000040A086
// DataOut: fs r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(0)

l000000000040A086:
	branch rbx_119 == 0x0000000000000000 l000000000040A050
// DataOut: fs r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(0)

l000000000040A08B:
	branch memcmp(r14_11, rbp_120, rdx) != 0x00000000 l000000000040A050
// DataOut: fs r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(0)

l000000000040A050:
	word64 rbp_133
	word64 r8_134
	word64 r12_135
	fn000000000040EC10(r12_121, rdi, fs, out rbp_133, out r8_134, out r12_135)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E4A, tLoc40)
	rbx_119 = rbx_119 + 0x0000000000000001
	r14_11 = rbp_120
	rbp_120 = rbp_133 + rdx
	r12_121 = Mem0[rdi + rbx_119 * 0x0000000000000008:word64]
	branch r12_121 == 0x0000000000000000 l000000000040A0D0
// DataOut: fs r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(0)

l000000000040A09D:
	word64 r8_162
	word64 r12_163
	fn000000000040EC10(r12_121, rdi, fs, out rbp_120, out r8_162, out r12_163)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E52, tLoc40)
	rbx_119 = rbx_119 + 0x0000000000000001
	r12_121 = Mem0[rdi + rbx_119 * 0x0000000000000008:word64]
	branch r12_121 != 0x0000000000000000 l000000000040A086
// DataOut: fs r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(0)

l000000000040A047:
// DataOut: fs
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:0x0000000000000005 rbp:rsi rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040A0D0:
	word64 rdi_59 = Mem0[0x000000000061A650:word64]
	word64 rax_61 = Mem0[rdi_59 + 0x0000000000000028:word64]
	branch rax_61 >=u Mem0[rdi_59 + 0x0000000000000030:word64] l000000000040A0FB
// DataOut: fs rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040A0FB:
	__overflow(rdi_59, 0x000000000000000A)
	return
// DataOut: fs
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A0E1:
	Mem77[rdi_59 + 0x0000000000000028:word64] = rax_61 + 0x0000000000000001
	Mem78[rax_61:byte] = 0x0A
	return
// DataOut: fs
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040A000_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 rdi:<invalid> r14:r14 r13:r13 rdx:<invalid> rbp:rbp rsi:<invalid> rbx:rbx rax:<invalid> eax:<invalid> r12:r12 rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040A120(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8 rcx rdi rdx rsi
// LiveOut: rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040A120_entry:
// DataOut: ebx fs r13b r8 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A120:
	word64 rax_38 = fn0000000000409E50(r8, rcx, rdx, rsi)
	branch rax_38 < 0x0000000000000000 l000000000040A165
// DataOut: fs r12 r14 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l000000000040A165:
	fn0000000000409F80(rax_38, rsi, rdi, rsi, r8, fs)
	fn000000000040A000(r8, rcx, rdx, fs)
	word64 rsp_74
	word64 r15_75
	word64 r8_76
	word64 r14_77
	word64 rdi_78
	word64 r13_79
	word64 r9_80
	word64 r12_81
	word64 rsi_82
	word64 rbp_83
	word64 rcx_84
	word64 rbx_85
	word64 rdx_86
	byte SCZO_87
	word64 rax_88
	byte SZO_89
	bool C_90
	bool S_91
	selector fs_92
	call r9 (retsize: 8; depth: 64)
		uses: C_41,fs,qwLoc08_4,qwLoc10_9,qwLoc18_14,qwLoc20_19,qwLoc28_25,qwLoc30_31,r12_21,r13_16,r14_11,r15_6,r8,r9,rax_38,rbp_27,rbx_33,rcx_28,rdi_73,rdx_71,rsi_72,rsp_36,S_40,SCZO_37,SZO_39
		defs: C_90,fs_92,r12_81,r13_79,r14_77,r15_75,r8_76,r9_80,rax_88,rbp_83,rbx_85,rcx_84,rdi_78,rdx_86,rsi_82,rsp_74,S_91,SCZO_87,SZO_89
	rax_38 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:r8 r14:rdi r13:r9 r12:rsi rdi:<invalid> rbp:rcx rcx:r8 rbx:rdx rdx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> ecx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l000000000040A156:
	return rax_38
// DataOut: ebx fs r13b rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:r8 r14:rdi r13:r9 r12:rsi rdi:<invalid> rbp:rcx rcx:<invalid> rbx:rdx rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040A120_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r14:r14 r13:r13 r12:r12 rdi:<invalid> rbp:rbp rcx:<invalid> rbx:rbx rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040A2B0(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esi rax rbp rcx rdx rsi si sil
// Preserved: rbp rbx rsp
fn000000000040A2B0_entry:
// DataOut: fs r12 r13 r14 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A2B0:
	word64 rdx_27
	word64 rbp_16 = (uint64) (Mem0[rdi:byte] == 0x2F)
	word64 rsi_19
	word64 rax_20 = fn000000000040A390(rdi, out rsi_19)
	word64 rcx_22 = rax_20 - rdi
	branch rcx_22 <=u rbp_16 l000000000040A2FD
// DataOut: fs r12 r13 r14 r8 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A2D2:
	rdx_27 = rcx_22 - 0x0000000000000001
	branch Mem0[rax_20 - 0x0000000000000001:byte] == 0x2F l000000000040A2EE
// DataOut: fs r12 r13 r14 r8 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2EE:
	branch rbp_16 <u rdx_27 l000000000040A2E0
// DataOut: fs r12 r13 r14 r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2E0:
	word64 rax_50 = rdx_27 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rdx_27:byte] != 0x2F l000000000040A2F3
// DataOut: fs r12 r13 r14 r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2EB:
	rdx_27 = rax_50
// DataOut: fs r12 r13 r14 r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2DC:
// DataOut: fs r12 r13 r14 r8 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2FD:
	rdx_27 = rcx_22
// DataOut: fs r12 r13 r14 r8 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2F3:
	return rdx_27
// DataOut: fs r12 r13 r14 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp

fn000000000040A2B0_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx bpl:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn000000000040A390(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A390_entry:
// DataOut: ebx fs r12 r13 r14 r14d r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A390:
	word32 edx_107 = (word32) Mem0[rdi:byte]
	word64 rax_104 = rdi
	branch (byte) edx_107 != 0x2F l000000000040A3AC
// DataOut: dl ebx fs r12 r13 r14 r14d r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A39B:
// DataOut: ebx fs r12 r13 r14 r14d r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:rdi

l000000000040A3A0:
	rax_104 = rax_104 + 0x0000000000000001
	edx_107 = (word32) Mem0[rax_104:byte]
	branch (byte) edx_107 == 0x2F l000000000040A3A0
// DataOut: dl ebx fs r12 r13 r14 r14d r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3AC:
	word64 rsi_16 = 0x0000000000000000
	*rsiOut = rsi_16
	byte sil_102 = 0x00
	word64 rdx_19 = rax_104
	branch (byte) (uint64) edx_107 == 0x00 l000000000040A3F7
// DataOut: ebx fs r12 r13 r14 r14d r15 r8 rax rbp rbx rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3F7:
	return rax_104
// DataOut: ebx fs r12 r13 r14 r14d r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3B7:
// DataOut: ebx fs r12 r13 r14 r14d r15 r8 rax rbp rbx rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3C0:
	rdx_19 = rdx_19 + 0x0000000000000001
	byte cl_52 = (byte) (word32) Mem0[rdx_19:byte]
	branch cl_52 == 0x00 l000000000040A3E5
// DataOut: cl ebx fs r12 r13 r14 r14d r15 r8 rax rbp rbx rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3CB:
	branch cl_52 == 0x2F l000000000040A3F0
// DataOut: ebx fs r12 r13 r14 r14d r15 r8 rax rbp rbx rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3F0:
	word64 rsi_100
	*rsiOut = 0x0000000000000001
	sil_102 = 0x01 (alias)
// DataOut: ebx fs r12 r13 r14 r14d r15 r8 rax rbp rbx rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D0:
	branch sil_102 == 0x00 l000000000040A3C0
// DataOut: ebx fs r12 r13 r14 r14d r15 r8 rax rbp rbx rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D5:
	rdx_19 = rdx_19 + 0x0000000000000001
	rax_104 = rdx_19
	cl_52 = (byte) (word32) Mem0[rdx_19:byte] (alias)
	word64 rsi_94 = 0x0000000000000000
	*rsiOut = rsi_94
	sil_102 = 0x00 (alias)
	branch cl_52 != 0x00 l000000000040A3CB
// DataOut: cl ebx fs r12 r13 r14 r14d r15 r8 rax rbp rbx rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3E5:
	return rax_104
// DataOut: ebx fs r12 r13 r14 r14d r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

fn000000000040A390_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>



word64 fn000000000040A400(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: SCZO ah al ax dh dl dx eax edx rax rdx
// Preserved: rbx rsp
fn000000000040A400_entry:
// DataOut: fs r12 r14 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A400:
	word64 rax_24 = DPB(rax, strlen(rdi), 0)
	branch rax_24 <=u 0x0000000000000001 l000000000040A41A
// DataOut: fs r12 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A40F:
	word64 rdx_33 = rax_24 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rax_24:byte] == 0x2F l000000000040A420
// DataOut: fs r12 r14 r15 r8 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

l000000000040A420:
	rax_24 = rdx_33
	branch rdx_33 != 0x0000000000000001 l000000000040A40F
// DataOut: fs r12 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

l000000000040A429:
	return rdx_33
// DataOut: fs r12 r14 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

l000000000040A41A:
	return rax_24
// DataOut: fs r12 r14 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

fn000000000040A400_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx



void fn000000000040A600(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rsp
fn000000000040A600_entry:
// DataOut: fs rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A600:
	word32 edi_5 = (word32) (uint64) Mem0[rdi + 0x0000000000000018:word32]
// DataOut: edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A430:
	byte dl_15
	word32 eax_9 = (word32) (uint64) ((word32) (uint64) edi_5 & 0x0000F000)
	branch eax_9 == 0x00008000 l000000000040A5B0
// DataOut: eax edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040A5B0:
	dl_15 = 0x2D (alias)
// DataOut: dl edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A442:
	branch eax_9 == 0x00004000 l000000000040A5C0
// DataOut: eax edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5C0:
	dl_15 = 0x64 (alias)
// DataOut: dl edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A44D:
	branch eax_9 == 0x00006000 l000000000040A5D0
// DataOut: eax edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5D0:
	dl_15 = 0x62 (alias)
// DataOut: dl edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A458:
	branch eax_9 == 0x00002000 l000000000040A5A0
// DataOut: eax edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5A0:
	dl_15 = 0x63 (alias)
// DataOut: dl edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A463:
	branch eax_9 == 0x0000A000 l000000000040A5E0
// DataOut: eax edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5E0:
	dl_15 = 0x6C (alias)
// DataOut: dl edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A46E:
	branch eax_9 == 0x00001000 l000000000040A5F0
// DataOut: eax edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5F0:
	dl_15 = 0x70 (alias)
// DataOut: dl edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A479:
	dl_15 = 0x73 (alias)
	branch eax_9 == 0x0000C000 l000000000040A48B
// DataOut: al dl edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A488_1:
	dl_15 = 0x3F (alias)
// DataOut: dl edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x000000000000003F rdx:0x0000000000000073

l000000000040A48B:
	byte al_180
	Mem18[rsi:byte] = dl_15
	Mem30[rsi + 0x0000000000000001:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000100)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem43[rsi + 0x0000000000000002:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000080)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_51 = (word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000040)) - 0x00000001))
	branch (edi_5 & 0x00000800) == 0x00000000 l000000000040A590
// DataOut: al eax edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A590:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4CD:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4D3:
	byte al_168
	Mem57[rsi + 0x0000000000000003:byte] = al_180
	Mem70[rsi + 0x0000000000000004:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000020)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem83[rsi + 0x0000000000000005:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000010)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_91 = (word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000008)) - 0x00000001))
	branch (edi_5 & 0x00000400) == 0x00000000 l000000000040A580
// DataOut: al eax edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A580:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A50E:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A514:
	Mem97[rsi + 0x0000000000000006:byte] = al_168
	Mem110[rsi + 0x0000000000000007:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000004)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem126[rsi + 0x0000000000000008:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000002)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	branch (edi_5 & 0x00000200) == 0x00000000 l000000000040A560
// DataOut: edi fs rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A560:
	Mem151[rsi + 0x000000000000000A:byte] = 0x20
	Mem152[rsi + 0x000000000000000B:byte] = 0x00
	Mem163[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFB5) + 0x00000078)
	return
// DataOut: fs rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A545:
	Mem136[rsi + 0x000000000000000A:byte] = 0x20
	Mem137[rsi + 0x000000000000000B:byte] = 0x00
	Mem148[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFE0) + 0x00000074)
	return
// DataOut: fs rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

fn000000000040A600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax



word64 fn000000000040A610(word64 rdx, word64 rsi, word64 rdi, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040A610_entry:
// DataOut: fs r12 r13 r8 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A610:
	word64 rdx_7
	word64 rsi_8
	word64 rdi_9
	word32 r14d_10
	word64 rax_11 = fn000000000040A630(rdx, rsi, rdi, out rdx_7, out rsi_8, out rdi_9, out r14d_10)
	branch rax_11 == 0x0000000000000000 l000000000040A623
// DataOut: fs r12 r13 r14d r8 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A623:
	fn0000000000410E50()
// DataOut: fs r12 r13 r8 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid>
// Terminates process

l000000000040A628_thunk_fn000000000040A630:
	word64 rdx_25
	word64 rsi_26
	word64 rdi_27
	word32 r14d_28
	return fn000000000040A630(rdx_7, rsi_8, rdi_9, out rdx_25, out rsi_26, out rdi_27, out r14d_28)
// DataOut: fs r12 r13 r14d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn:

l000000000040A61E:
	return rax_11
// DataOut: fs r12 r13 r14d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid>

fn000000000040A610_exit:
// DataOut: r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid>



word64 fn000000000040A630(word64 rdx, word64 rsi, word64 rdi, ptr64 & rdxOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rdi rdx rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040A630_entry:
// DataOut: fs r14d r8 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A630:
	word64 rsi_31
	word64 rax_32 = fn000000000040A390(rdi, out rsi_31)
	word64 rax_35 = fn000000000040A400(rax_32)
	word64 rdx_39 = rax_32 - rdi
	*rdxOut = rdx_39
	word64 r14_10 = 0x0000000000000000
	word64 rsi_43 = rdx_39 + rax_35
	*rsiOut = rsi_43
	branch rax_35 == 0x0000000000000000 l000000000040A679
// DataOut: fs r12 r14 r15 r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A66D:
	r14_10 = (uint64) (Mem0[rax_32 - 0x0000000000000001 + rax_35:byte] != 0x2F) (alias)
// DataOut: fs r12 r14 r15 r8 rbp rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A679:
	word64 rbx_131 = rsi + 0x0000000000000001
	branch Mem0[rsi:byte] == 0x2F l000000000040A700
// DataOut: fs r12 r14 r15 r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A700:
	rbx_131 = rbx_131 + 0x0000000000000000
	branch Mem0[rbx_131:byte] != 0x2F l000000000040A682
// DataOut: fs r12 r14 r15 r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A70D:
	rbx_131 = rbx_131 + 0x0000000000000001
	branch Mem0[rbx_131 + 0x0000000000000001:byte] != 0x2F l000000000040A682
// DataOut: fs r12 r14 r15 r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A71A:
// DataOut: fs r12 r14 r15 r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A682:
	word64 rax_114
	word64 rax_56 = DPB(rax_35, strlen(rbx_131), 0)
	word64 rdi_60 = rsi_43 + 0x0000000000000001 + r14_10 + rax_56
	*rdiOut = rdi_60
	word64 rax_61 = malloc(rdi_60)
	branch rax_61 == 0x0000000000000000 l000000000040A720
// DataOut: fs r12 r13 r14 r15 r8 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0040(64) Local -0048(64)

l000000000040A720:
	rax_114 = 0x0000000000000000
// DataOut: fs r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32)

l000000000040A6A8:
	word64 rax_101 = mempcpy(rax_61, rdi, rsi_43)
	Mem105[rax_101:byte] = 0x2F
	word64 rdi_106 = rax_101 + r14_10
	*rdiOut = rdi_106
	branch rdx == 0x0000000000000000 l000000000040A6D5
// DataOut: fs r13 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0040(64)

l000000000040A6C3:
	Mem125[rdx:word64] = rdi_106 - (uint64) (Mem105[rsi:byte] == 0x2F)
// DataOut: fs r13 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0040(64)

l000000000040A6D5:
	Mem113[mempcpy(rdi_106, rbx_131, rax_56):byte] = 0x00
	word64 rdx_110
	*rdxOut = rax_56
	word64 rsi_111
	*rsiOut = rbx_131
	rax_114 = rax_61
// DataOut: fs r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:Test(EQ,Z) edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32)

l000000000040A6E8:
	word32 r14d_89
	*r14dOut = (word32) r14
	return rax_114
// DataOut: fs r14d r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040A630_exit:
// DataOut: r14d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r14:r14 r12:r12 rbp:rbp rbx:rbx rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:r13 al:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn000000000040A730(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A730_entry:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A730:
	word64 rdx_115 = Mem0[rdi:word64]
	byte cl_118 = (byte) (word32) Mem0[rdx_115:byte]
	branch cl_118 == 0x00 l000000000040A7CD
// DataOut: cl rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A7CD:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A73E:
	byte r8b_129 = 0x00
	word64 rax_100 = 0x0000000000000000
// DataOut: cl r10 r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A776:
	branch r8b_129 != 0x00 l000000000040A750
// DataOut: cl r10 r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:<invalid>

l000000000040A750:
	rsi = (uint64) ((word32) (uint64) ((int32) cl_118 & 0xFFFFFFDF) - 0x00000041)
	r8b_129 = 0x00 (alias)
	branch (word32) rsi <=u 0x00000019 l000000000040A768
// DataOut: cl r10 r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:<invalid>

l000000000040A77B:
	branch cl_118 == 0x2E l000000000040A7B8
// DataOut: cl r10 r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:<invalid>

l000000000040A7B8:
	branch rax_100 == 0x0000000000000000 l000000000040A7C8
// DataOut: r10 rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:<invalid>

l000000000040A7C8:
	rax_100 = rdx_115
// DataOut: r10 rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:<invalid>

l000000000040A7BD:
	r8b_129 = 0x01 (alias)
// DataOut: r10 r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:<invalid>

l000000000040A780:
	word32 esi_104 = (int32) cl_118
	rsi = DPB(rsi, esi_104, 0) (alias)
	branch rsi <=u 0x0000000000000039 l000000000040A768
// DataOut: cl esi r10 r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:<invalid>

l000000000040A78D:
	rsi = (uint64) ((word32) (uint64) (esi_104 & 0xFFFFFFDF) - 0x00000041)
	branch (word32) rsi >u 0x00000019 l000000000040A761
// DataOut: cl r10 r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:(int32) cl r9d:<invalid> rsi:<invalid>

l000000000040A761:
	branch cl_118 == 0x7E l000000000040A768
// DataOut: r10 r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:<invalid>

l000000000040A764_1:
	rax_100 = 0x0000000000000000
// DataOut: r10 r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:<invalid>

l000000000040A768:
	rdx_115 = rdx_115 + 0x0000000000000001
	Mem85[rdi:word64] = rdx_115
	cl_118 = (byte) (word32) Mem85[rdx_115:byte] (alias)
	branch cl_118 == 0x00 l000000000040A7B0
// DataOut: cl r10 r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:<invalid>

l000000000040A798:
	rdx_115 = rdx_115 + 0x0000000000000001
	Mem116[rdi:word64] = rdx_115
	cl_118 = (byte) (word32) Mem116[rdx_115:byte] (alias)
	branch cl_118 != 0x00 l000000000040A776
// DataOut: cl r10 r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> rsi:<invalid>

l000000000040A7A6:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> rsi:<invalid>

l000000000040A7B0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:<invalid>

fn000000000040A730_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> rax:<invalid> r8:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:<invalid>



void fn000000000040AB30(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi esi rax rdi rsi si sil
// Preserved: rbx rsp
fn000000000040AB30_entry:
// DataOut: fs r13 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64) Local -0018(64)

l000000000040AB30:
	branch clock_gettime(0x0000000000000000, rdi) == 0x00000000 l000000000040AB67
// DataOut: fs r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64) Local -0018(64)

l000000000040AB46:
	gettimeofday(fp - 0x0000000000000018, 0x0000000000000000)
	Mem28[rdi:word64] = qwLoc18
	Mem33[rdi + 0x0000000000000008:word64] = qwLoc10 *s 1000
// DataOut: fs r13
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rsi:rdi rbx:rdi rdi:<invalid> eax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l000000000040AB67:
	return
// DataOut: fs r13
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rsi:<invalid> rbx:rdi rdi:<invalid> eax:<invalid> rax:<invalid> -8(fp):rbx

fn000000000040AB30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rbx:rbx rdi:<invalid> eax:<invalid> rax:<invalid> -8(fp):rbx



byte fn000000000040AB70(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: al rsi
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi rax rcx rdi rsi si sil
// Preserved: rsp
fn000000000040AB70_entry:
// DataOut: ebx fs r12 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AB70:
	word64 rsi_3
	*rsiOut = 0x0000000000000000
	word64 rax_6 = setlocale(rdi, 0x0000000000000000)
	branch rax_6 == 0x0000000000000000 l000000000040ABB0
// DataOut: ebx fs r12 r15 r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABB0:
	return 0x01
// DataOut: al ebx fs r12 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>

l000000000040AB80:
	bool Z_30 = (bool) cond(Mem0[rax_6:byte] - 0x43)
	branch Mem0[rax_6:byte] != 0x43 l000000000040AB98
// DataOut: ebx fs r12 r15 r8 rax rbp rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>

l000000000040AB85:
	Z_30 = (bool) cond(Mem0[rax_6 + 0x0000000000000001:byte]) (alias)
	branch Mem0[rax_6 + 0x0000000000000001:byte] != 0x00 l000000000040AB98
// DataOut: ebx fs r12 r15 r8 rax rbp rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>

l000000000040AB98:
	word64 rsi_36
	*rsiOut = rax_6
	word64 rdi_38 = 0x0000000000415E6A
	word64 rcx_40 = 0x0000000000000006
// DataOut: ebx fs r12 r15 r8 rbp rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>

l000000000040ABA5:
	branch rcx_40 == 0x0000000000000000 l000000000040ABA7
// DataOut: ebx fs r12 r15 r8 rbp rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040ABA5_1:
	Z_30 = (bool) cond(Mem0[rsi_93:byte] - Mem0[rdi_94:byte]) (alias)
	*rsiOut = rsi_93 + 0x0000000000000001
	rdi_38 = rdi_94 + 0x0000000000000001
	rcx_40 = rcx_40 - 0x0000000000000001
	word64 rsi_93 = rsi_36
	word64 rdi_94 = rdi_38
	branch Mem0[rsi_93:byte] != Mem0[rdi_94:byte] l000000000040ABA5
// DataOut: ebx fs r12 r15 r8 rbp rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040ABA7:
	return Z_30
// DataOut: al ebx fs r12 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040AB8B:
	return 0x00
// DataOut: al ebx fs r12 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>

fn000000000040AB70_exit:
// DataOut: al rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid> al:Test(NE,Z)



word64 fn000000000040ABC0(word64 rdi, ptr64 & rsiOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: r8 rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040ABC0_entry:
	*rsiOut = rsi
	*r8Out = r8
// DataOut: fs r12 r13 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABC0:
	word64 rdi_128
	branch rdi >u 0x0000000000000009 l000000000040AC4F
// DataOut: fs r12 r13 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC4F:
	rdi_128 = rdi | 0x0000000000000001
	branch (rdi | 0x0000000000000001) != 0xFFFFFFFFFFFFFFFF l000000000040ABCF
// DataOut: fs r12 r13 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC5D:
// DataOut: fs r12 r13 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:rdi | 0x0000000000000001

l000000000040ABCA:
	rdi_128 = 0x000000000000000B
// DataOut: fs r12 r13 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABCF:
// DataOut: fs r12 r13 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040ABE0:
	word64 rcx_101
	branch rdi_128 <=u 0x0000000000000009 l000000000040AC48
// DataOut: fs r12 r13 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC48:
	rcx_101 = 0x0000000000000003
// DataOut: fs r12 r13 r14 r15 r8 rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040ABE6:
	word64 rdx_rax_88 = rdi_128 *u 0x00000000AAAAAAAB
	branch rdi_128 == (rdx_rax_88 >>u 0x0000000000000001) + (rdx_rax_88 >>u 0x0000000000000001) * 0x0000000000000002 l000000000040AC3A
// DataOut: fs r12 r13 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040ABF8:
	word64 r8_102
	*r8Out = 0x0000000000000010
	word64 rsi_100 = 0x0000000000000009
	rcx_101 = 0x0000000000000003
// DataOut: fs r12 r13 r14 r15 r8 rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC21:
	rsi_100 = rsi_100 + r8_102
	*rsiOut = rsi_100
	rcx_101 = rcx_101 + 0x0000000000000002
	branch rsi_100 <u rdi_128 l000000000040AC10
// DataOut: fs r12 r13 r14 r15 r8 rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid>

l000000000040AC10:
	*r8Out = r8_102 + 0x0000000000000008
	branch (uint64) (rdi_128 % rcx_101) == 0x0000000000000000 l000000000040AC3A
// DataOut: fs r12 r13 r14 r15 r8 rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid>

l000000000040AC2D:
	branch (uint64) (rdi_128 % rcx_101) != 0x0000000000000000 l000000000040AC44
// DataOut: fs r12 r13 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC3A:
	rdi_128 = rdi_128 + 0x0000000000000002
	branch rdi_128 != 0xFFFFFFFFFFFFFFFF l000000000040ABE0
// DataOut: fs r12 r13 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC44:
	return rdi_128
// DataOut: fs r12 r13 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

fn000000000040ABC0_exit:
// DataOut: r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r9:0x00000000AAAAAAAB Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>



word64 fn000000000040AC80(word64 rax, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: al rax rsi
// Trashed: SCZO ah al ax di dil eax edi esi rax rdi rsi si sil
// Preserved: rbx rsp
fn000000000040AC80_entry:
// DataOut: fs r12 r13 r13b r14 r15 r15b r8 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC80:
	word64 rsp_11
	word64 rbx_12
	word64 rdi_13
	word64 rsi_14
	word64 rax_15
	byte SCZO_16
	bool C_17
	call Mem0[rdi + 0x0000000000000030:word64] (retsize: 8; depth: 16)
		uses: qwLoc08_4,rbx_6,rdi_8,rsi_10,rsp_2
		defs: C_17,rax_15,rbx_12,rdi_13,rsi_14,rsp_11,SCZO_16
	branch rax_15 >=u Mem0[rbx_12 + 0x0000000000000010:word64] l000000000040AC9D
// DataOut: fs r12 r13 r13b r14 r15 r15b r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC9D:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi rdi:<invalid> rsi:<invalid> -8(fp):rbx

l000000000040AC94:
	return (rax_15 << 0x0000000000000004) + Mem0[rbx_12:word64]
// DataOut: al fs r12 r13 r13b r14 r15 r15b r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi rdi:<invalid> rsi:<invalid> -8(fp):rbx

fn000000000040AC80_exit:
// DataOut: al rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdi:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx



word64 fn000000000040ACB0(word64 rax, word32 ecx, word64 rdx, word64 rsi, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cl ecx rax rdi rdx rsi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi r10 r10b r10d r10w r9 r9b r9d r9w rax rcx rdi rsi si sil
// Preserved: r12 r13 r14 rbp rbx rsp
fn000000000040ACB0_entry:
// DataOut: cl ecx fs r15 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACB0:
	word64 r13_11 = (uint64) ecx
	word64 rsi_28
	word64 rax_29 = fn000000000040AC80(rax, rdi, out rsi_28)
	Mem31[rdx:word64] = rax_29
	byte r13b_119 = (byte) r13_11
	word64 rbp_131 = rdi
	word64 rsi_125 = Mem31[rax_29:word64]
	*rsiOut = rsi_125
	word64 rbx_130 = rax_29
	branch rsi_125 == 0x0000000000000000 l000000000040AD4F
// DataOut: al fs r12 r13b r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACD7:
	branch rsi == rsi_125 l000000000040ACE9
// DataOut: al fs r12 r13b r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACDC:
	word64 rsp_156
	word64 r14_157
	word64 rdx_158
	word64 r13_159
	word32 r13d_160
	word32 ecx_161
	word64 rsi_163
	word64 rdi_165
	word64 rax_167
	byte SZO_168
	bool C_169
	bool Z_170
	byte SCZO_171
	byte al_172
	word32 esi_173
	word64 r9_175
	word64 r10_176
	word64 rcx_177
	word64 r12_162
	call Mem31[rdi + 0x0000000000000038:word64] (retsize: 8; depth: 48)
		uses: al_30,C_37,ecx,esi_33,qwLoc08_4,qwLoc10_9,qwLoc18_16,qwLoc20_21,qwLoc28_26,r10,r12_18,r13_11,r13b_13,r13d_12,r14_6,r9,rax_29,rbp_23,rbx_34,rcx,rdi_155,rdx,rsi_32,rsp_24,SCZO_91,SZO_35,Z_92
		defs: al_172,C_169,ecx_161,esi_173,r10_176,r12_162,r13_159,r13b_174,r13d_160,r14_157,r9_175,rax_167,rbp_164,rbx_166,rcx_177,rdi_165,rdx_158,rsi_163,rsp_156,SCZO_171,SZO_168,Z_170
	branch al_172 == 0x00 l000000000040AD46
// DataOut: fs r12 r13b r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD46:
	word64 rax_200 = Mem31[rbx_130 + 0x0000000000000008:word64]
	branch rax_200 != 0x0000000000000000 l000000000040AD30
// DataOut: al fs r12 r13b r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD30:
	rsi_125 = Mem31[rax_200:word64]
	*rsiOut = rsi_125
	branch rsi_125 == r12_162 l000000000040AD67
// DataOut: al fs r12 r13b r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD38:
	word64 rsp_250
	word64 r14_251
	word64 rdx_252
	word64 r13_253
	word32 r13d_254
	word32 ecx_255
	word64 rsi_257
	word64 rdi_259
	word64 rax_261
	byte SZO_262
	bool C_263
	bool Z_264
	byte SCZO_265
	byte al_266
	word32 esi_267
	word64 r9_269
	word64 r10_270
	word64 rcx_271
	call Mem31[rbp_131 + 0x0000000000000038:word64] (retsize: 8; depth: 48)
		uses: al_201,C_204,ecx_186,esi_206,qwLoc08_4,qwLoc10_9,qwLoc18_16,qwLoc20_21,qwLoc28_26,r10_192,r12_196,r13_197,r13b_183,r13d_187,r14_198,r9_191,rax_200,rbp_195,rbx_194,rcx_193,rdi_249,rdx_188,rsi_205,rsp_199,SCZO_207,SZO_202,Z_208
		defs: al_266,C_263,ecx_255,esi_267,r10_270,r12_256,r13_253,r13b_268,r13d_254,r14_251,r9_269,rax_261,rbp_258,rbx_260,rcx_271,rdi_259,rdx_252,rsi_257,rsp_250,SCZO_265,SZO_262,Z_264
	branch al_266 != 0x00 l000000000040AD60
// DataOut: fs r12 r13b r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD60:
	rax_200 = Mem31[rbx_130 + 0x0000000000000008:word64]
	*rsiOut = Mem31[rax_200:word64]
// DataOut: fs r13b r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD67:
	branch r13b_119 == 0x00 l000000000040AD1C
// DataOut: fs r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD6C:
	Mem232[rbx_130 + 0x0000000000000008:word64] = Mem31[rax_200 + 0x0000000000000008:word64]
	Mem233[rax_200:word64] = 0x0000000000000000
	Mem235[rax_200 + 0x0000000000000008:word64] = Mem233[rbp_131 + 0x0000000000000048:word64]
	Mem236[rbp_131 + 0x0000000000000048:word64] = rax_200
	return rsi_125
// DataOut: fs r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040AD42:
	rbx_130 = Mem31[rbx_130 + 0x0000000000000008:word64]
// DataOut: fs r12 r13b r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD4F:
	word64 rsi_81
	*rsiOut = 0x0000000000000000
	return 0x0000000000000000
// DataOut: fs r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040ACE6:
	*rsiOut = Mem31[rbx_130:word64]
// DataOut: fs r13b r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACE9:
	branch r13b_119 == 0x00 l000000000040AD1C
// DataOut: fs r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACEE:
	word64 rax_141 = Mem31[rbx_130 + 0x0000000000000008:word64]
	branch rax_141 == 0x0000000000000000 l000000000040AD98
// DataOut: fs r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD98:
	Mem154[rbx_130:word64] = 0x0000000000000000
// DataOut: fs r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACFB:
	word64 r10_147 = Mem31[rax_141 + 0x0000000000000008:word64]
	Mem148[rbx_130:word64] = Mem31[rax_141:word64]
	Mem149[rbx_130 + 0x0000000000000008:word64] = r10_147
	Mem150[rax_141:word64] = 0x0000000000000000
	Mem152[rax_141 + 0x0000000000000008:word64] = Mem150[rbp_131 + 0x0000000000000048:word64]
	Mem153[rbp_131 + 0x0000000000000048:word64] = rax_141
// DataOut: fs r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD1C:
	return rsi_125
// DataOut: fs r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 40 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

fn000000000040ACB0_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r14:r14 r13:r13 r12:r12 rbp:rbp rsi:<invalid> rbx:rbx rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14



byte fn000000000040ADB0(word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi
// LiveOut: al
// Trashed: SCZOP ah al ax eax rax xmm0 xmm1 xmm2 xmm3 ymm0 ymm1 ymm2 ymm3
// Preserved: rsp
fn000000000040ADB0_entry:
// DataOut: fs r12 r13 r14 r15 r15d r8 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ADB0:
	word64 rax_4 = Mem0[rdi:word64]
	branch r8 == 0x0000000000415EE0 l000000000040AE30
// DataOut: fs r12 r13 r14 r15 r15d r8 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE30:
// DataOut: al fs r12 r13 r14 r15 r15d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADBB:
	word128 xmm0_37 = DPB(xmm0, Mem0[rax_4 + 0x0000000000000008:real32], 0)
	branch Mem0[rax_4 + 0x0000000000000008:real32] <=u Mem0[0x0000000000415EF4:real32] l000000000040AE20
// DataOut: fs r12 r13 r14 r15 r15d r8 rax rbp rbx rdi rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADC9:
	branch Mem0[0x0000000000415EF8:real32] <=u xmm0_37 l000000000040AE20
// DataOut: fs r12 r13 r14 r15 r15d r8 rax rbp rbx rdi rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid>

l000000000040ADD6:
	branch Mem0[rax_4 + 0x000000000000000C:real32] <=u Mem0[0x0000000000415EFC:real32] l000000000040AE20
// DataOut: fs r12 r13 r14 r15 r15d r8 rax rbp rbx rdi rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADE4:
	branch Mem0[rax_4:real32] <u Mem0[0x0000000000415F00:real32] l000000000040AE20
// DataOut: fs r12 r13 r14 r15 r15d r8 rax rbp rbx rdi rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADF1:
	word128 xmm1_74 = DPB(xmm1, Mem0[rax_4:real32] + Mem0[0x0000000000415EF4:real32], 0)
	word128 xmm2_75 = DPB(xmm2, Mem0[rax_4 + 0x0000000000000004:real32], 0)
	branch Mem0[rax_4 + 0x0000000000000004:real32] <=u xmm1_74 l000000000040AE20
// DataOut: fs r12 r13 r14 r15 r15d r8 rbp rbx rdi rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040AE03:
	branch Mem0[0x0000000000415F04:real32] <u xmm2_75 l000000000040AE20
// DataOut: fs r12 r13 r14 r15 r15d r8 rbp rbx rdi rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid>

l000000000040AE10:
	branch Mem0[rax_4 + 0x0000000000000008:real32] >u xmm1_74 l000000000040AE35
// DataOut: al fs r12 r13 r14 r15 r15d r8 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE35:
	return 0x01
// DataOut: al fs r12 r13 r14 r15 r15d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE1A:
// DataOut: fs r12 r13 r14 r15 r15d r8 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE20:
	Mem52[rdi:word64] = 0x0000000000415EE0
	return 0x00
// DataOut: al fs r12 r13 r14 r15 r15d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

fn000000000040ADB0_exit:
// DataOut: al
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>



word64 fn000000000040AE40(word64 rax, word32 edx, word64 rsi, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx rax rdi rsi
// LiveOut: al eax rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040AE40_entry:
	*rsiOut = rsi
// DataOut: dl ebp edx fs r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AE40:
	byte r15b_8 = (byte) (uint64) edx
	word64 r13_112 = Mem0[rsi:word64]
	branch r13_112 >=u Mem0[rsi + 0x0000000000000008:word64] l000000000040AEEF
// DataOut: fs r12 r13 r14 r15b r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE64:
// DataOut: fs r12 r13 r14 r15b r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE68:
	word64 rbp_128 = Mem0[r13_112:word64]
	branch rbp_128 == 0x0000000000000000 l000000000040AEE1
// DataOut: fs r12 r13 r14 r15b r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE71:
	word64 rbx_115 = Mem0[r13_112 + 0x0000000000000008:word64]
	branch rbx_115 != 0x0000000000000000 l000000000040AE94
// DataOut: fs r12 r13 r14 r15b r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE94:
	word64 rbp_203 = Mem0[rbx_115:word64]
	word64 rsi_206
	rax = fn000000000040AC80(rax, rdi, out rsi_206)
	word64 rdx_211 = Mem0[rbx_115 + 0x0000000000000008:word64]
	branch Mem0[rax:word64] != 0x0000000000000000 l000000000040AE80
// DataOut: fs r12 r13 r14 r15b r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE80:
	Mem242[rbx_115 + 0x0000000000000008:word64] = Mem0[rax + 0x0000000000000008:word64]
	Mem243[rax + 0x0000000000000008:word64] = rbx_115
	branch rdx_211 == 0x0000000000000000 l000000000040AED0
// DataOut: fs r12 r13 r14 r15b r8 rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AEAC:
	Mem227[rax:word64] = rbp_203
	Mem229[rdi + 0x0000000000000018:word64] = Mem227[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	Mem233[rbx_115:word64] = 0x0000000000000000
	rax = Mem233[rdi + 0x0000000000000048:word64]
	Mem236[rbx_115 + 0x0000000000000008:word64] = rax
	Mem237[rdi + 0x0000000000000048:word64] = rbx_115
	branch rdx_211 != 0x0000000000000000 l000000000040AE91
// DataOut: fs r12 r13 r14 r15b r8 rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE91:
	rbx_115 = rdx_211
// DataOut: fs r12 r13 r14 r15b r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AECF:
// DataOut: fs r12 r13 r14 r15b r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AED0:
	rbp_128 = Mem0[r13_112:word64]
// DataOut: fs r12 r13 r14 r15b r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE7A:
// DataOut: fs r12 r13 r14 r15b r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AED4:
	Mem132[r13_112 + 0x0000000000000008:word64] = 0x0000000000000000
	branch r15b_8 == 0x00 l000000000040AF08
// DataOut: fs r12 r13 r14 r15b r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF08:
	word64 rsi_135
	rax = fn000000000040AC80(rax, rdi, out rsi_135)
	branch Mem132[rax:word64] == 0x0000000000000000 l000000000040AF5B
// DataOut: fs r12 r13 r14 r15b r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF5B:
	Mem194[rax:word64] = rbp_128
	Mem196[rdi + 0x0000000000000018:word64] = Mem194[rdi + 0x0000000000000018:word64] + 0x0000000000000001
// DataOut: fs r12 r13 r14 r15b r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF1C:
	rax = Mem132[rdi + 0x0000000000000048:word64]
	branch rax == 0x0000000000000000 l000000000040AF66
// DataOut: fs r12 r13 r14 r15b r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF66:
	rax = malloc(0x0000000000000010)
	branch rax != 0x0000000000000000 l000000000040AF2F
// DataOut: fs r12 r13 r14 r15b r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF75:
	return 0x0000000000000000
// DataOut: al eax ebp fs r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:0x0000000000000010 rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040AF26:
	Mem170[rdi + 0x0000000000000048:word64] = Mem132[rax + 0x0000000000000008:word64]
// DataOut: fs r12 r13 r14 r15b r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF2F:
	word64 rdx_165 = Mem132[rax + 0x0000000000000008:word64]
	Mem166[rax:word64] = rbp_128
	Mem167[rax + 0x0000000000000008:word64] = rdx_165
	Mem168[rax + 0x0000000000000008:word64] = rax
// DataOut: fs r12 r13 r14 r15b r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF3E:
	Mem148[r13_112:word64] = 0x0000000000000000
	Mem150[rsi + 0x0000000000000018:word64] = Mem148[rsi + 0x0000000000000018:word64] - 0x0000000000000001
	r13_112 = r13_112 + 0x0000000000000010
	branch Mem150[rsi + 0x0000000000000008:word64] >u r13_112 l000000000040AE68
// DataOut: fs r12 r13 r14 r15b r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF59:
// DataOut: fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AEE1:
	r13_112 = r13_112 + 0x0000000000000010
	branch Mem0[rsi + 0x0000000000000008:word64] >u r13_112 l000000000040AE68
// DataOut: fs r12 r13 r14 r15b r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AEEF:
	return 0x0000000000000001
// DataOut: al eax ebp fs r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040AE40_exit:
// DataOut: al eax rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r14:r14 r12:r12 r13:r13 rax:<invalid> rbx:rbx rbp:rbp rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040AFB0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: ah al ax eax rax
// Preserved: rsp
fn000000000040AFB0_entry:
// DataOut: rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AFB0:
	return Mem0[rdi + 0x0000000000000020:word64]
// DataOut: rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040AFB0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040B400(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rcx rdi rdx rsi
// LiveOut: eax rax
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3 ymm0 ymm1 ymm2 ymm3
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040B400_entry:
// DataOut: ebx fs r12d r8 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B400:
	word64 r15_179 = rdi
	word32 r15d_8 = (word32) rdi
	word64 r13_19 = rdx
	word64 r12_24 = rcx
	word64 rbp_110 = rsi
	branch rdx != 0x0000000000000000 l000000000040B42E
// DataOut: fs r12 r13 r14 r15 r15d r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B42A_1:
	r13_19 = 0x000000000040AC60
// DataOut: fs r12 r13 r14 r15 r15d r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:rdx r12:rcx rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B42E:
	branch rcx != 0x0000000000000000 l000000000040B43A
// DataOut: fs r12 r13 r14 r15 r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B436_1:
	r12_24 = 0x000000000040AC70
// DataOut: fs r12 r13 r14 r15 r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B43A:
	word64 rax_210
	word64 rax_43 = malloc(0x0000000000000050)
	branch rax_43 == 0x0000000000000000 l000000000040B598
// DataOut: fs r12 r13 r14 r15 r15d r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B598:
	rax_210 = 0x0000000000000000
// DataOut: eax fs rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B44B:
	branch rsi != 0x0000000000000000 l000000000040B45B
// DataOut: fs r12 r13 r14 r15 r15d r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B457_1:
	rbp_110 = 0x0000000000415EE0
// DataOut: fs r12 r13 r14 r15 r15d r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B45B:
	Mem111[rax_43 + 0x0000000000000028:word64] = rbp_110
	branch fn000000000040ADB0(rax_43 + 0x0000000000000028, r8) == 0x00 l000000000040B548
// DataOut: fs r12 r13 r14 r15 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B46C:
	word128 xmm1_155 = DPB(xmm1, Mem111[rbp_110 + 0x0000000000000008:real32], 0)
	branch Mem111[rbp_110 + 0x0000000000000010:byte] != 0x00 l000000000040B4C0
// DataOut: fs r12 r13 r14 r15 r15d rbx xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B477:
	word128 xmm0_217
	branch rdi < 0x0000000000000000 l000000000040B578
// DataOut: fs r12 r13 r14 r15d rbx xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B578:
	r15_179 = (uint64) (r15d_8 & 0x00000001)
	real32 v33_250 = (real32) (rdi >>u 0x0000000000000001 | r15_179)
	xmm0_217 = DPB(xmm0, v33_250 + DPB(xmm0, v33_250, 0), 0)
// DataOut: fs r12 r13 r14 rbx xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B480:
	xmm0_217 = DPB(xmm0, (real32) rdi, 0)
// DataOut: fs r12 r13 r14 rbx xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B485:
	real32 v26_221 = (real32) xmm0_217 / xmm1_155
	branch v26_221 >=u Mem111[0x0000000000415F08:real32] l000000000040B540
// DataOut: fs r12 r13 r14 rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B496:
	branch v26_221 <u Mem111[0x0000000000415F0C:real32] l000000000040B568
// DataOut: fs r12 r13 r14 rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B568:
	r15_179 = DPB(r15_179, v26_221, 0) (alias)
// DataOut: fs r12 r13 r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4A3:
	r15_179 = DPB(r15_179, v26_221 - Mem111[0x0000000000415F0C:real32], 0) ^ 0x0000000000000000
// DataOut: fs r12 r13 r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4C0:
	word64 rsi_181
	word64 r8_182
	word64 rax_183 = fn000000000040ABC0(r15_179, out rsi_181, out r8_182)
	branch rax_183 >u 0x00000000FFFFFFFF l000000000040B540
// DataOut: fs r12 r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B540:
	Mem171[rax_43 + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: fs rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4DA:
	Mem191[rax_43 + 0x0000000000000010:word64] = rax_183
	branch rax_183 == 0x0000000000000000 l000000000040B548
// DataOut: fs r12 r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x00000000FFFFFFFF r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4E3:
	word64 rax_194 = calloc(rax_183, 0x0000000000000010)
	Mem200[rax_43:word64] = rax_194
	branch rax_194 == 0x0000000000000000 l000000000040B548
// DataOut: fs r12 r13 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x00000000FFFFFFFF r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B548:
	free(rax_43)
	return 0x0000000000000000
// DataOut: eax ebx fs r12d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040B4F8:
	Mem202[rax_43 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem203[rax_43 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem206[rax_43 + 0x0000000000000030:word64] = r13_19
	Mem207[rax_43 + 0x0000000000000038:word64] = r12_24
	Mem208[rax_43 + 0x0000000000000008:word64] = rax_194 + (rax_183 << 0x0000000000000004)
	Mem209[rax_43 + 0x0000000000000040:word64] = r8
	Mem213[rax_43 + 0x0000000000000048:word64] = 0x0000000000000000
	rax_210 = rax_43
// DataOut: eax fs rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B52A:
	return rax_210
// DataOut: eax ebx fs r12d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040B400_exit:
// DataOut: eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r15:r15 rdi:<invalid> r14:r14 r13:r13 r12:r12 rbp:rbp rbx:rbx xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn000000000040B640(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: r12 rbp rbx rdi rsp
fn000000000040B640_entry:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B640:
	word64 rax_107
	word64 rbp_104 = rdi
	branch Mem0[rdi + 0x0000000000000040:word64] == 0x0000000000000000 l000000000040B655
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B64E:
	branch Mem0[rdi + 0x0000000000000020:word64] != 0x0000000000000000 l000000000040B6C6
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6C6:
	word64 r12_105 = Mem0[rdi:word64]
	branch r12_105 >=u Mem0[rdi + 0x0000000000000008:word64] l000000000040B693
// DataOut: r12 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6CF:
// DataOut: r12 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6D0:
	word64 rdi_94 = Mem0[r12_105:word64]
	branch rdi_94 != 0x0000000000000000 l000000000040B6E3
// DataOut: r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6E3:
	word64 rsp_111
	word64 rdi_114
	word64 rbx_115
	byte SCZO_116
	bool Z_117
	word64 rax_118
	bool C_119
	byte SZO_120
	byte CZ_121
	call Mem0[rbp_104 + 0x0000000000000040:word64] (retsize: 8; depth: 32)
		uses: C_98,CZ_90,qwLoc08_4,qwLoc10_7,qwLoc18_12,r12_92,rax_88,rbp_91,rbx_95,rdi_94,rsp_93,SCZO_89,SZO_96,Z_97
		defs: C_119,CZ_121,r12_112,rax_118,rbp_113,rbx_115,rdi_114,rsp_111,SCZO_116,SZO_120,Z_117
	branch Mem0[rbx_115 + 0x0000000000000008:word64] != 0x0000000000000000 l000000000040B6E0
// DataOut: r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6E0:
// DataOut: r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6DC:
// DataOut: r12 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6EF:
	rax_107 = Mem0[rbp_104 + 0x0000000000000008:word64]
	r12_105 = r12_105 + 0x0000000000000010
	branch rax_107 >u r12_105 l000000000040B6D0
// DataOut: r12 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6FC:
// DataOut: rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B655:
	rax_107 = Mem0[rdi + 0x0000000000000008:word64]
// DataOut: rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B659:
	word64 r12_52 = Mem0[rbp_104:word64] + 0x0000000000000008
	branch r12_52 >=u rax_107 l000000000040B693
// DataOut: r12 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B662:
// DataOut: r12 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B668:
	word64 rdi_59 = Mem0[r12_52 + 0x0000000000000000:word64]
	branch rdi_59 != 0x0000000000000000 l000000000040B67B
// DataOut: r12 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B67B:
	word64 rbx_72 = Mem0[rdi_59 + 0x0000000000000008:word64]
	free(rdi_59)
	branch rbx_72 != 0x0000000000000000 l000000000040B678
// DataOut: r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B678:
	rdi_59 = rbx_72
// DataOut: r12 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B672:
// DataOut: r12 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B689:
	r12_52 = r12_52 + 0x0000000000000010
	branch Mem0[rbp_104 + 0x0000000000000008:word64] >u r12_52 l000000000040B668
// DataOut: r12 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B693:
	word64 rdi_23 = Mem0[rbp_104 + 0x0000000000000048:word64]
	branch rdi_23 != 0x0000000000000000 l000000000040B6A3
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6A3:
	word64 rbx_39 = Mem0[rdi_23 + 0x0000000000000008:word64]
	free(rdi_23)
	branch rbx_39 != 0x0000000000000000 l000000000040B6A0
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6A0:
	rdi_23 = rbx_39
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B69C:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6B1:
	free(Mem0[rbp_104:word64])
	free(rbp_104)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040B640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp r12:r12 rax:<invalid> rdi:rdi rbx:rbx -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040B710(word64 rsi, word64 rdi, ptr64 & rsiOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi rsi
// LiveOut: al r8 rax rsi
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 ymm0 ymm1
// Preserved: r12 rbp rbx rsp
fn000000000040B710_entry:
	*rsiOut = rsi
	*r8Out = r8
// DataOut: esi fs r13 r14 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B710:
	word64 rbp_15 = Mem0[rdi + 0x0000000000000028:word64]
	word128 xmm1_19 = DPB(xmm1, Mem0[rbp_15 + 0x0000000000000008:real32], 0)
	branch Mem0[rbp_15 + 0x0000000000000010:byte] != 0x00 l000000000040B770
// DataOut: esi fs r13 r14 r15 r8 rbx rsi xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B72A:
	word128 xmm0_246
	branch rsi < 0x0000000000000000 l000000000040B8D0
// DataOut: esi fs r13 r14 r15 r8 rbx rsi xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B8D0:
	rsi = (uint64) (esi & 0x00000001)
	*rsiOut = rsi
	real32 v28_285 = (real32) (rsi >>u 0x0000000000000001 | rsi)
	xmm0_246 = DPB(xmm0, v28_285 + DPB(xmm0, v28_285, 0), 0)
// DataOut: fs r13 r14 r15 r8 rbx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B733:
	xmm0_246 = DPB(xmm0, (real32) rsi, 0)
// DataOut: fs r13 r14 r15 r8 rbx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B738:
	real32 v16_251 = (real32) xmm0_246 / xmm1_19
	branch v16_251 >=u Mem0[0x0000000000415F08:real32] l000000000040B870
// DataOut: fs r13 r14 r15 r8 rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B749:
	branch v16_251 <u Mem0[0x0000000000415F0C:real32] l000000000040B880
// DataOut: fs r13 r14 r15 rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B880:
	rsi = DPB(rsi, v16_251, 0) (alias)
// DataOut: fs r13 r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B756:
	rsi = DPB(rsi, v16_251 - Mem0[0x0000000000415F0C:real32], 0) ^ 0x0000000000000000
// DataOut: fs r13 r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B770:
	word64 rsi_109
	word64 r8_110
	word64 rax_111 = fn000000000040ABC0(rsi, out rsi_109, out r8_110)
	branch rax_111 >u 0x00000000FFFFFFFF || rax_111 <u 0x0000000000000001 l000000000040B870
// DataOut: fs r12 r13 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B792:
	branch Mem0[rdi + 0x0000000000000010:word64] == rax_111 l000000000040B860
// DataOut: fs r12 r13 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B860:
	return 0x0000000000000001
// DataOut: al fs r13 r14 r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B79C:
	word64 rsi_120
	*rsiOut = 0x0000000000000010
	word64 rax_123 = calloc(rax_111, 0x0000000000000010)
	branch rax_123 == 0x0000000000000000 l000000000040B870
// DataOut: fs r12 r13 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0068(64)

l000000000040B870:
	return 0x0000000000000000
// DataOut: al fs r13 r14 r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B7B6:
	word64 rax_149 = Mem0[rdi + 0x0000000000000048:word64]
	word64 rsi_151
	word64 rax_152 = fn000000000040AE40(rax_149, 0x00000000, rdi, fp - 0x0000000000000068, out rsi_151)
	word64 rax_134 = rax_123 + (rax_111 << 0x0000000000000004)
	word32 ebp_159 = (word32) (uint64) (word32) rax_152
	branch (byte) rax_152 != 0x00 l000000000040B890
// DataOut: ebp fs r13 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:0x0000000000000010 xmm0:<invalid> esi:0x00000010 r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64) Local -0058(64) Local -0060(64) Local -0068(64)

l000000000040B890:
	free(Mem0[rdi:word64])
	Mem210[rdi:word64] = rax_123
	Mem212[rdi + 0x0000000000000008:word64] = rax_134
	Mem214[rdi + 0x0000000000000010:word64] = rax_111
	Mem216[rdi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem218[rdi + 0x0000000000000048:word64] = rax_149
	return (uint64) ebp_159
// DataOut: al fs r13 r14 r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B815:
	Mem165[rdi + 0x0000000000000048:word64] = rax_149
	word64 rsi_166
	word64 rax_167 = fn000000000040AE40(rax_149, 0x00000001, fp - 0x0000000000000068, rdi, out rsi_166)
	branch (byte) rax_167 == 0x00 l000000000040B8EA
// DataOut: ebp fs r13 r14 r15 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0068(64)

l000000000040B836:
	word64 rsi_190
	branch (byte) fn000000000040AE40(rax_167, 0x00000000, fp - 0x0000000000000068, rdi, out rsi_190) == 0x00 l000000000040B8EA
// DataOut: ebp fs r13 r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0068(64)

l000000000040B8EA:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B84B:
	free(rax_123)
	return (uint64) ebp_159
// DataOut: al fs r13 r14 r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040B710_exit:
// DataOut: al r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rbp:rbp xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:r12 rax:(uint64) ebp xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn000000000040B8F0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rax rdi rdx rsi
// LiveOut: eax rsi
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3 ymm0 ymm1 ymm2 ymm3
// Preserved: r12 rbp rbx rsp
fn000000000040B8F0_entry:
// DataOut: fs r13 r14 r15 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040B8F0:
	branch rsi == 0x0000000000000000 l000000000040BA67
// DataOut: fs r13 r14 r15 r8 rax rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040B904:
	word32 eax_117
	word64 rsi_66
	word64 rax_67 = fn000000000040ACB0(rax, 0x00000000, fp - 0x0000000000000020, rsi, rdi, out rsi_66)
	branch rax_67 == 0x0000000000000000 l000000000040B938
// DataOut: fs r12 r13 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B938:
	word128 xmm0_157
	word64 rax_151 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_152 = (word32) rax_151
	branch rax_151 < 0x0000000000000000 l000000000040BA70
// DataOut: eax fs r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA70:
	real32 v27_394 = (real32) (rax_151 >>u 0x0000000000000001 | (uint64) (eax_152 & 0x00000001))
	xmm0_157 = DPB(xmm0, v27_394 + DPB(xmm0, v27_394, 0), 0)
// DataOut: fs r13 r14 r15 r8 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B945:
	xmm0_157 = DPB(xmm0, (real32) rax_151, 0)
// DataOut: fs r13 r14 r15 r8 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B94A:
	word128 xmm1_165
	word64 rax_158 = Mem0[rdi + 0x0000000000000010:word64]
	word32 eax_159 = (word32) rax_158
	word64 rdx_161 = Mem0[rdi + 0x0000000000000028:word64]
	branch rax_158 < 0x0000000000000000 l000000000040BA90
// DataOut: eax fs r13 r14 r15 r8 rbp rbx rdx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA90:
	real32 v46_382 = (real32) (rax_158 >>u 0x0000000000000001 | (uint64) (eax_159 & 0x00000001))
	xmm1_165 = DPB(xmm1, v46_382 + DPB(xmm1, v46_382, 0), 0)
// DataOut: fs r13 r14 r15 r8 rbp rbx rdx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B95B:
	xmm1_165 = DPB(xmm1, (real32) rax_158, 0)
// DataOut: fs r13 r14 r15 r8 rbp rbx rdx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B960:
	branch (real32) xmm0_157 >u DPB(xmm1_165, (real32) xmm1_165 * Mem0[rdx_161 + 0x0000000000000008:real32], 0) l000000000040B9C8
// DataOut: fs r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9C8:
	word128 xmm0_279
	fn000000000040ADB0(rdi + 0x0000000000000028, r8)
	word64 rax_271 = Mem0[rdi + 0x0000000000000010:word64]
	word64 rdx_274 = Mem0[rdi + 0x0000000000000028:word64]
	word32 eax_272 = (word32) rax_271
	word128 xmm2_278 = DPB(xmm2, Mem0[rdx_274 + 0x0000000000000008:real32], 0)
	branch rax_271 < 0x0000000000000000 l000000000040BAE7
// DataOut: eax fs r13 r14 r15 rbp rbx rdx rsi xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BAE7:
	real32 v44_370 = (real32) (rax_271 >>u 0x0000000000000001 | (uint64) (eax_272 & 0x00000001))
	xmm0_279 = DPB(xmm0_157, v44_370 + DPB(xmm0_157, v44_370, 0), 0)
// DataOut: fs r13 r14 r15 rbp rbx rdx rsi xmm0 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9E7:
	xmm0_279 = DPB(xmm0_157, (real32) rax_271, 0)
// DataOut: fs r13 r14 r15 rbp rbx rdx rsi xmm0 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9EC:
	word128 xmm1_287
	word64 rax_281 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_282 = (word32) rax_281
	branch rax_281 < 0x0000000000000000 l000000000040BB01
// DataOut: eax fs r13 r14 r15 rbp rbx rdx rsi xmm0 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BB01:
	real32 v41_358 = (real32) (rax_281 >>u 0x0000000000000001 | (uint64) (eax_282 & 0x00000001))
	xmm1_287 = DPB(xmm1_165, v41_358 + DPB(xmm1_165, v41_358, 0), 0)
// DataOut: fs r13 r14 r15 rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9F9:
	xmm1_287 = DPB(xmm1_165, (real32) rax_281, 0)
// DataOut: fs r13 r14 r15 rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9FE:
	branch (real32) xmm1_287 <=u DPB(xmm2, Mem0[rdx_274 + 0x0000000000000008:real32] * xmm0_279, 0) l000000000040B96A
// DataOut: fs r13 r14 r15 rbp rbx rdx rsi xmm0 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA0E:
	real32 v37_301 = (real32) xmm0_279 * Mem0[rdx_274 + 0x000000000000000C:real32]
	word128 xmm0_302 = DPB(xmm0_279, v37_301, 0)
	branch Mem0[rdx_274 + 0x0000000000000010:byte] != 0x00 l000000000040BA1D
// DataOut: fs r13 r14 r15 rbp rbx rsi xmm0 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA19:
	xmm0_302 = DPB(xmm0_279, v37_301 * xmm2_278, 0)
// DataOut: fs r13 r14 r15 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA1D:
	branch (real32) xmm0_302 >=u Mem0[0x0000000000415F08:real32] l000000000040BB2E
// DataOut: fs r13 r14 r15 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA2A:
	word64 rsi_314
	branch (real32) xmm0_302 >=u Mem0[0x0000000000415F0C:real32] l000000000040BAC8
// DataOut: fs r13 r14 r15 rbp rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BAC8:
	rsi_314 = DPB(rsi_66, (real32) xmm0_302 - Mem0[0x0000000000415F0C:real32], 0) ^ 0x0000000000000000
// DataOut: esi fs r13 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA37:
	rsi_314 = DPB(rsi_66, (int32) xmm0_302, 0) (alias)
// DataOut: esi fs r13 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA3C:
	word64 rsi_316
	word64 r8_317
	word64 rax_318 = fn000000000040B710(rsi_314, rdi, out rsi_316, out r8_317)
	branch (byte) rax_318 == 0x00 l000000000040BB2E
// DataOut: fs r13 r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA4C:
	word64 rsi_332
	branch fn000000000040ACB0(rax_318, 0x00000000, fp - 0x0000000000000020, rsi, rdi, out rsi_332) == 0x0000000000000000 l000000000040B96A
// DataOut: fs r13 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA67:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:<invalid> r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B96A:
	branch Mem0[qwLoc20:word64] == 0x0000000000000000 l000000000040BAB0
// DataOut: fs r12 r13 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BAB0:
	Mem260[qwLoc20:word64] = rsi
	Mem265[rdi + 0x0000000000000020:word64] = Mem260[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	Mem267[rdi + 0x0000000000000018:word64] = Mem265[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	eax_117 = 0x00000001 (alias)
// DataOut: eax fs r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B97A:
	word64 rax_223 = Mem0[rdi + 0x0000000000000048:word64]
	branch rax_223 == 0x0000000000000000 l000000000040BB1B
// DataOut: fs r12 r13 r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BB1B:
	rax_223 = malloc(0x0000000000000010)
	branch rax_223 != 0x0000000000000000 l000000000040B98F
// DataOut: fs r12 r13 r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BB2E:
	eax_117 = 0xFFFFFFFF (alias)
// DataOut: eax fs r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B987:
	Mem252[rdi + 0x0000000000000048:word64] = Mem0[rax_223 + 0x0000000000000008:word64]
// DataOut: fs r12 r13 r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B98F:
	word64 rdx_234 = Mem0[qwLoc20 + 0x0000000000000008:word64]
	Mem235[rax_223:word64] = rsi
	Mem236[rax_223 + 0x0000000000000008:word64] = rdx_234
	Mem237[qwLoc20 + 0x0000000000000008:word64] = rax_223
	Mem242[rdi + 0x0000000000000020:word64] = Mem237[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	return 0x00000001
// DataOut: eax fs r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B91B:
	branch rdx == 0x0000000000000000 l000000000040B9B8
// DataOut: fs r12 r13 r14 r15 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B9B8:
	return 0x00000000
// DataOut: eax fs r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B924:
	Mem132[rdx:word64] = rax_67
	eax_117 = 0x00000000 (alias)
// DataOut: eax fs r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B92A:
	return eax_117
// DataOut: eax fs r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040B8F0_exit:
// DataOut: eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp r12:r12 rdx:<invalid> rcx:<invalid> rbx:rbx rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040BB50(word64 rax, word64 rsi, word64 rdi, word64 r8, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rax rdi rsi
// LiveOut: eax rax rsi
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3 ymm0 ymm1 ymm2 ymm3
// Preserved: rbx rsp
fn000000000040BB50_entry:
// DataOut: ebx fs r12 r13 r14 r15 r8 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64)

l000000000040BB50:
	word64 rax_21
	word64 rsi_13
	word32 eax_14 = fn000000000040B8F0(rax, fp - 0x0000000000000010, rsi, rdi, r8, out rsi_13)
	branch eax_14 == 0xFFFFFFFF l000000000040BB80
// DataOut: eax fs r12 r13 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32) Local -0010(64)

l000000000040BB80:
	rax_21 = 0x0000000000000000
// DataOut: eax fs r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rcx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l000000000040BB67:
	rax_21 = rsi
	branch eax_14 != 0x00000000 l000000000040BB72
// DataOut: eax fs r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rcx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32) Local -0010(64)

l000000000040BB6C_1:
	rax_21 = qwLoc10
// DataOut: eax fs r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rax:rsi rcx:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l000000000040BB72:
	return rax_21
// DataOut: eax ebx fs r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx

fn000000000040BB50_exit:
// DataOut: eax rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx



word64 fn000000000040BB90(word64 rax, word64 rsi, word64 rdi, word64 r8, ptr64 & rsiOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rax rdi rsi
// LiveOut: r8 rax rsi
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3 ymm0 ymm1 ymm2 ymm3
// Preserved: r12 rbp rbx rsp
fn000000000040BB90_entry:
	*r8Out = r8
// DataOut: fs r15 r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040BB90:
	word64 rsi_20
	word64 rax_207 = fn000000000040ACB0(rax, 0x00000001, fp - 0x0000000000000020, rsi, rdi, out rsi_20)
	branch rax_207 == 0x0000000000000000 l000000000040BD08
// DataOut: fs r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040BD08:
	rax_207 = 0x0000000000000000
// DataOut: fs r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:fp - 0x0000000000000020 rbp:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBB6:
	Mem89[rdi + 0x0000000000000020:word64] = Mem0[rdi + 0x0000000000000020:word64] - 0x0000000000000001
	branch Mem89[qwLoc20:word64] == 0x0000000000000000 l000000000040BBD0
// DataOut: fs r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:fp - 0x0000000000000020 rbp:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBD0:
	word128 xmm0_111
	word64 rax_103 = Mem89[rdi + 0x0000000000000018:word64]
	Mem110[rdi + 0x0000000000000018:word64] = rax_103 - 0x0000000000000001
	word32 eax_105 = (word32) (rax_103 - 0x0000000000000001)
	branch rax_103 < 0x0000000000000001 l000000000040BCE8
// DataOut: eax fs r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCE8:
	real32 v26_289 = (real32) (rax_103 - 0x0000000000000001 >>u 0x0000000000000001 | (uint64) (eax_105 & 0x00000001))
	xmm0_111 = DPB(xmm0, v26_289 + DPB(xmm0, v26_289, 0), 0)
// DataOut: fs r15 r8 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBE5:
	xmm0_111 = DPB(xmm0, (real32) (rax_103 - 0x0000000000000001), 0)
// DataOut: fs r15 r8 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBEA:
	word128 xmm1_122
	word64 rax_112 = Mem110[rdi + 0x0000000000000010:word64]
	word32 eax_113 = (word32) rax_112
	word64 rdx_115 = Mem110[rdi + 0x0000000000000028:word64]
	branch rax_112 < 0x0000000000000000 l000000000040BCC8
// DataOut: eax fs r15 r8 rbp rbx rdx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCC8:
	real32 v34_277 = (real32) (rax_112 >>u 0x0000000000000001 | (uint64) (eax_113 & 0x00000001))
	xmm1_122 = DPB(xmm1, v34_277 + DPB(xmm1, v34_277, 0), 0)
// DataOut: fs r15 r8 rbp rbx rdx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBFB:
	xmm1_122 = DPB(xmm1, (real32) rax_112, 0)
// DataOut: fs r15 r8 rbp rbx rdx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC00:
	branch (real32) xmm1_122 * Mem110[rdx_115:real32] >u xmm0_111 l000000000040BC18
// DataOut: fs r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC18:
	word128 xmm0_169
	fn000000000040ADB0(rdi + 0x0000000000000028, r8)
	word64 rdx_159 = Mem110[rdi + 0x0000000000000010:word64]
	word32 edx_160 = (word32) rdx_159
	word64 rax_162 = Mem110[rdi + 0x0000000000000028:word64]
	branch rdx_159 < 0x0000000000000000 l000000000040BD2F
// DataOut: edx fs r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BD2F:
	real32 v37_265 = (real32) (rdx_159 >>u 0x0000000000000001 | (uint64) (edx_160 & 0x00000001))
	xmm0_169 = DPB(xmm0_111, v37_265 + DPB(xmm0_111, v37_265, 0), 0)
// DataOut: fs r15 r8 rax rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC32:
	xmm0_169 = DPB(xmm0_111, (real32) rdx_159, 0)
// DataOut: fs r15 r8 rax rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC37:
	word128 xmm1_177
	word64 rdx_170 = Mem110[rdi + 0x0000000000000018:word64]
	word32 edx_171 = (word32) rdx_170
	branch rdx_170 < 0x0000000000000000 l000000000040BD49
// DataOut: edx fs r15 r8 rax rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BD49:
	real32 v39_253 = (real32) (rdx_170 >>u 0x0000000000000001 | (uint64) (edx_171 & 0x00000001))
	xmm1_177 = DPB(xmm1_122, v39_253 + DPB(xmm1_122, v39_253, 0), 0)
// DataOut: fs r15 r8 rax rbp rbx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC44:
	xmm1_177 = DPB(xmm1_122, (real32) rdx_170, 0)
// DataOut: fs r15 r8 rax rbp rbx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC49:
	branch Mem110[rax_162:real32] * xmm0_169 <=u xmm1_177 l000000000040BC09
// DataOut: fs r15 r8 rax rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC56:
	real32 v32_190 = (real32) xmm0_169 * Mem110[rax_162 + 0x0000000000000004:real32]
	word128 xmm0_191 = DPB(xmm0_169, v32_190, 0)
	branch Mem110[rax_162 + 0x0000000000000010:byte] != 0x00 l000000000040BC66
// DataOut: fs r15 rax rbp rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC61:
	xmm0_191 = DPB(xmm0_169, v32_190 * Mem110[rax_162 + 0x0000000000000008:real32], 0)
// DataOut: fs r15 rbp rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC66:
	word64 rsi_199
	branch (real32) xmm0_191 >=u Mem110[0x0000000000415F0C:real32] l000000000040BD10
// DataOut: fs r15 rbp rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BD10:
	rsi_199 = DPB(rsi_20, (real32) xmm0_191 - Mem110[0x0000000000415F0C:real32], 0) ^ 0x0000000000000000
// DataOut: esi fs r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC73:
	rsi_199 = DPB(rsi_20, (int32) xmm0_191, 0) (alias)
// DataOut: esi fs r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC78:
	word64 rsi_201
	word64 r8_202
	branch (byte) (uint64) (word32) fn000000000040B710(rsi_199, rdi, out rsi_201, out r8_202) != 0x00 l000000000040BBC6
// DataOut: fs r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC8D:
	word64 rdi_213 = Mem110[rdi + 0x0000000000000048:word64]
	branch rdi_213 != 0x0000000000000000 l000000000040BCA3
// DataOut: fs r15 r8 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCA3:
	word64 r12_227 = Mem110[rdi_213 + 0x0000000000000008:word64]
	free(rdi_213)
	branch r12_227 != 0x0000000000000000 l000000000040BCA0
// DataOut: fs r12 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r12:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCA0:
	rdi_213 = r12_227
// DataOut: fs r15 r8 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r12:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC96:
// DataOut: fs r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCB1:
	Mem222[rdi + 0x0000000000000048:word64] = 0x0000000000000000
// DataOut: fs r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r12:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC09:
	return rax_207
// DataOut: fs r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040BBC6:
	return rax_207
// DataOut: fs r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040BB90_exit:
// DataOut: r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rbx:rbx rdx:<invalid> rbp:rbp rax:<invalid> r12:r12 rsi:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040BD70(word64 rcx, word32 edx, word64 rsi, word64 rdi, word64 r8, selector fs, ptr64 & r8Out, ptr64 & r15dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs r8 rcx rdi rsi
// LiveOut: r15d r8 rax
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsi rsp
fn000000000040BD70_entry:
	def fp
	def r15
	def edx
	def r14
	def rsi
	def r13
	def r12
	def rdi
	def rbp
	def rbx
	def rcx
	def r8
	def fs
	def Mem0
	def bLocC8
	def r8Out
	def r15dOut
	def dwLoc8C
	def qwLocA8
	def qwLocB0
	def r9
	def r9d
	def rLoc4
	def tLocF0
	def P
	def wLoc82
	def wLoc84
	def dl
	def CZP
	def O
	def rLocA8
	def rLoc3
	def rLoc2
	def qwLoc80
	def rLoc1
	def rLocE8
	def sil
	def r10
	def r10d
	def r10b
	def esi
	def S
	def ecx
	def cl
	def rdx_rax
	def edx_eax
	def ah
	def ax
	def al
	rsp_1 = fp
// DataOut: edx fs r15d r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -00F0(0)

l000000000040BD70:
	rsp_2 = fp - 8
	qwLoc08_4 = r15
	rax_6 = (uint64) edx
	eax_7 = (word32) rax_6 (alias)
	rax_8 = (uint64) (eax_7 & 0x00000003)
	eax_9 = (word32) rax_8 (alias)
	rsp_10 = fp - 16
	qwLoc10_12 = r14
	r14_14 = rsi
	r14d_15 = (word32) r14_14 (alias)
	rsp_16 = fp - 24
	qwLoc18_18 = r13
	rsp_19 = fp - 32
	qwLoc20_21 = r12
	r12_23 = rdi
	r12d_24 = (word32) r12_23 (alias)
	rsp_25 = fp - 40
	qwLoc28_27 = rbp
	rsp_28 = fp - 48
	qwLoc30_30 = rbx
	rbx_32 = rcx
	ebx_33 = (word32) rbx_32 (alias)
	rsp_34 = fp - 232
	dwLocB0_35 = eax_9
	rax_36 = (uint64) edx
	eax_37 = (word32) rax_36 (alias)
	qwLocB8_38 = rsi
	rax_39 = (uint64) (eax_37 & 0x00000020)
	eax_40 = (word32) rax_39 (alias)
	dwLocC8_41 = edx
	qwLocC0_43 = r8
	rcx_46 = Mem0[fs:0x00000028:word64]
	qwLoc40_47 = rcx_46
	rcx_48 = 0x0000000000000000
	SCZO_49 = cond(eax_40 - 0x00000001)
	C_50 = (bool) SCZO_49 (alias)
	dwLoc90_51 = eax_40
	rax_52 = (uint64) (0x00000000 - C_50)
	eax_53 = (word32) rax_52 (alias)
	dwLocC4_54 = eax_53
	v21_55 = dwLocC4_54 & 0xFFFFFFE8
	dwLocC4_56 = v21_55
	SZO_57 = cond(dwLocC4_56)
	v22_58 = dwLocC4_56 + 0x00000400
	dwLocC4_59 = v22_58
	rax_60 = localeconv()
	r15_61 = Mem0[rax_60:word64]
	r15d_62 = (word32) r15_61 (alias)
	r13_63 = rax_60
	rdi_64 = r15_61
	eax_65 = strlen(rdi_64)
	rax_66 = DPB(rax_60, eax_65, 0) (alias)
	rbp_67 = Mem0[r13_63 + 0x0000000000000010:word64]
	r11_68 = rax_66
	r13_69 = Mem0[r13_63 + 0x0000000000000008:word64]
	rax_70 = rax_66 - 0x0000000000000001
	rdx_71 = 0x0000000000000001
	SCZO_72 = cond(rax_70 - 0x0000000000000010)
	C_73 = (bool) SCZO_72 (alias)
	rdi_74 = r13_69
	edi_75 = (word32) rdi_74 (alias)
	dil_76 = (byte) rdi_74 (alias)
	rax_77 = 0x0000000000413990
	branch rax_70 <u 0x0000000000000010 l000000000040BE0E
// DataOut: bx fs r11 r12 r12d r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32) Local -00F0(0)

l000000000040BE06_1:
	r11_1701 = 0x0000000000000001
// DataOut: bx fs r11 r12 r12d r13 r14 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32) Local -00F0(0)

l000000000040BE0A_1:
	r15_1702 = 0x0000000000413990
	r15d_1703 = (word32) r15_1702 (alias)
// DataOut: bx fs r11 r12 r12d r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:0x0000000000000001 rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32) Local -00F0(0)

l000000000040BE0E:
	r11_78 = PHI((r11_68, l000000000040BD70), (r11_1701, l000000000040BE0A_1))
	r15_79 = PHI((r15_61, l000000000040BD70), (r15_1702, l000000000040BE0A_1))
	r15d_80 = PHI((r15d_62, l000000000040BD70), (r15d_1703, l000000000040BE0A_1))
	qwLoc98_81 = r11_78
	eax_82 = strlen(rdi_74)
	rax_83 = DPB(rax_77, eax_82, 0) (alias)
	SCZO_84 = cond(rax_83 - 0x0000000000000011)
	C_85 = (bool) SCZO_84 (alias)
	rax_86 = 0x0000000000416919
	r11_87 = qwLoc98_81
	branch rax_83 <u 0x0000000000000011 l000000000040BE2A
// DataOut: bx fs r11 r12 r12d r13 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32) Local -00F0(0)

l000000000040BE26_1:
	r13_1700 = 0x0000000000416919
// DataOut: bx fs r11 r12 r12d r13 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32) Local -00F0(0)

l000000000040BE2A:
	r13_88 = PHI((r13_69, l000000000040BE0E), (r13_1700, l000000000040BE26_1))
	rax_89 = r14_14
	r8_90 = r8 + 648
	SCZO_91 = cond(qwLocC0_43 - rbx_32)
	CZ_92 = SCZO_91 (alias)
	qwLocD0_93 = rax_89
	branch qwLocC0_43 >u rbx_32 l000000000040C0E0
// DataOut: bx fs r11 r12 r12d r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64) Local -00F0(0)

l000000000040C0E0:
	SZO_1630 = cond(rbx_32 & rbx_32)
	Z_1631 = (bool) SZO_1630 (alias)
	C_1632 = false
	branch Test(EQ,Z_1631) l000000000040BE59
// DataOut: bx fs r11 r12 r12d r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64) Local -00F0(0)

l000000000040C0E9:
	rax_1640 = qwLocC0_43
	rdx_1641 = 0x0000000000000000
	rdx_rax_1642 = SEQ(rdx_1641, rax_1640) (alias)
	v34_1643 = rdx_rax_1642
	rdx_1644 = (uint64) (v34_1643 % rbx_32)
	rax_1645 = (uint64) (v34_1643 /u rbx_32)
	SZO_1646 = cond(rdx_1644 & rdx_1644)
	Z_1647 = (bool) SZO_1646 (alias)
	C_1648 = false
	rsi_1649 = rax_1645
	sil_1650 = (byte) rsi_1649 (alias)
	esi_1651 = (word32) rsi_1649 (alias)
	branch Test(NE,Z_1647) l000000000040BE59
// DataOut: bx fs r11 r12 r12d r13 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64) Local -00F0(0)

l000000000040C0FF:
	rdx_1652 = 0x0000000000000000
	rax_1653 = r12_23
	rdx_rax_1654 = SEQ(rdx_1652, rax_1653) (alias)
	v35_1655 = rdx_rax_1654
	rdx_1656 = (uint64) (v35_1655 % rsi_1649)
	rax_1657 = (uint64) (v35_1655 /u rsi_1649)
	rdi_1658 = rdx_1656 + rdx_1656 * 0x0000000000000004
	r10_1659 = rax_1657
	r10d_1660 = (word32) r10_1659 (alias)
	r10b_1661 = (byte) r10_1659 (alias)
	rdx_1662 = 0x0000000000000000
	rax_1663 = rdi_1658 + rdi_1658
	rdx_rax_1664 = SEQ(rdx_1662, rax_1663) (alias)
	v37_1665 = rdx_rax_1664
	rdx_1666 = (uint64) (v37_1665 % rsi_1649)
	rax_1667 = (uint64) (v37_1665 /u rsi_1649)
	eax_1668 = (word32) rax_1667 (alias)
	rdx_1669 = rdx_1666 + rdx_1666
	edx_1670 = (word32) rdx_1669 (alias)
	rdx_rax_1671 = SEQ(rdx_1669, rax_1667) (alias)
	edx_eax_1672 = rdx_1669 (alias)
	dl_1673 = (byte) rdx_1669 (alias)
	rdi_1674 = (uint64) eax_1668
	edi_1675 = (word32) rdi_1674 (alias)
	dil_1676 = (byte) rdi_1674 (alias)
	SCZO_1677 = cond(rsi_1649 - rdx_1669)
	C_1678 = (bool) SCZO_1677 (alias)
	SZO_1679 = SCZO_1677 (alias)
	Z_1680 = (bool) SCZO_1677 (alias)
	CZ_1681 = SCZO_1677 (alias)
	S_1682 = (bool) SCZO_1677 (alias)
	CZP_1683 = SCZO_1677 (alias)
	O_1684 = (bool) SCZO_1677 (alias)
	branch Test(ULE,CZ_1681) l000000000040C6E0
// DataOut: edi fs r10 r10b r10d r11 r13 r15 rbp rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C6E0:
	rcx_1692 = (uint64) (0x00000000 - C_1678)
	ecx_1693 = (word32) rcx_1692 (alias)
	rcx_1694 = (uint64) ~ecx_1693
	ecx_1695 = (word32) rcx_1694 (alias)
	rcx_1696 = (uint64) (ecx_1695 + 0x00000003)
	ecx_1697 = (word32) rcx_1696 (alias)
	cl_1698 = (byte) rcx_1696 (alias)
	SCZO_1699 = cond(ecx_1697)
// DataOut: ecx edi fs r10 r10b r10d r11 r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C125:
	rcx_1685 = 0x0000000000000000
	SZO_1686 = cond(rdx_1669 & rdx_1669)
	Z_1687 = (bool) SZO_1686 (alias)
	C_1688 = false
	cl_1689 = Test(NE,Z_1687)
	rcx_1690 = DPB(rcx_1685, cl_1689, 0) (alias)
	ecx_1691 = DPB(ecx, cl_1689, 0) (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040BE43:
	rdx_1586 = 0x0000000000000000
	rax_1587 = rbx_32
	rdx_rax_1588 = SEQ(rdx_1586, rax_1587) (alias)
	v27_1589 = rdx_rax_1588
	rdx_1590 = (uint64) (v27_1589 % qwLocC0_43)
	rax_1591 = (uint64) (v27_1589 /u qwLocC0_43)
	eax_1592 = (word32) rax_1591 (alias)
	rdx_rax_1593 = SEQ(rdx_1590, rax_1591) (alias)
	edx_eax_1594 = rax_1591 (alias)
	ah_1595 = SLICE(rax_1591, byte, 8) (alias)
	ax_1596 = (word16) rax_1591 (alias)
	al_1597 = (byte) rax_1591 (alias)
	SZO_1598 = cond(rdx_1590 & rdx_1590)
	Z_1599 = (bool) SZO_1598 (alias)
	C_1600 = false
	rcx_1601 = rax_1591
	ecx_1602 = (word32) rcx_1601 (alias)
	cl_1603 = (byte) rcx_1601 (alias)
	branch Test(EQ,Z_1599) l000000000040C2F0
// DataOut: bx fs r11 r12 r12d r13 r15 rax rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64) Local -00F0(0)

l000000000040C2F0:
	r10_1609 = rax_1591
	rdx_1610 = 0x0000000000000000
	r10_1611 = r10_1609 *s r12_23
	r10d_1612 = (word32) r10_1611 (alias)
	r10b_1613 = (byte) r10_1611 (alias)
	rax_1614 = r10_1611
	rdx_rax_1615 = SEQ(rdx_1610, rax_1614) (alias)
	v72_1616 = rdx_rax_1615
	rdx_1617 = (uint64) (v72_1616 % rcx_1601)
	rax_1618 = (uint64) (v72_1616 /u rcx_1601)
	SCZO_1619 = cond(rax_1618 - r12_23)
	Z_1620 = (bool) SCZO_1619 (alias)
	branch Test(NE,Z_1620) l000000000040BE59
// DataOut: bx fs r10 r10b r10d r11 r12 r12d r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64) Local -00F0(0)

l000000000040C308:
	rcx_1621 = 0x0000000000000000
	ecx_1622 = (word32) rcx_1621 (alias)
	cl_1623 = (byte) rcx_1621 (alias)
	rdi_1624 = 0x0000000000000000
	edi_1625 = (word32) rdi_1624 (alias)
	dil_1626 = (byte) rdi_1624 (alias)
	SZO_1627 = cond(edi_1625)
	C_1628 = false
// DataOut: ecx edi fs r10 r10b r10d r11 r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C12D:
	sil_1154 = PHI((sil_1650, l000000000040C125), (sil_1650, l000000000040C6E0), (sil, l000000000040C308))
	dil_1155 = PHI((dil_1676, l000000000040C125), (dil_1676, l000000000040C6E0), (dil_1626, l000000000040C308))
	edi_1156 = PHI((edi_1675, l000000000040C125), (edi_1675, l000000000040C6E0), (edi_1625, l000000000040C308))
	r10_1157 = PHI((r10_1659, l000000000040C125), (r10_1659, l000000000040C6E0), (r10_1611, l000000000040C308))
	r10d_1158 = PHI((r10d_1660, l000000000040C125), (r10d_1660, l000000000040C6E0), (r10d_1612, l000000000040C308))
	r10b_1159 = PHI((r10b_1661, l000000000040C125), (r10b_1661, l000000000040C6E0), (r10b_1613, l000000000040C308))
	esi_1160 = PHI((esi_1651, l000000000040C125), (esi_1651, l000000000040C6E0), (esi, l000000000040C308))
	CZP_1161 = PHI((CZP_1683, l000000000040C125), (CZP_1683, l000000000040C6E0), (CZP, l000000000040C308))
	O_1162 = PHI((O_1684, l000000000040C125), (O_1684, l000000000040C6E0), (O, l000000000040C308))
	S_1163 = PHI((S_1682, l000000000040C125), (S_1682, l000000000040C6E0), (S, l000000000040C308))
	CZ_1164 = PHI((CZ_1681, l000000000040C125), (CZ_1681, l000000000040C6E0), (CZ_92, l000000000040C308))
	rsi_1165 = PHI((rsi_1649, l000000000040C125), (rsi_1649, l000000000040C6E0), (rsi, l000000000040C308))
	ecx_1166 = PHI((ecx_1691, l000000000040C125), (ecx_1697, l000000000040C6E0), (ecx_1622, l000000000040C308))
	rcx_1167 = PHI((rcx_1690, l000000000040C125), (rcx_1696, l000000000040C6E0), (rcx_1621, l000000000040C308))
	cl_1168 = PHI((cl_1689, l000000000040C125), (cl_1698, l000000000040C6E0), (cl_1623, l000000000040C308))
	rdx_1169 = PHI((rdx_1669, l000000000040C125), (rdx_1669, l000000000040C6E0), (rdx_1617, l000000000040C308))
	edx_1170 = PHI((edx_1670, l000000000040C125), (edx_1670, l000000000040C6E0), (edx, l000000000040C308))
	dl_1171 = PHI((dl_1673, l000000000040C125), (dl_1673, l000000000040C6E0), (dl, l000000000040C308))
	rdi_1172 = PHI((rdi_1674, l000000000040C125), (rdi_1674, l000000000040C6E0), (rdi_1624, l000000000040C308))
	rax_1173 = PHI((rax_1667, l000000000040C125), (rax_1667, l000000000040C6E0), (rax_1618, l000000000040C308))
	eax_1174 = PHI((eax_1668, l000000000040C125), (eax_1668, l000000000040C6E0), (eax_1592, l000000000040C308))
	rdx_rax_1175 = PHI((rdx_rax_1671, l000000000040C125), (rdx_rax_1671, l000000000040C6E0), (rdx_rax_1615, l000000000040C308))
	edx_eax_1176 = PHI((edx_eax_1672, l000000000040C125), (edx_eax_1672, l000000000040C6E0), (edx_eax_1594, l000000000040C308))
	ah_1177 = PHI((ah, l000000000040C125), (ah, l000000000040C6E0), (ah_1595, l000000000040C308))
	ax_1178 = PHI((ax, l000000000040C125), (ax, l000000000040C6E0), (ax_1596, l000000000040C308))
	al_1179 = PHI((al, l000000000040C125), (al, l000000000040C6E0), (al_1597, l000000000040C308))
	SCZO_1180 = PHI((SCZO_1677, l000000000040C125), (SCZO_1699, l000000000040C6E0), (SCZO_1619, l000000000040C308))
	r9_1181 = (uint64) dwLocC8_41
	r9d_1182 = (word32) r9_1181 (alias)
	r8_1183 = qwLocD0_93
	rbx_1184 = 0x00000000FFFFFFFF
	ebx_1185 = (word32) rbx_1184 (alias)
	r9_1186 = (uint64) (r9d_1182 & 0x00000010)
	r9d_1187 = (word32) r9_1186 (alias)
	SZO_1188 = cond(r9d_1187)
	Z_1189 = (bool) SZO_1188 (alias)
	C_1190 = false
	branch Test(EQ,Z_1189) l000000000040C530
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C146:
	rsi_1362 = (uint64) dwLocC4_59
	sil_1363 = (byte) rsi_1362 (alias)
	esi_1364 = (word32) rsi_1362 (alias)
	SCZO_1365 = cond(r10_1157 - rsi_1362)
	C_1366 = (bool) SCZO_1365 (alias)
	branch Test(ULT,C_1366) l000000000040C710
// DataOut: ecx edi fs r10 r10b r10d r11 r13 r15 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C710:
	r8_1581 = qwLocD0_93
	rbx_1582 = 0x0000000000000000
	ebx_1583 = (word32) rbx_1582 (alias)
	SZO_1584 = cond(ebx_1583)
	C_1585 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C153:
	rbx_1367 = 0x0000000000000000
	ebx_1368 = (word32) rbx_1367 (alias)
	SZO_1369 = cond(ebx_1368)
	C_1370 = false
	r12_1371 = (uint64) dwLocC4_59
	r12d_1372 = (word32) r12_1371 (alias)
// DataOut: ebx ecx edi fs r10 r11 r12d r13 r15 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C17D:
	r10_1373 = PHI((r10_1157, l000000000040C153), (r10_1392, l000000000040C174))
	ebx_1374 = PHI((ebx_1368, l000000000040C153), (ebx_1426, l000000000040C174))
	ecx_1375 = PHI((ecx_1166, l000000000040C153), (ecx_1419, l000000000040C174))
	edx_1376 = PHI((edx_1170, l000000000040C153), (edx_1401, l000000000040C174))
	rdi_1377 = PHI((rdi_1172, l000000000040C153), (rdi_1411, l000000000040C174))
	SZO_1378 = PHI((SZO_1369, l000000000040C153), (SZO_1422, l000000000040C174))
	Z_1379 = PHI((Z_1189, l000000000040C153), (Z_1434, l000000000040C174))
	C_1380 = PHI((C_1370, l000000000040C153), (C_1424, l000000000040C174))
	rbx_1381 = PHI((rbx_1367, l000000000040C153), (rbx_1425, l000000000040C174))
	rax_1382 = r10_1373
	rdx_1383 = 0x0000000000000000
	rdx_rax_1384 = SEQ(rdx_1383, rax_1382) (alias)
	v48_1385 = rdx_rax_1384
	rdx_1386 = (uint64) (v48_1385 % rsi_1362)
	rax_1387 = (uint64) (v48_1385 /u rsi_1362)
	r8_1388 = rax_1387
	eax_1389 = rdx_1386 + rdx_1386 * 0x0000000000000004
	rax_1390 = DPB(rax_1387, eax_1389, 0) (alias)
	rdx_1391 = 0x0000000000000000
	r10_1392 = r8_1388
	r10d_1393 = (word32) r10_1392 (alias)
	r10b_1394 = (byte) r10_1392 (alias)
	eax_1395 = rdi_1377 + rax_1390 * 0x0000000000000002
	edx_eax_1396 = SEQ(edx_1376, eax_1395) (alias)
	rdi_1397 = (uint64) ecx_1375
	edi_1398 = (word32) rdi_1397 (alias)
	rdi_1399 = (uint64) (edi_1398 >> 0x00000001)
	v50_1400 = edx_eax_1396
	edx_1401 = (uint32) (v50_1400 % r12d_1372)
	rdx_1402 = DPB(rdx_1391, edx_1401, 0) (alias)
	eax_1403 = (uint32) (v50_1400 /u r12d_1372)
	rax_1404 = DPB(rax_1390, eax_1403, 0) (alias)
	rdx_rax_1405 = DPB(rdx_rax_1384, eax_1403, 0) (alias)
	edx_eax_1406 = SEQ(edx_1401, eax_1403) (alias)
	ah_1407 = SLICE(eax_1403, byte, 8) (alias)
	ax_1408 = (word16) eax_1403 (alias)
	al_1409 = (byte) eax_1403 (alias)
	r14d_1410 = rdi_1399 + rdx_1402 * 0x0000000000000002
	rdi_1411 = (uint64) eax_1403
	edi_1412 = (word32) rdi_1411 (alias)
	dil_1413 = (byte) rdi_1411 (alias)
	rcx_1414 = (uint64) (ecx_1375 + r14d_1410)
	ecx_1415 = (word32) rcx_1414 (alias)
	cl_1416 = (byte) rcx_1414 (alias)
	SCZO_1417 = cond(r12d_1372 - r14d_1410)
	CZ_1418 = SCZO_1417 (alias)
	branch Test(UGT,CZ_1418) l000000000040C160
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r8 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C160:
	SZO_1574 = cond(ecx_1415 & ecx_1415)
	Z_1575 = (bool) SZO_1574 (alias)
	C_1576 = false
	cl_1577 = Test(NE,Z_1575)
	ecx_1578 = (word32) cl_1577
	rcx_1579 = DPB(rcx_1414, ecx_1578, 0) (alias)
	cl_1580 = (byte) ecx_1578 (alias)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r8 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C1A8:
	SCZO_1564 = cond(r12d_1372 - ecx_1415)
	C_1565 = (bool) SCZO_1564 (alias)
	rcx_1566 = (uint64) (0x00000000 - C_1565)
	ecx_1567 = (word32) rcx_1566 (alias)
	rcx_1568 = (uint64) ~ecx_1567
	ecx_1569 = (word32) rcx_1568 (alias)
	rcx_1570 = (uint64) (ecx_1569 + 0x00000003)
	ecx_1571 = (word32) rcx_1570 (alias)
	cl_1572 = (byte) rcx_1570 (alias)
	SCZO_1573 = cond(ecx_1571)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r8 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C168:
	ecx_1419 = PHI((ecx_1571, l000000000040C1A8), (ecx_1578, l000000000040C160))
	rcx_1420 = PHI((rcx_1570, l000000000040C1A8), (rcx_1579, l000000000040C160))
	cl_1421 = PHI((cl_1572, l000000000040C1A8), (cl_1580, l000000000040C160))
	SZO_1422 = PHI((SZO_1378, l000000000040C1A8), (SZO_1574, l000000000040C160))
	Z_1423 = PHI((Z_1379, l000000000040C1A8), (Z_1575, l000000000040C160))
	C_1424 = PHI((C_1565, l000000000040C1A8), (C_1576, l000000000040C160))
	rbx_1425 = (uint64) (ebx_1374 + 0x00000001)
	ebx_1426 = (word32) rbx_1425 (alias)
	SCZO_1427 = cond(rsi_1362 - r8_1388)
	CZ_1428 = SCZO_1427 (alias)
	branch Test(UGT,CZ_1428) l000000000040C49F
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r8 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C49F:
	SCZO_1435 = cond(r8_1388 - 0x0000000000000009)
	CZ_1436 = SCZO_1435 (alias)
	branch Test(UGT,CZ_1436) l000000000040C768
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4A9:
	SCZO_1437 = cond(dwLocB0_35 - 0x00000001)
	Z_1438 = (bool) SCZO_1437 (alias)
	branch Test(EQ,Z_1438) l000000000040C7B0
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7B0:
	rdx_1551 = (uint64) eax_1403
	edx_1552 = (word32) rdx_1551 (alias)
	rdx_1553 = (uint64) (edx_1552 & 0x00000001)
	edx_1554 = (word32) rdx_1553 (alias)
	rdx_1555 = (uint64) (edx_1554 + ecx_1419)
	edx_1556 = (word32) rdx_1555 (alias)
	SCZO_1557 = cond(edx_1556 - 0x00000002)
	SZO_1558 = SCZO_1557 (alias)
	dl_1559 = Test(GT,SZO_1558)
	edx_1560 = DPB(edx_1556, dl_1559, 0) (alias)
	rdx_1561 = DPB(rdx_1555, dl_1559, 0) (alias)
	rdx_rax_1562 = DPB(rdx_rax_1405, dl_1559, 64) (alias)
	edx_eax_1563 = DPB(edx_eax_1406, dl_1559, 32) (alias)
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4B4:
	r12_1535 = (uint64) dwLocB0_35
	r12d_1536 = (word32) r12_1535 (alias)
	SZO_1537 = cond(ecx_1419 & ecx_1419)
	dl_1538 = Test(GT,SZO_1537)
	edx_1539 = DPB(edx_1401, dl_1538, 0) (alias)
	SZO_1540 = cond(r12d_1536 & r12d_1536)
	Z_1541 = (bool) SZO_1540 (alias)
	sil_1542 = Test(EQ,Z_1541)
	esi_1543 = DPB(esi_1364, sil_1542, 0) (alias)
	rdx_1544 = (uint64) (edx_1539 & esi_1543)
	edx_1545 = (word32) rdx_1544 (alias)
	rdx_rax_1546 = SEQ(rdx_1544, rax_1404) (alias)
	edx_eax_1547 = rdx_1544 (alias)
	dl_1548 = (byte) rdx_1544 (alias)
	SZO_1549 = cond(edx_1545)
	C_1550 = false
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4C7:
	sil_1439 = PHI((sil_1542, l000000000040C4B4), (sil_1363, l000000000040C7B0))
	esi_1440 = PHI((esi_1543, l000000000040C4B4), (esi_1364, l000000000040C7B0))
	r12d_1441 = PHI((r12d_1536, l000000000040C4B4), (r12d_1372, l000000000040C7B0))
	rdx_1442 = PHI((rdx_1544, l000000000040C4B4), (rdx_1561, l000000000040C7B0))
	edx_1443 = PHI((edx_1545, l000000000040C4B4), (edx_1560, l000000000040C7B0))
	dl_1444 = PHI((dl_1548, l000000000040C4B4), (dl_1559, l000000000040C7B0))
	rdx_rax_1445 = PHI((rdx_rax_1546, l000000000040C4B4), (rdx_rax_1562, l000000000040C7B0))
	edx_eax_1446 = PHI((edx_eax_1547, l000000000040C4B4), (edx_eax_1563, l000000000040C7B0))
	SCZO_1447 = PHI((SCZO_1437, l000000000040C4B4), (SCZO_1557, l000000000040C7B0))
	r12_1448 = PHI((r12_1535, l000000000040C4B4), (r12_1371, l000000000040C7B0))
	SZO_1449 = cond(dl_1444 & dl_1444)
	Z_1450 = (bool) SZO_1449 (alias)
	C_1451 = false
	branch Test(EQ,Z_1450) l000000000040C788
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C788:
	SZO_1532 = cond(eax_1403 & eax_1403)
	Z_1533 = (bool) SZO_1532 (alias)
	C_1534 = false
	branch Test(NE,Z_1533) l000000000040C4DB
// DataOut: dil ebx ecx fs r10 r10b r10d r11 r13 r15 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4CF:
	edi_1508 = rax_1404 + 0x0000000000000001
	rdi_1509 = DPB(rdi_1411, edi_1508, 0) (alias)
	dil_1510 = (byte) edi_1508 (alias)
	SCZO_1511 = cond(edi_1508 - 0x0000000A)
	Z_1512 = (bool) SCZO_1511 (alias)
	branch Test(EQ,Z_1512) l000000000040C7CE
// DataOut: dil ebx fs r10 r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7CE:
	r10_1513 = r8_1388 + 0x0000000000000001
	r10d_1514 = (word32) r10_1513 (alias)
	r10b_1515 = (byte) r10_1513 (alias)
	SCZO_1516 = cond(r10_1513 - 0x000000000000000A)
	Z_1517 = (bool) SCZO_1516 (alias)
	branch Test(NE,Z_1517) l000000000040C7FF
// DataOut: ebx fs r10 r10b r10d r11 r13 r15 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7FF:
	rcx_1527 = 0x0000000000000000
	ecx_1528 = (word32) rcx_1527 (alias)
	cl_1529 = (byte) rcx_1527 (alias)
	SZO_1530 = cond(0x00000000)
	C_1531 = false
// DataOut: ebx ecx fs r10 r10b r10d r11 r13 r15 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C790:
	dil_1484 = PHI((dil_1510, l000000000040C7FF), (dil_1413, l000000000040C788))
	edi_1485 = PHI((edi_1508, l000000000040C7FF), (edi_1412, l000000000040C788))
	r10_1486 = PHI((r10_1513, l000000000040C7FF), (r10_1392, l000000000040C788))
	r10d_1487 = PHI((r10d_1514, l000000000040C7FF), (r10d_1393, l000000000040C788))
	r10b_1488 = PHI((r10b_1515, l000000000040C7FF), (r10b_1394, l000000000040C788))
	ecx_1489 = PHI((ecx_1528, l000000000040C7FF), (ecx_1419, l000000000040C788))
	rcx_1490 = PHI((rcx_1527, l000000000040C7FF), (rcx_1420, l000000000040C788))
	cl_1491 = PHI((cl_1529, l000000000040C7FF), (cl_1421, l000000000040C788))
	rdi_1492 = PHI((rdi_1509, l000000000040C7FF), (rdi_1411, l000000000040C788))
	SCZO_1493 = PHI((SCZO_1516, l000000000040C7FF), (SCZO_1447, l000000000040C788))
	SZO_1494 = cond(bLocC8 & 0x08)
	Z_1495 = (bool) SZO_1494 (alias)
	C_1496 = false
	branch Test(NE,Z_1495) l000000000040C7C2
// DataOut: ebx ecx fs r10 r10b r10d r11 r13 r15 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7C2:
	r8_1502 = qwLocD0_93
	rdi_1503 = 0x0000000000000000
	edi_1504 = (word32) rdi_1503 (alias)
	dil_1505 = (byte) rdi_1503 (alias)
	SZO_1506 = cond(0x00000000)
	C_1507 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C797:
	rdi_1497 = 0x0000000000000000
	edi_1498 = (word32) rdi_1497 (alias)
	dil_1499 = (byte) rdi_1497 (alias)
	SZO_1500 = cond(0x00000000)
	C_1501 = false
// DataOut: dil ebx fs r10 r10d r11 r13 r15 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7D8:
	r8_1518 = qwLocD0_93
	rcx_1519 = 0x0000000000000000
	ecx_1520 = (word32) rcx_1519 (alias)
	cl_1521 = (byte) rcx_1519 (alias)
	rdi_1522 = 0x0000000000000000
	edi_1523 = (word32) rdi_1522 (alias)
	dil_1524 = (byte) rdi_1522 (alias)
	SZO_1525 = cond(0x00000000)
	C_1526 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4DB:
	edi_1452 = PHI((edi_1508, l000000000040C4CF), (edi_1412, l000000000040C788), (edi_1498, l000000000040C797))
	r10_1453 = PHI((r10_1392, l000000000040C4CF), (r10_1392, l000000000040C788), (r10_1486, l000000000040C797))
	Z_1454 = PHI((Z_1512, l000000000040C4CF), (Z_1533, l000000000040C788), (Z_1495, l000000000040C797))
	SCZO_1455 = PHI((SCZO_1511, l000000000040C4CF), (SCZO_1447, l000000000040C788), (SCZO_1493, l000000000040C797))
	rax_1456 = qwLocB8_38
	rdi_1457 = (uint64) (edi_1452 + 0x00000030)
	dil_1458 = (byte) rdi_1457 (alias)
	rdx_1459 = r11_87
	rsi_1460 = r15_79
	dwLoc8C_1461 = r9d_1187
	qwLocA8_1462 = r10_1453
	qwLoc98_1463 = r11_87
	r8_1464 = rax_1456 + 0x0000000000000287
	Mem1465[rax_1456 + 0x0000000000000287:byte] = dil_1458
	r8_1466 = r8_1464 - r11_87
	rdi_1467 = r8_1466
	rax_1468 = memcpy(rdi_1467, rsi_1460, rdx_1459)
	r11_1469 = qwLoc98_1463
	r10_1470 = qwLocA8_1462
	r10d_1471 = (word32) r10_1470 (alias)
	r10b_1472 = (byte) r10_1470 (alias)
	r8_1473 = rax_1468
	r9_1474 = (uint64) dwLoc8C_1461
	r9d_1475 = (word32) r9_1474 (alias)
	rcx_1476 = 0x0000000000000000
	ecx_1477 = (word32) rcx_1476 (alias)
	cl_1478 = (byte) rcx_1476 (alias)
	rdi_1479 = 0x0000000000000000
	edi_1480 = (word32) rdi_1479 (alias)
	dil_1481 = (byte) rdi_1479 (alias)
	SZO_1482 = cond(0x00000000)
	C_1483 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C174:
	SCZO_1433 = cond(ebx_1426 - 0x00000008)
	Z_1434 = (bool) SCZO_1433 (alias)
	branch Test(EQ,Z_1434) l000000000040C768
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C768:
	CZ_1429 = PHI((CZ_1428, l000000000040C174), (CZ_1436, l000000000040C49F))
	Z_1430 = PHI((Z_1434, l000000000040C174), (Z_1423, l000000000040C49F))
	SCZO_1431 = PHI((SCZO_1433, l000000000040C174), (SCZO_1435, l000000000040C49F))
	r8_1432 = qwLocD0_93
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C530:
	sil_1191 = PHI((sil_1363, l000000000040C710), (sil_1363, l000000000040C768), (sil_1439, l000000000040C4DB), (sil_1439, l000000000040C7D8), (sil_1439, l000000000040C7C2), (sil_1154, l000000000040C12D))
	dwLoc8C_1192 = PHI((dwLoc8C, l000000000040C710), (dwLoc8C, l000000000040C768), (dwLoc8C_1461, l000000000040C4DB), (dwLoc8C, l000000000040C7D8), (dwLoc8C, l000000000040C7C2), (dwLoc8C, l000000000040C12D))
	qwLocA8_1193 = PHI((qwLocA8, l000000000040C710), (qwLocA8, l000000000040C768), (qwLocA8_1462, l000000000040C4DB), (qwLocA8, l000000000040C7D8), (qwLocA8, l000000000040C7C2), (qwLocA8, l000000000040C12D))
	dil_1194 = PHI((dil_1155, l000000000040C710), (dil_1413, l000000000040C768), (dil_1481, l000000000040C4DB), (dil_1524, l000000000040C7D8), (dil_1505, l000000000040C7C2), (dil_1155, l000000000040C12D))
	edi_1195 = PHI((edi_1156, l000000000040C710), (edi_1412, l000000000040C768), (edi_1480, l000000000040C4DB), (edi_1523, l000000000040C7D8), (edi_1504, l000000000040C7C2), (edi_1156, l000000000040C12D))
	r10_1196 = PHI((r10_1157, l000000000040C710), (r10_1392, l000000000040C768), (r10_1470, l000000000040C4DB), (r10_1513, l000000000040C7D8), (r10_1486, l000000000040C7C2), (r10_1157, l000000000040C12D))
	r10d_1197 = PHI((r10d_1158, l000000000040C710), (r10d_1393, l000000000040C768), (r10d_1471, l000000000040C4DB), (r10d_1514, l000000000040C7D8), (r10d_1487, l000000000040C7C2), (r10d_1158, l000000000040C12D))
	r10b_1198 = PHI((r10b_1159, l000000000040C710), (r10b_1394, l000000000040C768), (r10b_1472, l000000000040C4DB), (r10b_1515, l000000000040C7D8), (r10b_1488, l000000000040C7C2), (r10b_1159, l000000000040C12D))
	esi_1199 = PHI((esi_1364, l000000000040C710), (esi_1364, l000000000040C768), (esi_1440, l000000000040C4DB), (esi_1440, l000000000040C7D8), (esi_1440, l000000000040C7C2), (esi_1160, l000000000040C12D))
	qwLoc98_1200 = PHI((qwLoc98_81, l000000000040C710), (qwLoc98_81, l000000000040C768), (qwLoc98_1463, l000000000040C4DB), (qwLoc98_81, l000000000040C7D8), (qwLoc98_81, l000000000040C7C2), (qwLoc98_81, l000000000040C12D))
	r11_1201 = PHI((r11_87, l000000000040C710), (r11_87, l000000000040C768), (r11_1469, l000000000040C4DB), (r11_87, l000000000040C7D8), (r11_87, l000000000040C7C2), (r11_87, l000000000040C12D))
	r8_1202 = PHI((r8_1581, l000000000040C710), (r8_1432, l000000000040C768), (r8_1473, l000000000040C4DB), (r8_1518, l000000000040C7D8), (r8_1502, l000000000040C7C2), (r8_1183, l000000000040C12D))
	r9_1203 = PHI((r9_1186, l000000000040C710), (r9_1186, l000000000040C768), (r9_1474, l000000000040C4DB), (r9_1186, l000000000040C7D8), (r9_1186, l000000000040C7C2), (r9_1186, l000000000040C12D))
	r9d_1204 = PHI((r9d_1187, l000000000040C710), (r9d_1187, l000000000040C768), (r9d_1475, l000000000040C4DB), (r9d_1187, l000000000040C7D8), (r9d_1187, l000000000040C7C2), (r9d_1187, l000000000040C12D))
	r12d_1205 = PHI((r12d_24, l000000000040C710), (r12d_1372, l000000000040C768), (r12d_1441, l000000000040C4DB), (r12d_1441, l000000000040C7D8), (r12d_1441, l000000000040C7C2), (r12d_24, l000000000040C12D))
	r14d_1206 = PHI((r14d_15, l000000000040C710), (r14d_1410, l000000000040C768), (r14d_1410, l000000000040C4DB), (r14d_1410, l000000000040C7D8), (r14d_1410, l000000000040C7C2), (r14d_15, l000000000040C12D))
	CZ_1207 = PHI((CZ_1164, l000000000040C710), (CZ_1429, l000000000040C768), (CZ_1436, l000000000040C4DB), (CZ_1436, l000000000040C7D8), (CZ_1436, l000000000040C7C2), (CZ_1164, l000000000040C12D))
	ebx_1208 = PHI((ebx_1583, l000000000040C710), (ebx_1426, l000000000040C768), (ebx_1426, l000000000040C4DB), (ebx_1426, l000000000040C7D8), (ebx_1426, l000000000040C7C2), (ebx_1185, l000000000040C12D))
	rsi_1209 = PHI((rsi_1362, l000000000040C710), (rsi_1362, l000000000040C768), (rsi_1460, l000000000040C4DB), (rsi_1362, l000000000040C7D8), (rsi_1362, l000000000040C7C2), (rsi_1165, l000000000040C12D))
	ecx_1210 = PHI((ecx_1166, l000000000040C710), (ecx_1419, l000000000040C768), (ecx_1477, l000000000040C4DB), (ecx_1520, l000000000040C7D8), (ecx_1489, l000000000040C7C2), (ecx_1166, l000000000040C12D))
	rcx_1211 = PHI((rcx_1167, l000000000040C710), (rcx_1420, l000000000040C768), (rcx_1476, l000000000040C4DB), (rcx_1519, l000000000040C7D8), (rcx_1490, l000000000040C7C2), (rcx_1167, l000000000040C12D))
	cl_1212 = PHI((cl_1168, l000000000040C710), (cl_1421, l000000000040C768), (cl_1478, l000000000040C4DB), (cl_1521, l000000000040C7D8), (cl_1491, l000000000040C7C2), (cl_1168, l000000000040C12D))
	rdx_1213 = PHI((rdx_1169, l000000000040C710), (rdx_1402, l000000000040C768), (rdx_1459, l000000000040C4DB), (rdx_1442, l000000000040C7D8), (rdx_1442, l000000000040C7C2), (rdx_1169, l000000000040C12D))
	edx_1214 = PHI((edx_1170, l000000000040C710), (edx_1401, l000000000040C768), (edx_1443, l000000000040C4DB), (edx_1443, l000000000040C7D8), (edx_1443, l000000000040C7C2), (edx_1170, l000000000040C12D))
	dl_1215 = PHI((dl_1171, l000000000040C710), (dl_1171, l000000000040C768), (dl_1444, l000000000040C4DB), (dl_1444, l000000000040C7D8), (dl_1444, l000000000040C7C2), (dl_1171, l000000000040C12D))
	rdi_1216 = PHI((rdi_1172, l000000000040C710), (rdi_1411, l000000000040C768), (rdi_1479, l000000000040C4DB), (rdi_1522, l000000000040C7D8), (rdi_1503, l000000000040C7C2), (rdi_1172, l000000000040C12D))
	SZO_1217 = PHI((SZO_1584, l000000000040C710), (SZO_1422, l000000000040C768), (SZO_1482, l000000000040C4DB), (SZO_1525, l000000000040C7D8), (SZO_1506, l000000000040C7C2), (SZO_1188, l000000000040C12D))
	C_1218 = PHI((C_1585, l000000000040C710), (C_1424, l000000000040C768), (C_1483, l000000000040C4DB), (C_1526, l000000000040C7D8), (C_1507, l000000000040C7C2), (C_1190, l000000000040C12D))
	rax_1219 = PHI((rax_1173, l000000000040C710), (rax_1404, l000000000040C768), (rax_1468, l000000000040C4DB), (rax_1404, l000000000040C7D8), (rax_1404, l000000000040C7C2), (rax_1173, l000000000040C12D))
	eax_1220 = PHI((eax_1174, l000000000040C710), (eax_1403, l000000000040C768), (eax_1403, l000000000040C4DB), (eax_1403, l000000000040C7D8), (eax_1403, l000000000040C7C2), (eax_1174, l000000000040C12D))
	rdx_rax_1221 = PHI((rdx_rax_1175, l000000000040C710), (rdx_rax_1405, l000000000040C768), (rdx_rax_1445, l000000000040C4DB), (rdx_rax_1445, l000000000040C7D8), (rdx_rax_1445, l000000000040C7C2), (rdx_rax_1175, l000000000040C12D))
	edx_eax_1222 = PHI((edx_eax_1176, l000000000040C710), (edx_eax_1406, l000000000040C768), (edx_eax_1446, l000000000040C4DB), (edx_eax_1446, l000000000040C7D8), (edx_eax_1446, l000000000040C7C2), (edx_eax_1176, l000000000040C12D))
	ah_1223 = PHI((ah_1177, l000000000040C710), (ah_1407, l000000000040C768), (ah_1407, l000000000040C4DB), (ah_1407, l000000000040C7D8), (ah_1407, l000000000040C7C2), (ah_1177, l000000000040C12D))
	ax_1224 = PHI((ax_1178, l000000000040C710), (ax_1408, l000000000040C768), (ax_1408, l000000000040C4DB), (ax_1408, l000000000040C7D8), (ax_1408, l000000000040C7C2), (ax_1178, l000000000040C12D))
	al_1225 = PHI((al_1179, l000000000040C710), (al_1409, l000000000040C768), (al_1409, l000000000040C4DB), (al_1409, l000000000040C7D8), (al_1409, l000000000040C7C2), (al_1179, l000000000040C12D))
	rbx_1226 = PHI((rbx_1582, l000000000040C710), (rbx_1425, l000000000040C768), (rbx_1425, l000000000040C4DB), (rbx_1425, l000000000040C7D8), (rbx_1425, l000000000040C7C2), (rbx_1184, l000000000040C12D))
	r12_1227 = PHI((r12_23, l000000000040C710), (r12_1371, l000000000040C768), (r12_1448, l000000000040C4DB), (r12_1448, l000000000040C7D8), (r12_1448, l000000000040C7C2), (r12_23, l000000000040C12D))
	SCZO_1228 = cond(dwLocB0_35 - 0x00000001)
	Z_1229 = (bool) SCZO_1228 (alias)
	branch Test(EQ,Z_1229) l000000000040C6F0
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C6F0:
	rax_1343 = r10_1196
	eax_1344 = (word32) rax_1343 (alias)
	rcx_1345 = (int64) ecx_1210
	rax_1346 = (uint64) (eax_1344 & 0x00000001)
	rax_1347 = rax_1346 + rcx_1345
	SCZO_1348 = cond(rax_1347)
	Z_1349 = (bool) SCZO_1348 (alias)
	al_1350 = Test(NE,Z_1349)
	eax_1351 = (word32) al_1350
	rdi_1352 = (uint64) (edi_1195 + eax_1351)
	edi_1353 = (word32) rdi_1352 (alias)
	SCZO_1354 = cond(edi_1353 - 0x00000005)
	SZO_1355 = SCZO_1354 (alias)
	al_1356 = Test(GT,SZO_1355)
	eax_1357 = DPB(eax_1351, al_1356, 0) (alias)
	rax_1358 = DPB(rax_1347, al_1356, 0) (alias)
	rdx_rax_1359 = DPB(rdx_rax_1221, al_1356, 0) (alias)
	edx_eax_1360 = DPB(edx_eax_1222, al_1356, 0) (alias)
	ax_1361 = DPB(ax_1224, al_1356, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C53B:
	rsi_1322 = (uint64) dwLocB0_35
	esi_1323 = (word32) rsi_1322 (alias)
	rax_1324 = 0x0000000000000000
	eax_1325 = (word32) rax_1324 (alias)
	rdx_rax_1326 = SEQ(rdx_1213, rax_1324) (alias)
	edx_eax_1327 = rax_1324 (alias)
	ax_1328 = (word16) rax_1324 (alias)
	al_1329 = (byte) rax_1324 (alias)
	SZO_1330 = cond(esi_1323 & esi_1323)
	Z_1331 = (bool) SZO_1330 (alias)
	C_1332 = false
	branch Test(NE,Z_1331) l000000000040C54C
// DataOut: al ebx ecx edi fs r10 r10b r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C545:
	rcx_1333 = (uint64) (ecx_1210 + edi_1195)
	ecx_1334 = (word32) rcx_1333 (alias)
	SZO_1335 = cond(ecx_1334 & ecx_1334)
	C_1336 = false
	al_1337 = Test(GT,SZO_1335)
	eax_1338 = DPB(eax_1325, al_1337, 0) (alias)
	rax_1339 = DPB(rax_1324, al_1337, 0) (alias)
	rdx_rax_1340 = DPB(rdx_rax_1326, al_1337, 0) (alias)
	edx_eax_1341 = DPB(edx_eax_1327, al_1337, 0) (alias)
	ax_1342 = DPB(ax_1328, al_1337, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C54C:
	edi_1230 = PHI((edi_1195, l000000000040C53B), (edi_1195, l000000000040C545), (edi_1353, l000000000040C6F0))
	esi_1231 = PHI((esi_1323, l000000000040C53B), (esi_1323, l000000000040C545), (esi_1199, l000000000040C6F0))
	rsi_1232 = PHI((rsi_1322, l000000000040C53B), (rsi_1322, l000000000040C545), (rsi_1209, l000000000040C6F0))
	ecx_1233 = PHI((ecx_1210, l000000000040C53B), (ecx_1334, l000000000040C545), (ecx_1210, l000000000040C6F0))
	rcx_1234 = PHI((rcx_1211, l000000000040C53B), (rcx_1333, l000000000040C545), (rcx_1345, l000000000040C6F0))
	rdi_1235 = PHI((rdi_1216, l000000000040C53B), (rdi_1216, l000000000040C545), (rdi_1352, l000000000040C6F0))
	rax_1236 = PHI((rax_1324, l000000000040C53B), (rax_1339, l000000000040C545), (rax_1358, l000000000040C6F0))
	eax_1237 = PHI((eax_1325, l000000000040C53B), (eax_1338, l000000000040C545), (eax_1357, l000000000040C6F0))
	rdx_rax_1238 = PHI((rdx_rax_1326, l000000000040C53B), (rdx_rax_1340, l000000000040C545), (rdx_rax_1359, l000000000040C6F0))
	edx_eax_1239 = PHI((edx_eax_1327, l000000000040C53B), (edx_eax_1341, l000000000040C545), (edx_eax_1360, l000000000040C6F0))
	ax_1240 = PHI((ax_1328, l000000000040C53B), (ax_1342, l000000000040C545), (ax_1361, l000000000040C6F0))
	al_1241 = PHI((al_1329, l000000000040C53B), (al_1337, l000000000040C545), (al_1356, l000000000040C6F0))
	SCZO_1242 = PHI((SCZO_1228, l000000000040C53B), (SCZO_1228, l000000000040C545), (SCZO_1354, l000000000040C6F0))
	SZO_1243 = cond(al_1241 & al_1241)
	Z_1244 = (bool) SZO_1243 (alias)
	C_1245 = false
	branch Test(EQ,Z_1244) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C550:
	r10_1290 = r10_1196 + 0x0000000000000001
	r10d_1291 = (word32) r10_1290 (alias)
	r10b_1292 = (byte) r10_1290 (alias)
	SZO_1293 = cond(r9d_1204 & r9d_1204)
	Z_1294 = (bool) SZO_1293 (alias)
	C_1295 = false
	branch Test(EQ,Z_1294) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C559:
	rax_1296 = (uint64) dwLocC4_59
	SCZO_1297 = cond(rax_1296 - r10_1290)
	Z_1298 = (bool) SCZO_1297 (alias)
	branch Test(NE,Z_1298) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C562:
	SCZO_1299 = cond(ebx_1208 - 0x00000008)
	Z_1300 = (bool) SCZO_1299 (alias)
	branch Test(EQ,Z_1300) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C567:
	rbx_1301 = (uint64) (ebx_1208 + 0x00000001)
	ebx_1302 = (word32) rbx_1301 (alias)
	SZO_1303 = cond(bLocC8 & 0x08)
	Z_1304 = (bool) SZO_1303 (alias)
	C_1305 = false
	r10_1306 = 0x0000000000000001
	r10d_1307 = (word32) r10_1306 (alias)
	r10b_1308 = (byte) r10_1306 (alias)
	branch Test(NE,Z_1304) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C577:
	rax_1309 = r8_1202 - 0x0000000000000001
	Mem1310[r8_1202 - 0x0000000000000001:byte] = 0x30
	rdx_1311 = r11_1201
	rsi_1312 = r15_79
	qwLocB0_1313 = 0x0000000000000001
	rax_1314 = rax_1309 - r11_1201
	SCZO_1315 = cond(rax_1314)
	rdi_1316 = rax_1314
	rax_1317 = memcpy(rdi_1316, rsi_1312, rdx_1311)
	r10_1318 = 0x0000000000000001
	r10d_1319 = (word32) r10_1318 (alias)
	r10b_1320 = (byte) r10_1318 (alias)
	r8_1321 = rax_1317
// DataOut: ebx fs r10 r10b r13 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:0x0000000000000001 r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C5A0:
	r10_1246 = PHI((r10_1196, l000000000040C54C), (r10_1290, l000000000040C550), (r10_1290, l000000000040C559), (r10_1290, l000000000040C562), (r10_1306, l000000000040C567), (r10_1318, l000000000040C577))
	r10d_1247 = PHI((r10d_1197, l000000000040C54C), (r10d_1291, l000000000040C550), (r10d_1291, l000000000040C559), (r10d_1291, l000000000040C562), (r10d_1307, l000000000040C567), (r10d_1319, l000000000040C577))
	r10b_1248 = PHI((r10b_1198, l000000000040C54C), (r10b_1292, l000000000040C550), (r10b_1292, l000000000040C559), (r10b_1292, l000000000040C562), (r10b_1308, l000000000040C567), (r10b_1320, l000000000040C577))
	r8_1249 = PHI((r8_1202, l000000000040C54C), (r8_1202, l000000000040C550), (r8_1202, l000000000040C559), (r8_1202, l000000000040C562), (r8_1202, l000000000040C567), (r8_1321, l000000000040C577))
	qwLocB0_1250 = PHI((qwLocB0, l000000000040C54C), (qwLocB0, l000000000040C550), (qwLocB0, l000000000040C559), (qwLocB0, l000000000040C562), (qwLocB0, l000000000040C567), (qwLocB0_1313, l000000000040C577))
	ebx_1251 = PHI((ebx_1208, l000000000040C54C), (ebx_1208, l000000000040C550), (ebx_1208, l000000000040C559), (ebx_1208, l000000000040C562), (ebx_1302, l000000000040C567), (ebx_1302, l000000000040C577))
	rsi_1252 = PHI((rsi_1232, l000000000040C54C), (rsi_1232, l000000000040C550), (rsi_1232, l000000000040C559), (rsi_1232, l000000000040C562), (rsi_1232, l000000000040C567), (rsi_1312, l000000000040C577))
	rdx_1253 = PHI((rdx_1213, l000000000040C54C), (rdx_1213, l000000000040C550), (rdx_1213, l000000000040C559), (rdx_1213, l000000000040C562), (rdx_1213, l000000000040C567), (rdx_1311, l000000000040C577))
	rdi_1254 = PHI((rdi_1235, l000000000040C54C), (rdi_1235, l000000000040C550), (rdi_1235, l000000000040C559), (rdi_1235, l000000000040C562), (rdi_1235, l000000000040C567), (rdi_1316, l000000000040C577))
	SZO_1255 = PHI((SZO_1243, l000000000040C54C), (SZO_1293, l000000000040C550), (SZO_1293, l000000000040C559), (SZO_1293, l000000000040C562), (SZO_1303, l000000000040C567), (SZO_1303, l000000000040C577))
	Z_1256 = PHI((Z_1244, l000000000040C54C), (Z_1294, l000000000040C550), (Z_1298, l000000000040C559), (Z_1300, l000000000040C562), (Z_1304, l000000000040C567), (Z_1304, l000000000040C577))
	C_1257 = PHI((C_1245, l000000000040C54C), (C_1295, l000000000040C550), (C_1295, l000000000040C559), (C_1295, l000000000040C562), (C_1305, l000000000040C567), (C_1305, l000000000040C577))
	rax_1258 = PHI((rax_1236, l000000000040C54C), (rax_1236, l000000000040C550), (rax_1296, l000000000040C559), (rax_1296, l000000000040C562), (rax_1296, l000000000040C567), (rax_1317, l000000000040C577))
	SCZO_1259 = PHI((SCZO_1242, l000000000040C54C), (SCZO_1242, l000000000040C550), (SCZO_1297, l000000000040C559), (SCZO_1299, l000000000040C562), (SCZO_1299, l000000000040C567), (SCZO_1315, l000000000040C577))
	rbx_1260 = PHI((rbx_1226, l000000000040C54C), (rbx_1226, l000000000040C550), (rbx_1226, l000000000040C559), (rbx_1226, l000000000040C562), (rbx_1301, l000000000040C567), (rbx_1301, l000000000040C577))
	r12_1261 = r8_1249
	r12d_1262 = (word32) r12_1261 (alias)
	rcx_1263 = 0x00000000CCCCCCCD
// DataOut: ebx fs r10 r10b r12 r13 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C5B0:
	r10_1264 = PHI((r10_1246, l000000000040C5A0), (r10_1282, l000000000040C5B0))
	r12_1265 = PHI((r12_1261, l000000000040C5A0), (r12_1267, l000000000040C5B0))
	rax_1266 = r10_1264
	r12_1267 = r12_1265 - 0x0000000000000001
	r12d_1268 = (word32) r12_1267 (alias)
	rdx_rax_1269 = 0x00000000CCCCCCCD *u rax_1266
	rdx_1270 = SLICE(rdx_rax_1269, word64, 64) (alias)
	rdx_1271 = rdx_1270 >>u 0x0000000000000003
	rax_1272 = rdx_1271 + rdx_1271 * 0x0000000000000004
	rax_1273 = rax_1272 + rax_1272
	r10_1274 = r10_1264 - rax_1273
	r10d_1275 = (word32) r10_1274 (alias)
	r10_1276 = (uint64) (r10d_1275 + 0x00000030)
	r10b_1277 = (byte) r10_1276 (alias)
	SZO_1278 = cond(rdx_1271 & rdx_1271)
	Z_1279 = (bool) SZO_1278 (alias)
	C_1280 = false
	Mem1281[r12_1267:byte] = r10b_1277
	r10_1282 = rdx_1271
	r10d_1283 = (word32) r10_1282 (alias)
	r10b_1284 = (byte) r10_1282 (alias)
	branch Test(NE,Z_1279) l000000000040C5B0
// DataOut: ebx fs r10 r10b r12 r13 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x00000000CCCCCCCD r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0xCD edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C5D8:
// DataOut: ebx fs r12 r13 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x00000000CCCCCCCD r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0xCD edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BE59:
	sil_476 = PHI((sil, l000000000040BE43), (sil, l000000000040C0E0), (sil_1650, l000000000040C0E9), (sil, l000000000040C2F0))
	r10_477 = PHI((r10, l000000000040BE43), (r10, l000000000040C0E0), (r10, l000000000040C0E9), (r10_1611, l000000000040C2F0))
	r10d_478 = PHI((r10d, l000000000040BE43), (r10d, l000000000040C0E0), (r10d, l000000000040C0E9), (r10d_1612, l000000000040C2F0))
	r10b_479 = PHI((r10b, l000000000040BE43), (r10b, l000000000040C0E0), (r10b, l000000000040C0E9), (r10b_1613, l000000000040C2F0))
	esi_480 = PHI((esi, l000000000040BE43), (esi, l000000000040C0E0), (esi_1651, l000000000040C0E9), (esi, l000000000040C2F0))
	rsi_481 = PHI((rsi, l000000000040BE43), (rsi, l000000000040C0E0), (rsi_1649, l000000000040C0E9), (rsi, l000000000040C2F0))
	ecx_482 = PHI((ecx_1602, l000000000040BE43), (ecx, l000000000040C0E0), (ecx, l000000000040C0E9), (ecx_1602, l000000000040C2F0))
	rcx_483 = PHI((rcx_1601, l000000000040BE43), (rcx_48, l000000000040C0E0), (rcx_48, l000000000040C0E9), (rcx_1601, l000000000040C2F0))
	cl_484 = PHI((cl_1603, l000000000040BE43), (cl, l000000000040C0E0), (cl, l000000000040C0E9), (cl_1603, l000000000040C2F0))
	rdx_485 = PHI((rdx_1590, l000000000040BE43), (rdx_71, l000000000040C0E0), (rdx_1644, l000000000040C0E9), (rdx_1617, l000000000040C2F0))
	Z_486 = PHI((Z_1599, l000000000040BE43), (Z_1631, l000000000040C0E0), (Z_1647, l000000000040C0E9), (Z_1620, l000000000040C2F0))
	rax_487 = PHI((rax_1591, l000000000040BE43), (rax_89, l000000000040C0E0), (rax_1645, l000000000040C0E9), (rax_1618, l000000000040C2F0))
	eax_488 = PHI((eax_1592, l000000000040BE43), (eax_82, l000000000040C0E0), (eax_82, l000000000040C0E9), (eax_1592, l000000000040C2F0))
	rdx_rax_489 = PHI((rdx_rax_1593, l000000000040BE43), (rdx_rax, l000000000040C0E0), (rdx_rax_1642, l000000000040C0E9), (rdx_rax_1615, l000000000040C2F0))
	edx_eax_490 = PHI((edx_eax_1594, l000000000040BE43), (edx_eax, l000000000040C0E0), (edx_eax, l000000000040C0E9), (edx_eax_1594, l000000000040C2F0))
	ah_491 = PHI((ah_1595, l000000000040BE43), (ah, l000000000040C0E0), (ah, l000000000040C0E9), (ah_1595, l000000000040C2F0))
	ax_492 = PHI((ax_1596, l000000000040BE43), (ax, l000000000040C0E0), (ax, l000000000040C0E9), (ax_1596, l000000000040C2F0))
	al_493 = PHI((al_1597, l000000000040BE43), (al, l000000000040C0E0), (al, l000000000040C0E9), (al_1597, l000000000040C2F0))
	SCZO_494 = PHI((SCZO_91, l000000000040BE43), (SCZO_91, l000000000040C0E0), (SCZO_91, l000000000040C0E9), (SCZO_1619, l000000000040C2F0))
	qwLoc80_495 = r12_23
	SZO_496 = cond(r12_23 & r12_23)
	S_497 = (bool) SZO_496 (alias)
	C_498 = false
	rLoc1_499 = (real64) qwLoc80_495
	branch (r12_23 & r12_23) < 0x0000000000000000 l000000000040C5F0
// DataOut: bx fs r11 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C5F0:
	rLoc1_1148 = rLoc1_499 + Mem0[0x0000000000415F08:real32]
	qwLoc80_1149 = rbx_32
	SZO_1150 = cond(rbx_32 & rbx_32)
	S_1151 = (bool) SZO_1150 (alias)
	C_1152 = false
	rLoc2_1153 = (real64) qwLoc80_1149
	branch Test(NS,S_1151) l000000000040BE7D
// DataOut: fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rdi -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BE6B:
	qwLoc80_1143 = rbx_32
	SZO_1144 = cond(rbx_32 & rbx_32)
	S_1145 = (bool) SZO_1144 (alias)
	C_1146 = false
	rLoc2_1147 = (real64) qwLoc80_1143
	branch Test(SG,S_1145) l000000000040C608
// DataOut: fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rdi -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C608:
	rLoc2_1136 = PHI((rLoc2_1147, l000000000040BE6B), (rLoc2_1153, l000000000040C5F0))
	qwLoc80_1137 = PHI((qwLoc80_1143, l000000000040BE6B), (qwLoc80_1149, l000000000040C5F0))
	S_1138 = PHI((S_1145, l000000000040BE6B), (S_1151, l000000000040C5F0))
	rLoc1_1139 = PHI((rLoc1_499, l000000000040BE6B), (rLoc1_1148, l000000000040C5F0))
	SZO_1140 = PHI((SZO_1144, l000000000040BE6B), (SZO_1150, l000000000040C5F0))
	C_1141 = PHI((C_1146, l000000000040BE6B), (C_1152, l000000000040C5F0))
	rLoc2_1142 = rLoc2_1136 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rcx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BE7D:
	rLoc2_500 = PHI((rLoc2_1147, l000000000040BE6B), (rLoc2_1142, l000000000040C608), (rLoc2_1153, l000000000040C5F0))
	rLoc1_501 = PHI((rLoc1_499, l000000000040BE6B), (rLoc1_1139, l000000000040C608), (rLoc1_1148, l000000000040C5F0))
	rax_502 = qwLocC0_43
	qwLoc80_503 = rax_502
	SZO_504 = cond(rax_502 & rax_502)
	S_505 = (bool) SZO_504 (alias)
	C_506 = false
	rLoc3_507 = (real64) qwLoc80_503
	branch (rax_502 & rax_502) < 0x0000000000000000 l000000000040C5E0
// DataOut: fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rcx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C5E0:
	rLoc3_1135 = rLoc3_507 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BE94:
	rLoc3_508 = PHI((rLoc3_507, l000000000040BE7D), (rLoc3_1135, l000000000040C5E0))
	SZO_509 = cond(bLocC8 & 0x10)
	Z_510 = (bool) SZO_509 (alias)
	C_511 = false
	rLoc2_512 = rLoc2_500 / rLoc3_508
	rLoc1_513 = rLoc1_501 * rLoc2_512
	branch (bLocC8 & 0x10) == 0x00 l000000000040C1B8
// DataOut: fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C1B8:
	SCZO_964 = cond(dwLocB0_35 - 0x00000001)
	Z_965 = (bool) SCZO_964 (alias)
	branch Test(EQ,Z_965) l000000000040C1CD
// DataOut: fs r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C1BF:
	rLoc2_1009 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_1010 = cond(rLoc2_1009 - rLoc1_513)
	CZ_1011 = CZP_1010 (alias)
	O_1012 = false
	S_1013 = false
	branch Test(UGT,CZ_1011) l000000000040C408
// DataOut: fs r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C408:
	rLoc2_1014 = (real64) Mem0[0x0000000000415F0C:real32]
	v70_1015 = rLoc2_1014
	rLoc2_1016 = rLoc1_513
	rLoc1_1017 = v70_1015
	CZP_1018 = cond(rLoc2_1016 - rLoc1_1017)
	C_1019 = (bool) CZP_1018 (alias)
	O_1020 = false
	S_1021 = false
	branch Test(UGE,C_1019) l000000000040C6A0
// DataOut: fs r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C6A0:
	wLoc82_1113 = __fstcw()
	eax_1114 = (word32) wLoc82_1113
	ah_1115 = SLICE(eax_1114, byte, 8) (alias)
	rLoc2_1116 = rLoc2_1016 - rLoc1_1017
	v71_1117 = rLoc2_1116
	rLoc2_1118 = rLoc1_1017
	rLoc1_1119 = v71_1117
	rdx_1120 = 0x0000000000000000
	ah_1121 = ah_1115 | 0x0C
	ax_1122 = DPB(ax_492, ah_1121, 8) (alias)
	wLoc84_1123 = ax_1122
	__fldcw(wLoc84_1123)
	qwLoc80_1124 = (int64) rLoc2_1118
	__fldcw(wLoc82_1113)
	rax_1125 = qwLoc80_1124
	rax_1126 = rax_1125 ^ 0x0000000000000000
	eax_1127 = (word32) rax_1126 (alias)
	rdx_rax_1128 = SEQ(rdx_1120, rax_1126) (alias)
	edx_eax_1129 = rax_1126 (alias)
	ah_1130 = SLICE(rax_1126, byte, 8) (alias)
	ax_1131 = (word16) rax_1126 (alias)
	al_1132 = (byte) rax_1126 (alias)
	SZO_1133 = cond(rax_1126)
	C_1134 = false
// DataOut: ax fs r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C418:
	rLoc1_1095 = rLoc2_1016
	wLoc82_1096 = __fstcw()
	eax_1097 = (word32) wLoc82_1096
	ah_1098 = SLICE(eax_1097, byte, 8) (alias)
	ah_1099 = ah_1098 | 0x0C
	ax_1100 = DPB(ax_492, ah_1099, 8) (alias)
	SZO_1101 = cond(ah_1099)
	C_1102 = false
	wLoc84_1103 = ax_1100
	rLoc2_1104 = rLoc2_1016
	__fldcw(wLoc84_1103)
	qwLoc80_1105 = (int64) rLoc2_1104
	__fldcw(wLoc82_1096)
	rax_1106 = qwLoc80_1105
	eax_1107 = (word32) rax_1106 (alias)
	rdx_rax_1108 = SEQ(rdx_485, rax_1106) (alias)
	edx_eax_1109 = rax_1106 (alias)
	ah_1110 = SLICE(rax_1106, byte, 8) (alias)
	ax_1111 = (word16) rax_1106 (alias)
	al_1112 = (byte) rax_1106 (alias)
// DataOut: ax fs r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C43E:
	wLoc82_1022 = PHI((wLoc82_1096, l000000000040C418), (wLoc82_1113, l000000000040C6A0))
	wLoc84_1023 = PHI((wLoc84_1103, l000000000040C418), (wLoc84_1123, l000000000040C6A0))
	rLoc2_1024 = PHI((rLoc2_1104, l000000000040C418), (rLoc2_1118, l000000000040C6A0))
	qwLoc80_1025 = PHI((qwLoc80_1105, l000000000040C418), (qwLoc80_1124, l000000000040C6A0))
	rLoc1_1026 = PHI((rLoc1_1095, l000000000040C418), (rLoc1_1119, l000000000040C6A0))
	rax_1027 = PHI((rax_1106, l000000000040C418), (rax_1126, l000000000040C6A0))
	eax_1028 = PHI((eax_1107, l000000000040C418), (eax_1127, l000000000040C6A0))
	ah_1029 = PHI((ah_1110, l000000000040C418), (ah_1130, l000000000040C6A0))
	ax_1030 = PHI((ax_1111, l000000000040C418), (ax_1131, l000000000040C6A0))
	al_1031 = PHI((al_1112, l000000000040C418), (al_1132, l000000000040C6A0))
	rsi_1032 = (uint64) dwLocB0_35
	esi_1033 = (word32) rsi_1032 (alias)
	rdx_1034 = 0x0000000000000000
	edx_1035 = (word32) rdx_1034 (alias)
	rdx_rax_1036 = SEQ(rdx_1034, rax_1027) (alias)
	edx_eax_1037 = rdx_1034 (alias)
	dl_1038 = (byte) rdx_1034 (alias)
	SZO_1039 = cond(esi_1033 & esi_1033)
	Z_1040 = (bool) SZO_1039 (alias)
	C_1041 = false
	branch Test(NE,Z_1040) l000000000040C470
// DataOut: ax fs r13 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C470:
	rLoc1_1094 = rLoc1_1026
// DataOut: fs r13 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C448:
	qwLoc80_1062 = rax_1027
	SZO_1063 = cond(rax_1027 & rax_1027)
	S_1064 = (bool) SZO_1063 (alias)
	C_1065 = false
	rLoc2_1066 = (real64) qwLoc80_1062
	branch Test(SG,S_1064) l000000000040C772
// DataOut: fs r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C772:
	rLoc2_1093 = rLoc2_1066 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C45A:
	rLoc2_1067 = PHI((rLoc2_1066, l000000000040C448), (rLoc2_1093, l000000000040C772))
	rcx_1068 = 0x0000000000000000
	rdx_1069 = 0x0000000000000001
	edx_1070 = (word32) rdx_1069 (alias)
	rdx_rax_1071 = SEQ(rdx_1069, rax_1027) (alias)
	edx_eax_1072 = rdx_1069 (alias)
	dl_1073 = (byte) rdx_1069 (alias)
	CZP_1074 = cond(rLoc2_1067 - rLoc1_1026)
	Z_1075 = (bool) CZP_1074 (alias)
	P_1076 = (bool) CZP_1074 (alias)
	O_1077 = false
	S_1078 = false
	rLoc1_1079 = rLoc1_1026
	cl_1080 = Test(PE,P_1076)
	rcx_1081 = DPB(rcx_1068, cl_1080, 0) (alias)
	ecx_1082 = DPB(ecx_482, cl_1080, 0) (alias)
	branch Test(NE,Z_1075) l000000000040C46C
// DataOut: fs r13 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C468_1:
	rdx_1088 = rcx_1081
	edx_1089 = (word32) rdx_1088 (alias)
	rdx_rax_1090 = SEQ(rdx_1088, rax_1027) (alias)
	edx_eax_1091 = rdx_1088 (alias)
	dl_1092 = (byte) rdx_1088 (alias)
// DataOut: fs r13 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> rsi:<invalid> cl:Test(PE,P) r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C46C:
	rdx_1083 = PHI((rdx_1069, l000000000040C45A), (rdx_1088, l000000000040C468_1))
	edx_1084 = PHI((edx_1070, l000000000040C45A), (edx_1089, l000000000040C468_1))
	dl_1085 = PHI((dl_1073, l000000000040C45A), (dl_1092, l000000000040C468_1))
	rdx_rax_1086 = PHI((rdx_rax_1071, l000000000040C45A), (rdx_rax_1090, l000000000040C468_1))
	edx_eax_1087 = PHI((edx_eax_1072, l000000000040C45A), (edx_eax_1091, l000000000040C468_1))
// DataOut: fs r13 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> cl:Test(PE,P) r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C472:
	rLoc2_1042 = PHI((rLoc2_1067, l000000000040C46C), (rLoc2_1024, l000000000040C470))
	CZP_1043 = PHI((CZP_1074, l000000000040C46C), (CZP_1018, l000000000040C470))
	P_1044 = PHI((P_1076, l000000000040C46C), (P, l000000000040C470))
	O_1045 = PHI((O_1077, l000000000040C46C), (O_1020, l000000000040C470))
	ecx_1046 = PHI((ecx_1082, l000000000040C46C), (ecx_482, l000000000040C470))
	rcx_1047 = PHI((rcx_1081, l000000000040C46C), (rcx_483, l000000000040C470))
	cl_1048 = PHI((cl_1080, l000000000040C46C), (cl_484, l000000000040C470))
	rdx_1049 = PHI((rdx_1083, l000000000040C46C), (rdx_1034, l000000000040C470))
	edx_1050 = PHI((edx_1084, l000000000040C46C), (edx_1035, l000000000040C470))
	dl_1051 = PHI((dl_1085, l000000000040C46C), (dl_1038, l000000000040C470))
	Z_1052 = PHI((Z_1075, l000000000040C46C), (Z_1040, l000000000040C470))
	rdx_rax_1053 = PHI((rdx_rax_1086, l000000000040C46C), (rdx_rax_1036, l000000000040C470))
	edx_eax_1054 = PHI((edx_eax_1087, l000000000040C46C), (edx_eax_1037, l000000000040C470))
	rax_1055 = rax_1027 + rdx_1049
	qwLoc80_1056 = rax_1055
	SZO_1057 = cond(rax_1055 & rax_1055)
	S_1058 = (bool) SZO_1057 (alias)
	C_1059 = false
	rLoc1_1060 = (real64) qwLoc80_1056
	branch Test(NS,S_1058) l000000000040C1CD
// DataOut: fs r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C487:
	rLoc1_1061 = rLoc1_1060 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C1CD:
	esi_968 = PHI((esi_480, l000000000040C1B8), (esi_480, l000000000040C1BF), (esi_1033, l000000000040C472), (esi_1033, l000000000040C487))
	wLoc82_969 = PHI((wLoc82, l000000000040C1B8), (wLoc82, l000000000040C1BF), (wLoc82_1022, l000000000040C472), (wLoc82_1022, l000000000040C487))
	wLoc84_970 = PHI((wLoc84, l000000000040C1B8), (wLoc84, l000000000040C1BF), (wLoc84_1023, l000000000040C472), (wLoc84_1023, l000000000040C487))
	rLoc2_971 = PHI((rLoc2_512, l000000000040C1B8), (rLoc2_1009, l000000000040C1BF), (rLoc2_1042, l000000000040C472), (rLoc2_1042, l000000000040C487))
	CZP_972 = PHI((CZP, l000000000040C1B8), (CZP_1010, l000000000040C1BF), (CZP_1043, l000000000040C472), (CZP_1043, l000000000040C487))
	P_973 = PHI((P, l000000000040C1B8), (P, l000000000040C1BF), (P_1044, l000000000040C472), (P_1044, l000000000040C487))
	O_974 = PHI((O, l000000000040C1B8), (O_1012, l000000000040C1BF), (O_1045, l000000000040C472), (O_1045, l000000000040C487))
	qwLoc80_975 = PHI((qwLoc80_503, l000000000040C1B8), (qwLoc80_503, l000000000040C1BF), (qwLoc80_1056, l000000000040C472), (qwLoc80_1056, l000000000040C487))
	S_976 = PHI((S_505, l000000000040C1B8), (S_1013, l000000000040C1BF), (S_1058, l000000000040C472), (S_1058, l000000000040C487))
	rLoc1_977 = PHI((rLoc1_513, l000000000040C1B8), (rLoc1_513, l000000000040C1BF), (rLoc1_1060, l000000000040C472), (rLoc1_1061, l000000000040C487))
	CZ_978 = PHI((CZ_92, l000000000040C1B8), (CZ_1011, l000000000040C1BF), (CZ_1011, l000000000040C472), (CZ_1011, l000000000040C487))
	ecx_979 = PHI((ecx_482, l000000000040C1B8), (ecx_482, l000000000040C1BF), (ecx_1046, l000000000040C472), (ecx_1046, l000000000040C487))
	cl_980 = PHI((cl_484, l000000000040C1B8), (cl_484, l000000000040C1BF), (cl_1048, l000000000040C472), (cl_1048, l000000000040C487))
	edx_981 = PHI((edx, l000000000040C1B8), (edx, l000000000040C1BF), (edx_1050, l000000000040C472), (edx_1050, l000000000040C487))
	dl_982 = PHI((dl, l000000000040C1B8), (dl, l000000000040C1BF), (dl_1051, l000000000040C472), (dl_1051, l000000000040C487))
	Z_983 = PHI((Z_965, l000000000040C1B8), (Z_965, l000000000040C1BF), (Z_1052, l000000000040C472), (Z_1052, l000000000040C487))
	rdx_rax_984 = PHI((rdx_rax_489, l000000000040C1B8), (rdx_rax_489, l000000000040C1BF), (rdx_rax_1053, l000000000040C472), (rdx_rax_1053, l000000000040C487))
	edx_eax_985 = PHI((edx_eax_490, l000000000040C1B8), (edx_eax_490, l000000000040C1BF), (edx_eax_1054, l000000000040C472), (edx_eax_1054, l000000000040C487))
	ah_986 = PHI((ah_491, l000000000040C1B8), (ah_491, l000000000040C1BF), (ah_1029, l000000000040C472), (ah_1029, l000000000040C487))
	ax_987 = PHI((ax_492, l000000000040C1B8), (ax_492, l000000000040C1BF), (ax_1030, l000000000040C472), (ax_1030, l000000000040C487))
	al_988 = PHI((al_493, l000000000040C1B8), (al_493, l000000000040C1BF), (al_1031, l000000000040C472), (al_1031, l000000000040C487))
	rLocE8_989 = (real80) rLoc1_977
	rbx_990 = qwLocB8_38
	rcx_991 = 0x0000000000415F18
	rdx_992 = 0xFFFFFFFFFFFFFFFF
	rsi_993 = 0x0000000000000001
	rax_994 = 0x0000000000000000
	r14_995 = 0x0000000000000000
	r14d_996 = (word32) r14_995 (alias)
	SZO_997 = cond(r14d_996)
	C_998 = false
	rdi_999 = rbx_990
	eax_1000 = __sprintf_chk(rdi_999, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18, tLocF0)
	rdi_1001 = rbx_990
	rbx_1002 = 0x00000000FFFFFFFF
	ebx_1003 = (word32) rbx_1002 (alias)
	eax_1004 = strlen(rdi_1001)
	rax_1005 = DPB(rax_994, eax_1004, 0) (alias)
	r15_1006 = rax_1005
	r15d_1007 = (word32) r15_1006 (alias)
// DataOut: ebx fs r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEA3:
	rLoc2_566 = (real64) dwLocC4_59
	rbx_567 = 0x0000000000000000
	ebx_568 = (word32) rbx_567 (alias)
	SZO_569 = cond(ebx_568)
	C_570 = false
	rLoc3_571 = rLoc3_508
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BEB4:
	rLoc4_573 = PHI((rLoc4, l000000000040BEA3), (rLoc4_584, l000000000040BEB0))
	rLoc3_574 = PHI((rLoc3_571, l000000000040BEA3), (rLoc3_960, l000000000040BEB0))
	rLoc1_575 = PHI((rLoc1_513, l000000000040BEA3), (rLoc1_961, l000000000040BEB0))
	ebx_576 = PHI((ebx_568, l000000000040BEA3), (ebx_581, l000000000040BEB0))
	Z_577 = PHI((Z_510, l000000000040BEA3), (Z_955, l000000000040BEB0))
	SCZO_578 = PHI((SCZO_494, l000000000040BEA3), (SCZO_954, l000000000040BEB0))
	rLoc4_579 = rLoc4_573
	rbx_580 = (uint64) (ebx_576 + 0x00000001)
	ebx_581 = (word32) rbx_580 (alias)
	rLoc4_582 = rLoc4_579 * rLoc2_566
	v45_583 = rLoc4_582
	rLoc4_584 = rLoc1_575
	rLoc1_585 = v45_583
	CZP_586 = cond(rLoc4_584 - rLoc1_585)
	C_587 = (bool) CZP_586 (alias)
	O_588 = false
	S_589 = false
	branch rLoc4_584 <u rLoc1_585 l000000000040BED0
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BED0:
	rLoc2_962 = rLoc4_584
	rLoc1_963 = rLoc3_574
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BEC1:
	SCZO_954 = cond(ebx_581 - 0x00000008)
	Z_955 = (bool) SCZO_954 (alias)
	branch Test(NE,Z_955) l000000000040BEB0
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BEB0:
	rLoc3_958 = rLoc4_584
	v56_959 = rLoc3_958
	rLoc3_960 = rLoc1_585
	rLoc1_961 = v56_959
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BEC6:
	rLoc2_956 = rLoc4_584
	rLoc1_957 = rLoc3_574
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BED4:
	rLoc2_590 = PHI((rLoc2_956, l000000000040BEC6), (rLoc2_962, l000000000040BED0))
	rLoc1_591 = PHI((rLoc1_957, l000000000040BEC6), (rLoc1_963, l000000000040BED0))
	rLoc1_592 = rLoc2_590 / rLoc1_591
	SCZO_593 = cond(dwLocB0_35 - 0x00000001)
	Z_594 = (bool) SCZO_593 (alias)
	rLoc2_595 = rLoc2_590
	branch dwLocB0_35 == 0x00000001 l000000000040BF70
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF70:
	v67_951 = rLoc2_595
	rLoc2_952 = rLoc1_592
	rLoc1_953 = v67_951
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BEE3:
	rLoc2_821 = rLoc2_595
	rLoc2_822 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_823 = cond(rLoc2_822 - rLoc1_592)
	CZ_824 = CZP_823 (alias)
	O_825 = false
	S_826 = false
	branch Test(ULE,CZ_824) l000000000040C498
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C498:
	rLoc2_947 = rLoc2_822
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BEF3:
	rLoc2_827 = (real64) Mem0[0x0000000000415F0C:real32]
	v52_828 = rLoc2_827
	rLoc2_829 = rLoc1_592
	rLoc1_830 = v52_828
	CZP_831 = cond(rLoc2_829 - rLoc1_830)
	C_832 = (bool) CZP_831 (alias)
	O_833 = false
	S_834 = false
	branch Test(UGE,C_832) l000000000040C660
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C660:
	wLoc82_925 = __fstcw()
	eax_926 = (word32) wLoc82_925
	ah_927 = SLICE(eax_926, byte, 8) (alias)
	rLoc2_928 = rLoc2_829 - rLoc1_830
	v61_929 = rLoc2_928
	rLoc2_930 = rLoc1_830
	rLoc1_931 = v61_929
	rdx_932 = 0x0000000000000000
	ah_933 = ah_927 | 0x0C
	ax_934 = DPB(ax_492, ah_933, 8) (alias)
	wLoc84_935 = ax_934
	__fldcw(wLoc84_935)
	qwLoc80_936 = (int64) rLoc2_930
	__fldcw(wLoc82_925)
	rax_937 = qwLoc80_936
	rax_938 = rax_937 ^ 0x0000000000000000
	eax_939 = (word32) rax_938 (alias)
	rdx_rax_940 = SEQ(rdx_932, rax_938) (alias)
	edx_eax_941 = rax_938 (alias)
	ah_942 = SLICE(rax_938, byte, 8) (alias)
	ax_943 = (word16) rax_938 (alias)
	al_944 = (byte) rax_938 (alias)
	SZO_945 = cond(rax_938)
	C_946 = false
// DataOut: al eax ebx fs r11 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF03:
	rLoc1_907 = rLoc2_829
	wLoc82_908 = __fstcw()
	eax_909 = (word32) wLoc82_908
	ah_910 = SLICE(eax_909, byte, 8) (alias)
	ah_911 = ah_910 | 0x0C
	ax_912 = DPB(ax_492, ah_911, 8) (alias)
	SZO_913 = cond(ah_911)
	C_914 = false
	wLoc84_915 = ax_912
	rLoc2_916 = rLoc2_829
	__fldcw(wLoc84_915)
	qwLoc80_917 = (int64) rLoc2_916
	__fldcw(wLoc82_908)
	rax_918 = qwLoc80_917
	eax_919 = (word32) rax_918 (alias)
	rdx_rax_920 = SEQ(rdx_485, rax_918) (alias)
	edx_eax_921 = rax_918 (alias)
	ah_922 = SLICE(rax_918, byte, 8) (alias)
	ax_923 = (word16) rax_918 (alias)
	al_924 = (byte) rax_918 (alias)
// DataOut: al eax ebx fs r11 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF29:
	wLoc82_835 = PHI((wLoc82_908, l000000000040BF03), (wLoc82_925, l000000000040C660))
	wLoc84_836 = PHI((wLoc84_915, l000000000040BF03), (wLoc84_935, l000000000040C660))
	rLoc2_837 = PHI((rLoc2_916, l000000000040BF03), (rLoc2_930, l000000000040C660))
	qwLoc80_838 = PHI((qwLoc80_917, l000000000040BF03), (qwLoc80_936, l000000000040C660))
	rLoc1_839 = PHI((rLoc1_907, l000000000040BF03), (rLoc1_931, l000000000040C660))
	rax_840 = PHI((rax_918, l000000000040BF03), (rax_938, l000000000040C660))
	eax_841 = PHI((eax_919, l000000000040BF03), (eax_939, l000000000040C660))
	ah_842 = PHI((ah_922, l000000000040BF03), (ah_942, l000000000040C660))
	ax_843 = PHI((ax_923, l000000000040BF03), (ax_943, l000000000040C660))
	al_844 = PHI((al_924, l000000000040BF03), (al_944, l000000000040C660))
	rcx_845 = (uint64) dwLocB0_35
	ecx_846 = (word32) rcx_845 (alias)
	rdx_847 = 0x0000000000000000
	edx_848 = (word32) rdx_847 (alias)
	rdx_rax_849 = SEQ(rdx_847, rax_840) (alias)
	edx_eax_850 = rdx_847 (alias)
	dl_851 = (byte) rdx_847 (alias)
	SZO_852 = cond(ecx_846 & ecx_846)
	Z_853 = (bool) SZO_852 (alias)
	C_854 = false
	branch Test(NE,Z_853) l000000000040BF55
// DataOut: al eax ebx fs r11 r13 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF33:
	qwLoc80_881 = rax_840
	SZO_882 = cond(rax_840 & rax_840)
	S_883 = (bool) SZO_882 (alias)
	C_884 = false
	rLoc2_885 = (real64) qwLoc80_881
	branch Test(SG,S_883) l000000000040C77D
// DataOut: ebx fs r11 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C77D:
	rLoc2_906 = rLoc2_885 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF45:
	rLoc2_886 = PHI((rLoc2_885, l000000000040BF33), (rLoc2_906, l000000000040C77D))
	rcx_887 = 0x0000000000000000
	rdx_888 = 0x0000000000000001
	edx_889 = (word32) rdx_888 (alias)
	rdx_rax_890 = SEQ(rdx_888, rax_840) (alias)
	edx_eax_891 = rdx_888 (alias)
	dl_892 = (byte) rdx_888 (alias)
	CZP_893 = cond(rLoc2_886 - rLoc1_839)
	Z_894 = (bool) CZP_893 (alias)
	P_895 = (bool) CZP_893 (alias)
	O_896 = false
	S_897 = false
	cl_898 = Test(PE,P_895)
	rcx_899 = DPB(rcx_887, cl_898, 0) (alias)
	ecx_900 = DPB(ecx_846, cl_898, 0) (alias)
	branch Test(NE,Z_894) l000000000040BF55
// DataOut: ebx fs r11 r13 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF51_1:
	rdx_901 = rcx_899
	edx_902 = (word32) rdx_901 (alias)
	rdx_rax_903 = SEQ(rdx_901, rax_840) (alias)
	edx_eax_904 = rdx_901 (alias)
	dl_905 = (byte) rdx_901 (alias)
// DataOut: ebx fs r11 r13 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> cl:Test(PE,P) r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF55:
	CZP_856 = PHI((CZP_893, l000000000040BF45), (CZP_893, l000000000040BF51_1), (CZP_831, l000000000040BF29))
	P_857 = PHI((P_895, l000000000040BF45), (P_895, l000000000040BF51_1), (P, l000000000040BF29))
	O_858 = PHI((O_896, l000000000040BF45), (O_896, l000000000040BF51_1), (O_833, l000000000040BF29))
	ecx_859 = PHI((ecx_900, l000000000040BF45), (ecx_900, l000000000040BF51_1), (ecx_846, l000000000040BF29))
	rcx_860 = PHI((rcx_899, l000000000040BF45), (rcx_899, l000000000040BF51_1), (rcx_845, l000000000040BF29))
	cl_861 = PHI((cl_898, l000000000040BF45), (cl_898, l000000000040BF51_1), (cl_484, l000000000040BF29))
	rdx_862 = PHI((rdx_888, l000000000040BF45), (rdx_901, l000000000040BF51_1), (rdx_847, l000000000040BF29))
	edx_863 = PHI((edx_889, l000000000040BF45), (edx_902, l000000000040BF51_1), (edx_848, l000000000040BF29))
	dl_864 = PHI((dl_892, l000000000040BF45), (dl_905, l000000000040BF51_1), (dl_851, l000000000040BF29))
	Z_865 = PHI((Z_894, l000000000040BF45), (Z_894, l000000000040BF51_1), (Z_853, l000000000040BF29))
	rdx_rax_866 = PHI((rdx_rax_890, l000000000040BF45), (rdx_rax_903, l000000000040BF51_1), (rdx_rax_849, l000000000040BF29))
	edx_eax_867 = PHI((edx_eax_891, l000000000040BF45), (edx_eax_904, l000000000040BF51_1), (edx_eax_850, l000000000040BF29))
	rax_868 = rax_840 + rdx_862
	qwLoc80_869 = rax_868
	SZO_870 = cond(rax_868 & rax_868)
	S_871 = (bool) SZO_870 (alias)
	C_872 = false
	rLoc2_873 = (real64) qwLoc80_869
	branch Test(SG,S_871) l000000000040C758
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C758:
	rLoc2_877 = rLoc2_873 + Mem0[0x0000000000415F08:real32]
	v63_878 = rLoc2_877
	rLoc2_879 = rLoc1_839
	rLoc1_880 = v63_878
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF6A:
	v60_874 = rLoc2_873
	rLoc2_875 = rLoc1_839
	rLoc1_876 = v60_874
// DataOut: ebx fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF72:
	wLoc82_596 = PHI((wLoc82_835, l000000000040BF6A), (wLoc82_835, l000000000040C758), (wLoc82, l000000000040C498), (wLoc82, l000000000040BF70))
	wLoc84_597 = PHI((wLoc84_836, l000000000040BF6A), (wLoc84_836, l000000000040C758), (wLoc84, l000000000040C498), (wLoc84, l000000000040BF70))
	rLoc2_598 = PHI((rLoc2_875, l000000000040BF6A), (rLoc2_879, l000000000040C758), (rLoc2_947, l000000000040C498), (rLoc2_952, l000000000040BF70))
	CZP_599 = PHI((CZP_856, l000000000040BF6A), (CZP_856, l000000000040C758), (CZP_823, l000000000040C498), (CZP_586, l000000000040BF70))
	P_600 = PHI((P_857, l000000000040BF6A), (P_857, l000000000040C758), (P, l000000000040C498), (P, l000000000040BF70))
	O_601 = PHI((O_858, l000000000040BF6A), (O_858, l000000000040C758), (O_825, l000000000040C498), (O_588, l000000000040BF70))
	qwLoc80_602 = PHI((qwLoc80_869, l000000000040BF6A), (qwLoc80_869, l000000000040C758), (qwLoc80_503, l000000000040C498), (qwLoc80_503, l000000000040BF70))
	S_603 = PHI((S_871, l000000000040BF6A), (S_871, l000000000040C758), (S_826, l000000000040C498), (S_589, l000000000040BF70))
	rLoc1_604 = PHI((rLoc1_876, l000000000040BF6A), (rLoc1_880, l000000000040C758), (rLoc1_592, l000000000040C498), (rLoc1_953, l000000000040BF70))
	ecx_605 = PHI((ecx_859, l000000000040BF6A), (ecx_859, l000000000040C758), (ecx_482, l000000000040C498), (ecx_482, l000000000040BF70))
	cl_606 = PHI((cl_861, l000000000040BF6A), (cl_861, l000000000040C758), (cl_484, l000000000040C498), (cl_484, l000000000040BF70))
	dl_607 = PHI((dl_864, l000000000040BF6A), (dl_864, l000000000040C758), (dl, l000000000040C498), (dl, l000000000040BF70))
	C_608 = PHI((C_872, l000000000040BF6A), (C_872, l000000000040C758), (C_587, l000000000040C498), (C_587, l000000000040BF70))
	rdx_rax_609 = PHI((rdx_rax_866, l000000000040BF6A), (rdx_rax_866, l000000000040C758), (rdx_rax_489, l000000000040C498), (rdx_rax_489, l000000000040BF70))
	edx_eax_610 = PHI((edx_eax_867, l000000000040BF6A), (edx_eax_867, l000000000040C758), (edx_eax_490, l000000000040C498), (edx_eax_490, l000000000040BF70))
	ah_611 = PHI((ah_842, l000000000040BF6A), (ah_842, l000000000040C758), (ah_491, l000000000040C498), (ah_491, l000000000040BF70))
	ax_612 = PHI((ax_843, l000000000040BF6A), (ax_843, l000000000040C758), (ax_492, l000000000040C498), (ax_492, l000000000040BF70))
	r14_613 = qwLocB8_38
	rdx_614 = 0xFFFFFFFFFFFFFFFF
	rcx_615 = 0x0000000000415F1E
	rsi_616 = 0x0000000000000001
	rax_617 = 0x0000000000000000
	qwLoc98_618 = r11_87
	rdi_619 = r14_613
	rLocA8_620 = (real80) rLoc2_598
	rLocE8_621 = (real80) rLoc1_604
	eax_623 = __sprintf_chk(rdi_619, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F1E, tLocF0)
	rdi_624 = r14_613
	eax_625 = strlen(rdi_624)
	rax_626 = DPB(rax_617, eax_625, 0) (alias)
	r11_627 = qwLoc98_618
	rdx_628 = (uint64) dwLoc90_51
	edx_629 = (word32) rdx_628 (alias)
	r15_630 = rax_626
	r15d_631 = (word32) r15_630 (alias)
	rax_632 = 0x0000000000000000
	rLoc1_633 = (real64) rLocA8_620
	SZO_634 = cond(edx_629 & edx_629)
	Z_635 = (bool) SZO_634 (alias)
	r14_636 = r11_627 + 0x0000000000000001
	r14d_637 = (word32) r14_636 (alias)
	al_638 = (edx_629 & edx_629) == 0x00000000
	rax_639 = DPB(rax_632, al_638, 0) (alias)
	rax_640 = r14_636 + 0x0000000000000001 + rax_639
	SCZO_641 = cond(r15_630 - rax_640)
	CZ_642 = SCZO_641 (alias)
	branch r15_630 >u rax_640 l000000000040BFF0
// DataOut: ebx fs r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BFCB:
	SZO_813 = cond(bLocC8 & 0x08)
	Z_814 = (bool) SZO_813 (alias)
	C_815 = false
	branch Test(EQ,Z_814) l000000000040C208
// DataOut: ebx fs r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C208:
	rLoc1_820 = rLoc1_633
// DataOut: ebx fs r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BFD6:
	rax_816 = qwLocB8_38
	SCZO_817 = cond(Mem0[rax_816 - 0x0000000000000001 + r15_630:byte] - 0x30)
	Z_818 = (bool) SCZO_817 (alias)
	branch Test(NE,Z_818) l000000000040C210
// DataOut: ebx fs r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C210:
	rLoc1_819 = rLoc1_633
// DataOut: ebx fs r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BFE7:
// DataOut: ebx fs r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BFF0:
	SZO_643 = PHI((SZO_634, l000000000040BF72), (SZO_813, l000000000040BFE7))
	C_644 = PHI((C_608, l000000000040BF72), (C_815, l000000000040BFE7))
	rax_645 = PHI((rax_640, l000000000040BF72), (rax_816, l000000000040BFE7))
	SCZO_646 = cond(dwLocB0_35 - 0x00000001)
	Z_647 = (bool) SCZO_646 (alias)
	rLoc1_648 = rLoc1_633 * Mem0[0x0000000000415F84:real32]
	branch dwLocB0_35 == 0x00000001 l000000000040C0A0
// DataOut: ebx fs r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C001:
	rLoc2_687 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_688 = cond(rLoc2_687 - rLoc1_648)
	CZ_689 = CZP_688 (alias)
	O_690 = false
	S_691 = false
	branch rLoc2_687 <=u rLoc1_648 l000000000040C0A0
// DataOut: ebx fs r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C00F:
	rLoc2_692 = (real64) Mem0[0x0000000000415F0C:real32]
	v64_693 = rLoc2_692
	rLoc2_694 = rLoc1_648
	rLoc1_695 = v64_693
	CZP_696 = cond(rLoc2_694 - rLoc1_695)
	C_697 = (bool) CZP_696 (alias)
	O_698 = false
	S_699 = false
	branch rLoc2_694 >=u rLoc1_695 l000000000040C720
// DataOut: ebx fs r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C720:
	wLoc82_791 = __fstcw()
	eax_792 = (word32) wLoc82_791
	ah_793 = SLICE(eax_792, byte, 8) (alias)
	rLoc2_794 = rLoc2_694 - rLoc1_695
	v65_795 = rLoc2_794
	rLoc2_796 = rLoc1_695
	rLoc1_797 = v65_795
	rdx_798 = 0x0000000000000000
	ah_799 = ah_793 | 0x0C
	ax_800 = DPB(ax_612, ah_799, 8) (alias)
	wLoc84_801 = ax_800
	__fldcw(wLoc84_801)
	qwLoc80_802 = (int64) rLoc2_796
	__fldcw(wLoc82_791)
	rax_803 = qwLoc80_802
	rax_804 = rax_803 ^ 0x0000000000000000
	eax_805 = (word32) rax_804 (alias)
	rdx_rax_806 = SEQ(rdx_798, rax_804) (alias)
	edx_eax_807 = rax_804 (alias)
	ah_808 = SLICE(rax_804, byte, 8) (alias)
	ax_809 = (word16) rax_804 (alias)
	al_810 = (byte) rax_804 (alias)
	SZO_811 = cond(rax_804)
	C_812 = false
// DataOut: ax eax ebx fs r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C01F:
	rLoc1_773 = rLoc2_694
	wLoc82_774 = __fstcw()
	eax_775 = (word32) wLoc82_774
	ah_776 = SLICE(eax_775, byte, 8) (alias)
	ah_777 = ah_776 | 0x0C
	ax_778 = DPB(ax_612, ah_777, 8) (alias)
	SZO_779 = cond(ah_777)
	C_780 = false
	wLoc84_781 = ax_778
	rLoc2_782 = rLoc2_694
	__fldcw(wLoc84_781)
	qwLoc80_783 = (int64) rLoc2_782
	__fldcw(wLoc82_774)
	rax_784 = qwLoc80_783
	eax_785 = (word32) rax_784 (alias)
	rdx_rax_786 = SEQ(rdx_628, rax_784) (alias)
	edx_eax_787 = rax_784 (alias)
	ah_788 = SLICE(rax_784, byte, 8) (alias)
	ax_789 = (word16) rax_784 (alias)
	al_790 = (byte) rax_784 (alias)
// DataOut: ax eax ebx fs r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C045:
	wLoc82_700 = PHI((wLoc82_774, l000000000040C01F), (wLoc82_791, l000000000040C720))
	wLoc84_701 = PHI((wLoc84_781, l000000000040C01F), (wLoc84_801, l000000000040C720))
	rLoc2_702 = PHI((rLoc2_782, l000000000040C01F), (rLoc2_796, l000000000040C720))
	qwLoc80_703 = PHI((qwLoc80_783, l000000000040C01F), (qwLoc80_802, l000000000040C720))
	rLoc1_704 = PHI((rLoc1_773, l000000000040C01F), (rLoc1_797, l000000000040C720))
	rax_705 = PHI((rax_784, l000000000040C01F), (rax_804, l000000000040C720))
	eax_706 = PHI((eax_785, l000000000040C01F), (eax_805, l000000000040C720))
	ah_707 = PHI((ah_788, l000000000040C01F), (ah_808, l000000000040C720))
	ax_708 = PHI((ax_789, l000000000040C01F), (ax_809, l000000000040C720))
	al_709 = PHI((al_790, l000000000040C01F), (al_810, l000000000040C720))
	r14_710 = (uint64) dwLocB0_35
	r14d_711 = (word32) r14_710 (alias)
	rdx_712 = 0x0000000000000000
	edx_713 = (word32) rdx_712 (alias)
	rdx_rax_714 = SEQ(rdx_712, rax_705) (alias)
	edx_eax_715 = rdx_712 (alias)
	dl_716 = (byte) rdx_712 (alias)
	SZO_717 = cond(r14d_711 & r14d_711)
	Z_718 = (bool) SZO_717 (alias)
	C_719 = false
	branch (r14d_711 & r14d_711) != 0x00000000 l000000000040C080
// DataOut: ax eax ebx fs r13 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C080:
	rLoc1_772 = rLoc1_704
// DataOut: ebx fs r13 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C051:
	qwLoc80_740 = rax_705
	SZO_741 = cond(rax_705 & rax_705)
	S_742 = (bool) SZO_741 (alias)
	C_743 = false
	rLoc2_744 = (real64) qwLoc80_740
	branch (rax_705 & rax_705) < 0x0000000000000000 l000000000040C79E
// DataOut: ebx fs r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C79E:
	rLoc2_771 = rLoc2_744 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C063:
	rLoc2_745 = PHI((rLoc2_744, l000000000040C051), (rLoc2_771, l000000000040C79E))
	rcx_746 = 0x0000000000000000
	rdx_747 = 0x0000000000000001
	edx_748 = (word32) rdx_747 (alias)
	rdx_rax_749 = SEQ(rdx_747, rax_705) (alias)
	edx_eax_750 = rdx_747 (alias)
	dl_751 = (byte) rdx_747 (alias)
	CZP_752 = cond(rLoc2_745 - rLoc1_704)
	Z_753 = (bool) CZP_752 (alias)
	P_754 = (bool) CZP_752 (alias)
	O_755 = false
	S_756 = false
	rLoc1_757 = rLoc1_704
	cl_758 = Test(PE,P_754)
	rcx_759 = DPB(rcx_746, cl_758, 0) (alias)
	ecx_760 = DPB(ecx_605, cl_758, 0) (alias)
	branch rLoc2_745 != rLoc1_704 l000000000040C075
// DataOut: ebx fs r13 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C071_1:
	rdx_766 = rcx_759
	edx_767 = (word32) rdx_766 (alias)
	rdx_rax_768 = SEQ(rdx_766, rax_705) (alias)
	edx_eax_769 = rdx_766 (alias)
	dl_770 = (byte) rdx_766 (alias)
// DataOut: ebx fs r13 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> cl:Test(PE,P) r10:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C075:
	rdx_761 = PHI((rdx_747, l000000000040C063), (rdx_766, l000000000040C071_1))
	edx_762 = PHI((edx_748, l000000000040C063), (edx_767, l000000000040C071_1))
	dl_763 = PHI((dl_751, l000000000040C063), (dl_770, l000000000040C071_1))
	rdx_rax_764 = PHI((rdx_rax_749, l000000000040C063), (rdx_rax_768, l000000000040C071_1))
	edx_eax_765 = PHI((edx_eax_750, l000000000040C063), (edx_eax_769, l000000000040C071_1))
// DataOut: ebx fs r13 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> cl:Test(PE,P) r10:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C082:
	rLoc2_720 = PHI((rLoc2_745, l000000000040C075), (rLoc2_702, l000000000040C080))
	CZP_721 = PHI((CZP_752, l000000000040C075), (CZP_696, l000000000040C080))
	P_722 = PHI((P_754, l000000000040C075), (P_600, l000000000040C080))
	O_723 = PHI((O_755, l000000000040C075), (O_698, l000000000040C080))
	ecx_724 = PHI((ecx_760, l000000000040C075), (ecx_605, l000000000040C080))
	rcx_725 = PHI((rcx_759, l000000000040C075), (rcx_615, l000000000040C080))
	cl_726 = PHI((cl_758, l000000000040C075), (cl_606, l000000000040C080))
	rdx_727 = PHI((rdx_761, l000000000040C075), (rdx_712, l000000000040C080))
	edx_728 = PHI((edx_762, l000000000040C075), (edx_713, l000000000040C080))
	dl_729 = PHI((dl_763, l000000000040C075), (dl_716, l000000000040C080))
	Z_730 = PHI((Z_753, l000000000040C075), (Z_718, l000000000040C080))
	rdx_rax_731 = PHI((rdx_rax_764, l000000000040C075), (rdx_rax_714, l000000000040C080))
	edx_eax_732 = PHI((edx_eax_765, l000000000040C075), (edx_eax_715, l000000000040C080))
	rax_733 = rax_705 + rdx_727
	qwLoc80_734 = rax_733
	SZO_735 = cond(rax_733 & rax_733)
	S_736 = (bool) SZO_735 (alias)
	C_737 = false
	rLoc1_738 = (real64) qwLoc80_734
	branch (rax_733 & rax_733) >= 0x0000000000000000 l000000000040C0A0
// DataOut: ebx fs r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C093:
	rLoc1_739 = rLoc1_738 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C0A0:
	wLoc82_649 = PHI((wLoc82_596, l000000000040BFF0), (wLoc82_596, l000000000040C001), (wLoc82_700, l000000000040C082), (wLoc82_700, l000000000040C093))
	wLoc84_650 = PHI((wLoc84_597, l000000000040BFF0), (wLoc84_597, l000000000040C001), (wLoc84_701, l000000000040C082), (wLoc84_701, l000000000040C093))
	rLoc2_651 = PHI((rLoc2_598, l000000000040BFF0), (rLoc2_687, l000000000040C001), (rLoc2_720, l000000000040C082), (rLoc2_720, l000000000040C093))
	CZP_652 = PHI((CZP_599, l000000000040BFF0), (CZP_688, l000000000040C001), (CZP_721, l000000000040C082), (CZP_721, l000000000040C093))
	P_653 = PHI((P_600, l000000000040BFF0), (P_600, l000000000040C001), (P_722, l000000000040C082), (P_722, l000000000040C093))
	O_654 = PHI((O_601, l000000000040BFF0), (O_690, l000000000040C001), (O_723, l000000000040C082), (O_723, l000000000040C093))
	qwLoc80_655 = PHI((qwLoc80_602, l000000000040BFF0), (qwLoc80_602, l000000000040C001), (qwLoc80_734, l000000000040C082), (qwLoc80_734, l000000000040C093))
	S_656 = PHI((S_603, l000000000040BFF0), (S_691, l000000000040C001), (S_736, l000000000040C082), (S_736, l000000000040C093))
	rLoc1_657 = PHI((rLoc1_648, l000000000040BFF0), (rLoc1_648, l000000000040C001), (rLoc1_738, l000000000040C082), (rLoc1_739, l000000000040C093))
	CZ_658 = PHI((CZ_642, l000000000040BFF0), (CZ_689, l000000000040C001), (CZ_689, l000000000040C082), (CZ_689, l000000000040C093))
	ecx_659 = PHI((ecx_605, l000000000040BFF0), (ecx_605, l000000000040C001), (ecx_724, l000000000040C082), (ecx_724, l000000000040C093))
	cl_660 = PHI((cl_606, l000000000040BFF0), (cl_606, l000000000040C001), (cl_726, l000000000040C082), (cl_726, l000000000040C093))
	edx_661 = PHI((edx_629, l000000000040BFF0), (edx_629, l000000000040C001), (edx_728, l000000000040C082), (edx_728, l000000000040C093))
	dl_662 = PHI((dl_607, l000000000040BFF0), (dl_607, l000000000040C001), (dl_729, l000000000040C082), (dl_729, l000000000040C093))
	Z_663 = PHI((Z_647, l000000000040BFF0), (Z_647, l000000000040C001), (Z_730, l000000000040C082), (Z_730, l000000000040C093))
	rdx_rax_664 = PHI((rdx_rax_609, l000000000040BFF0), (rdx_rax_609, l000000000040C001), (rdx_rax_731, l000000000040C082), (rdx_rax_731, l000000000040C093))
	edx_eax_665 = PHI((edx_eax_610, l000000000040BFF0), (edx_eax_610, l000000000040C001), (edx_eax_732, l000000000040C082), (edx_eax_732, l000000000040C093))
	ah_666 = PHI((ah_611, l000000000040BFF0), (ah_611, l000000000040C001), (ah_707, l000000000040C082), (ah_707, l000000000040C093))
	ax_667 = PHI((ax_612, l000000000040BFF0), (ax_612, l000000000040C001), (ax_708, l000000000040C082), (ax_708, l000000000040C093))
	al_668 = PHI((al_638, l000000000040BFF0), (al_638, l000000000040C001), (al_709, l000000000040C082), (al_709, l000000000040C093))
	rLoc1_669 = rLoc1_657 / Mem0[0x0000000000415F84:real32]
	r14_670 = qwLocB8_38
	rcx_671 = 0x0000000000415F18
	rdx_672 = 0xFFFFFFFFFFFFFFFF
	rsi_673 = 0x0000000000000001
	rax_674 = 0x0000000000000000
	rdi_675 = r14_670
	rLocE8_676 = (real80) rLoc1_669
	eax_677 = __sprintf_chk(rdi_675, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18, tLocF0)
	rdi_678 = r14_670
	r14_679 = 0x0000000000000000
	r14d_680 = (word32) r14_679 (alias)
	SZO_681 = cond(r14d_680)
	C_682 = false
	eax_683 = strlen(rdi_678)
	rax_684 = DPB(rax_674, eax_683, 0) (alias)
	r15_685 = rax_684
	r15d_686 = (word32) r15_685 (alias)
// DataOut: ebx fs r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C218:
	esi_514 = PHI((esi_480, l000000000040C210), (esi_480, l000000000040C208), (esi_480, l000000000040C0A0), (esi_968, l000000000040C1CD))
	rLoc4_515 = PHI((rLoc4_584, l000000000040C210), (rLoc4_584, l000000000040C208), (rLoc4_584, l000000000040C0A0), (rLoc4, l000000000040C1CD))
	rLoc3_516 = PHI((rLoc3_574, l000000000040C210), (rLoc3_574, l000000000040C208), (rLoc3_574, l000000000040C0A0), (rLoc3_508, l000000000040C1CD))
	qwLoc98_517 = PHI((qwLoc98_618, l000000000040C210), (qwLoc98_618, l000000000040C208), (qwLoc98_618, l000000000040C0A0), (qwLoc98_81, l000000000040C1CD))
	rLocA8_518 = PHI((rLocA8_620, l000000000040C210), (rLocA8_620, l000000000040C208), (rLocA8_620, l000000000040C0A0), (rLocA8, l000000000040C1CD))
	r11_519 = PHI((r11_627, l000000000040C210), (r11_627, l000000000040C208), (r11_627, l000000000040C0A0), (r11_87, l000000000040C1CD))
	wLoc82_520 = PHI((wLoc82_596, l000000000040C210), (wLoc82_596, l000000000040C208), (wLoc82_649, l000000000040C0A0), (wLoc82_969, l000000000040C1CD))
	wLoc84_521 = PHI((wLoc84_597, l000000000040C210), (wLoc84_597, l000000000040C208), (wLoc84_650, l000000000040C0A0), (wLoc84_970, l000000000040C1CD))
	rLoc2_522 = PHI((rLoc2_598, l000000000040C210), (rLoc2_598, l000000000040C208), (rLoc2_651, l000000000040C0A0), (rLoc2_971, l000000000040C1CD))
	CZP_523 = PHI((CZP_599, l000000000040C210), (CZP_599, l000000000040C208), (CZP_652, l000000000040C0A0), (CZP_972, l000000000040C1CD))
	P_524 = PHI((P_600, l000000000040C210), (P_600, l000000000040C208), (P_653, l000000000040C0A0), (P_973, l000000000040C1CD))
	O_525 = PHI((O_601, l000000000040C210), (O_601, l000000000040C208), (O_654, l000000000040C0A0), (O_974, l000000000040C1CD))
	qwLoc80_526 = PHI((qwLoc80_602, l000000000040C210), (qwLoc80_602, l000000000040C208), (qwLoc80_655, l000000000040C0A0), (qwLoc80_975, l000000000040C1CD))
	S_527 = PHI((S_603, l000000000040C210), (S_603, l000000000040C208), (S_656, l000000000040C0A0), (S_976, l000000000040C1CD))
	rLoc1_528 = PHI((rLoc1_819, l000000000040C210), (rLoc1_820, l000000000040C208), (rLoc1_669, l000000000040C0A0), (rLoc1_977, l000000000040C1CD))
	rLocE8_529 = PHI((rLocE8_621, l000000000040C210), (rLocE8_621, l000000000040C208), (rLocE8_676, l000000000040C0A0), (rLocE8_989, l000000000040C1CD))
	r14d_530 = PHI((r14d_637, l000000000040C210), (r14d_637, l000000000040C208), (r14d_680, l000000000040C0A0), (r14d_996, l000000000040C1CD))
	CZ_531 = PHI((CZ_642, l000000000040C210), (CZ_642, l000000000040C208), (CZ_658, l000000000040C0A0), (CZ_978, l000000000040C1CD))
	ebx_532 = PHI((ebx_581, l000000000040C210), (ebx_581, l000000000040C208), (ebx_581, l000000000040C0A0), (ebx_1003, l000000000040C1CD))
	ecx_533 = PHI((ecx_605, l000000000040C210), (ecx_605, l000000000040C208), (ecx_659, l000000000040C0A0), (ecx_979, l000000000040C1CD))
	rcx_534 = PHI((rcx_615, l000000000040C210), (rcx_615, l000000000040C208), (rcx_671, l000000000040C0A0), (rcx_991, l000000000040C1CD))
	cl_535 = PHI((cl_606, l000000000040C210), (cl_606, l000000000040C208), (cl_660, l000000000040C0A0), (cl_980, l000000000040C1CD))
	edx_536 = PHI((edx_629, l000000000040C210), (edx_629, l000000000040C208), (edx_661, l000000000040C0A0), (edx_981, l000000000040C1CD))
	dl_537 = PHI((dl_607, l000000000040C210), (dl_607, l000000000040C208), (dl_662, l000000000040C0A0), (dl_982, l000000000040C1CD))
	SZO_538 = PHI((SZO_813, l000000000040C210), (SZO_813, l000000000040C208), (SZO_681, l000000000040C0A0), (SZO_997, l000000000040C1CD))
	Z_539 = PHI((Z_818, l000000000040C210), (Z_814, l000000000040C208), (Z_663, l000000000040C0A0), (Z_983, l000000000040C1CD))
	C_540 = PHI((C_815, l000000000040C210), (C_815, l000000000040C208), (C_682, l000000000040C0A0), (C_998, l000000000040C1CD))
	eax_541 = PHI((eax_625, l000000000040C210), (eax_625, l000000000040C208), (eax_683, l000000000040C0A0), (eax_1004, l000000000040C1CD))
	rdx_rax_542 = PHI((rdx_rax_609, l000000000040C210), (rdx_rax_609, l000000000040C208), (rdx_rax_664, l000000000040C0A0), (rdx_rax_984, l000000000040C1CD))
	edx_eax_543 = PHI((edx_eax_610, l000000000040C210), (edx_eax_610, l000000000040C208), (edx_eax_665, l000000000040C0A0), (edx_eax_985, l000000000040C1CD))
	ah_544 = PHI((ah_611, l000000000040C210), (ah_611, l000000000040C208), (ah_666, l000000000040C0A0), (ah_986, l000000000040C1CD))
	ax_545 = PHI((ax_612, l000000000040C210), (ax_612, l000000000040C208), (ax_667, l000000000040C0A0), (ax_987, l000000000040C1CD))
	al_546 = PHI((al_638, l000000000040C210), (al_638, l000000000040C208), (al_668, l000000000040C0A0), (al_988, l000000000040C1CD))
	rbx_547 = PHI((rbx_580, l000000000040C210), (rbx_580, l000000000040C208), (rbx_580, l000000000040C0A0), (rbx_1002, l000000000040C1CD))
	r14_548 = PHI((r14_636, l000000000040C210), (r14_636, l000000000040C208), (r14_679, l000000000040C0A0), (r14_995, l000000000040C1CD))
	r15_549 = PHI((r15_630, l000000000040C210), (r15_630, l000000000040C208), (r15_685, l000000000040C0A0), (r15_1006, l000000000040C1CD))
	r15d_550 = PHI((r15d_631, l000000000040C210), (r15d_631, l000000000040C208), (r15d_686, l000000000040C0A0), (r15d_1007, l000000000040C1CD))
	r12_551 = qwLocD0_93
	rsi_552 = qwLocB8_38
	rdx_553 = r15_549
	r12_554 = r12_551 - r15_549
	r12d_555 = (word32) r12_554 (alias)
	r15_556 = r15_549 - r14_548
	SCZO_557 = cond(r15_556)
	rdi_558 = r12_554
	rax_559 = memmove(rdi_558, rsi_552, rdx_553)
	r8_560 = r12_554 + r15_556
// DataOut: ebx fs r12 r13 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 r10:<invalid> al:<invalid> ah:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C237:
	sil_94 = PHI((sil_476, l000000000040C218), (sil_1191, l000000000040C5D8))
	dwLoc8C_95 = PHI((dwLoc8C, l000000000040C218), (dwLoc8C_1192, l000000000040C5D8))
	qwLocA8_96 = PHI((qwLocA8, l000000000040C218), (qwLocA8_1193, l000000000040C5D8))
	dil_97 = PHI((dil_76, l000000000040C218), (dil_1194, l000000000040C5D8))
	edi_98 = PHI((edi_75, l000000000040C218), (edi_1230, l000000000040C5D8))
	r10_99 = PHI((r10_477, l000000000040C218), (r10_1282, l000000000040C5D8))
	r10d_100 = PHI((r10d_478, l000000000040C218), (r10d_1283, l000000000040C5D8))
	r10b_101 = PHI((r10b_479, l000000000040C218), (r10b_1284, l000000000040C5D8))
	esi_102 = PHI((esi_514, l000000000040C218), (esi_1231, l000000000040C5D8))
	rLoc4_103 = PHI((rLoc4_515, l000000000040C218), (rLoc4, l000000000040C5D8))
	rLoc3_104 = PHI((rLoc3_516, l000000000040C218), (rLoc3, l000000000040C5D8))
	qwLoc98_105 = PHI((qwLoc98_517, l000000000040C218), (qwLoc98_1200, l000000000040C5D8))
	rLocA8_106 = PHI((rLocA8_518, l000000000040C218), (rLocA8, l000000000040C5D8))
	r11_107 = PHI((r11_519, l000000000040C218), (r11_1201, l000000000040C5D8))
	wLoc82_108 = PHI((wLoc82_520, l000000000040C218), (wLoc82, l000000000040C5D8))
	wLoc84_109 = PHI((wLoc84_521, l000000000040C218), (wLoc84, l000000000040C5D8))
	rLoc2_110 = PHI((rLoc2_522, l000000000040C218), (rLoc2, l000000000040C5D8))
	CZP_111 = PHI((CZP_523, l000000000040C218), (CZP_1161, l000000000040C5D8))
	P_112 = PHI((P_524, l000000000040C218), (P, l000000000040C5D8))
	O_113 = PHI((O_525, l000000000040C218), (O_1162, l000000000040C5D8))
	qwLoc80_114 = PHI((qwLoc80_526, l000000000040C218), (qwLoc80, l000000000040C5D8))
	S_115 = PHI((S_527, l000000000040C218), (S_1163, l000000000040C5D8))
	rLoc1_116 = PHI((rLoc1_528, l000000000040C218), (rLoc1, l000000000040C5D8))
	rLocE8_117 = PHI((rLocE8_529, l000000000040C218), (rLocE8, l000000000040C5D8))
	r8_118 = PHI((r8_560, l000000000040C218), (r8_1249, l000000000040C5D8))
	qwLocB0_119 = PHI((qwLocB0, l000000000040C218), (qwLocB0_1250, l000000000040C5D8))
	r9_120 = PHI((r9, l000000000040C218), (r9_1203, l000000000040C5D8))
	r9d_121 = PHI((r9d, l000000000040C218), (r9d_1204, l000000000040C5D8))
	r12d_122 = PHI((r12d_555, l000000000040C218), (r12d_1268, l000000000040C5D8))
	r14d_123 = PHI((r14d_530, l000000000040C218), (r14d_1206, l000000000040C5D8))
	CZ_124 = PHI((CZ_531, l000000000040C218), (CZ_1207, l000000000040C5D8))
	ebx_125 = PHI((ebx_532, l000000000040C218), (ebx_1251, l000000000040C5D8))
	rsi_126 = PHI((rsi_552, l000000000040C218), (rsi_1252, l000000000040C5D8))
	ecx_127 = PHI((ecx_533, l000000000040C218), (ecx_1233, l000000000040C5D8))
	rcx_128 = PHI((rcx_534, l000000000040C218), (rcx_1263, l000000000040C5D8))
	cl_129 = PHI((cl_535, l000000000040C218), (cl_1212, l000000000040C5D8))
	rdx_130 = PHI((rdx_553, l000000000040C218), (rdx_1271, l000000000040C5D8))
	edx_131 = PHI((edx_536, l000000000040C218), (edx_1214, l000000000040C5D8))
	dl_132 = PHI((dl_537, l000000000040C218), (dl_1215, l000000000040C5D8))
	rdi_133 = PHI((rdi_558, l000000000040C218), (rdi_1254, l000000000040C5D8))
	rax_134 = PHI((rax_559, l000000000040C218), (rax_1273, l000000000040C5D8))
	eax_135 = PHI((eax_541, l000000000040C218), (eax_1237, l000000000040C5D8))
	rdx_rax_136 = PHI((rdx_rax_542, l000000000040C218), (rdx_rax_1269, l000000000040C5D8))
	edx_eax_137 = PHI((edx_eax_543, l000000000040C218), (edx_eax_1239, l000000000040C5D8))
	ah_138 = PHI((ah_544, l000000000040C218), (ah_1223, l000000000040C5D8))
	ax_139 = PHI((ax_545, l000000000040C218), (ax_1240, l000000000040C5D8))
	al_140 = PHI((al_546, l000000000040C218), (al_1241, l000000000040C5D8))
	SCZO_141 = PHI((SCZO_557, l000000000040C218), (SCZO_1259, l000000000040C5D8))
	rbx_142 = PHI((rbx_547, l000000000040C218), (rbx_1260, l000000000040C5D8))
	r12_143 = PHI((r12_554, l000000000040C218), (r12_1267, l000000000040C5D8))
	r14_144 = PHI((r14_548, l000000000040C218), (r14_14, l000000000040C5D8))
	r15_145 = PHI((r15_556, l000000000040C218), (r15_79, l000000000040C5D8))
	r15d_146 = PHI((r15d_550, l000000000040C218), (r15d_80, l000000000040C5D8))
	SZO_148 = cond(bLocC8 & 0x04)
	Z_149 = (bool) SZO_148 (alias)
	C_150 = false
	branch (bLocC8 & 0x04) != 0x00 l000000000040C318
// DataOut: ebx fs r12 r13 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C318:
	r8_382 = r8_118 - r12_143
	SCZO_383 = cond(r8_382)
	rdi_384 = r13_88
	r15_385 = 0xFFFFFFFFFFFFFFFF
	r15d_386 = (word32) r15_385 (alias)
	r14_387 = r8_382
	r14d_388 = (word32) r14_387 (alias)
	eax_389 = strlen(rdi_384)
	rax_390 = DPB(rax_134, eax_389, 0) (alias)
	rdi_391 = fp - 0x0000000000000078
	rsi_392 = r12_143
	rcx_393 = 0x0000000000000029
	rdx_394 = r14_387
	qwLocB0_395 = rax_390
	rax_396 = __memcpy_chk(fp - 0x0000000000000078, rsi_392, rdx_394, 0x0000000000000029)
	r9_397 = r12_143 + r14_387
	r9d_398 = (word32) r9_397 (alias)
	r12_399 = r13_88
	r12d_400 = (word32) r12_399 (alias)
	r13_401 = qwLocB0_395
// DataOut: ebx fs r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C36C:
	r9_402 = PHI((r9_397, l000000000040C318), (r9_462, l000000000040C358))
	r9d_403 = PHI((r9d_398, l000000000040C318), (r9d_463, l000000000040C358))
	r14d_404 = PHI((r14d_388, l000000000040C318), (r14d_437, l000000000040C358))
	CZ_405 = PHI((CZ_124, l000000000040C318), (CZ_432, l000000000040C358))
	rsi_406 = PHI((rsi_392, l000000000040C318), (rsi_459, l000000000040C358))
	rdx_407 = PHI((rdx_394, l000000000040C318), (rdx_458, l000000000040C358))
	rdi_408 = PHI((rdi_391, l000000000040C318), (rdi_460, l000000000040C358))
	rax_409 = PHI((rax_396, l000000000040C318), (rax_461, l000000000040C358))
	eax_410 = PHI((eax_389, l000000000040C318), (eax_443, l000000000040C358))
	rdx_rax_411 = PHI((rdx_rax_136, l000000000040C318), (rdx_rax_444, l000000000040C358))
	ah_412 = PHI((ah_138, l000000000040C318), (ah_446, l000000000040C358))
	ax_413 = PHI((ax_139, l000000000040C318), (ax_447, l000000000040C358))
	al_414 = PHI((al_140, l000000000040C318), (al_448, l000000000040C358))
	SCZO_415 = PHI((SCZO_383, l000000000040C318), (SCZO_457, l000000000040C358))
	rbp_416 = PHI((rbp_67, l000000000040C318), (rbp_428, l000000000040C358))
	r14_417 = PHI((r14_387, l000000000040C318), (r14_436, l000000000040C358))
	r15_418 = PHI((r15_385, l000000000040C318), (r15_434, l000000000040C358))
	r15d_419 = PHI((r15d_386, l000000000040C318), (r15d_435, l000000000040C358))
	edx_420 = (word32) Mem0[rbp_416 + 0x0000000000000000:byte]
	rdx_421 = DPB(rdx_407, edx_420, 0) (alias)
	rdx_rax_422 = DPB(rdx_rax_411, edx_420, 64) (alias)
	edx_eax_423 = SEQ(edx_420, eax_410) (alias)
	dl_424 = (byte) edx_420 (alias)
	SZO_425 = cond(dl_424 & dl_424)
	Z_426 = (bool) SZO_425 (alias)
	C_427 = false
	branch (dl_424 & dl_424) == 0x00 l000000000040C383
// DataOut: dl ebx fs r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x29 edx:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C374:
	SCZO_466 = cond(dl_424 - 0x7E)
	CZ_467 = SCZO_466 (alias)
	r15d_468 = (word32) dl_424
	r15_469 = DPB(r15_418, r15d_468, 0) (alias)
	branch dl_424 <=u 0x7E l000000000040C37F
// DataOut: ebx fs r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x29 r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C37B_1:
	r15_474 = r14_417
	r15d_475 = (word32) r15_474 (alias)
// DataOut: ebx fs r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C37F:
	r15_470 = PHI((r15_469, l000000000040C374), (r15_474, l000000000040C37B_1))
	r15d_471 = PHI((r15d_468, l000000000040C374), (r15d_475, l000000000040C37B_1))
	rbp_472 = rbp_416 + 0x0000000000000001
	SCZO_473 = cond(rbp_472)
// DataOut: ebx fs r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C383:
	rbp_428 = PHI((rbp_416, l000000000040C36C), (rbp_472, l000000000040C37F))
	r15_429 = PHI((r15_418, l000000000040C36C), (r15_470, l000000000040C37F))
	r15d_430 = PHI((r15d_419, l000000000040C36C), (r15d_471, l000000000040C37F))
	SCZO_431 = cond(r15_429 - r14_417)
	CZ_432 = SCZO_431 (alias)
	rax_433 = fp - 0x0000000000000078
	branch r15_429 <=u r14_417 l000000000040C38F
// DataOut: ebx fs r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C38B_1:
	r15_464 = r14_417
	r15d_465 = (word32) r15_464 (alias)
// DataOut: ebx fs r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:fp - 0x0000000000000078 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C38F:
	r15_434 = PHI((r15_429, l000000000040C383), (r15_464, l000000000040C38B_1))
	r15d_435 = PHI((r15d_430, l000000000040C383), (r15d_465, l000000000040C38B_1))
	r14_436 = r14_417 - r15_434
	r14d_437 = (word32) r14_436 (alias)
	r9_438 = r9_402 - r15_434
	rdx_439 = r15_434
	rsi_440 = fp - 0x0000000000000078 + r14_436
	rdi_441 = r9_438
	rax_442 = memcpy(rdi_441, rsi_440, rdx_439)
	eax_443 = (word32) rax_442 (alias)
	rdx_rax_444 = SEQ(rdx_439, rax_442) (alias)
	edx_eax_445 = rax_442 (alias)
	ah_446 = SLICE(rax_442, byte, 8) (alias)
	ax_447 = (word16) rax_442 (alias)
	al_448 = (byte) rax_442 (alias)
	SZO_449 = cond(r14_436 & r14_436)
	Z_450 = (bool) SZO_449 (alias)
	C_451 = false
	r9_452 = rax_442
	r9d_453 = (word32) r9_452 (alias)
	branch (r14_436 & r14_436) != 0x0000000000000000 l000000000040C358
// DataOut: ebx fs r12 r13 r14 r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:fp - 0x0000000000000078 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C358:
	r9_456 = r9_452 - r13_401
	SCZO_457 = cond(r9_456)
	rdx_458 = r13_401
	rsi_459 = r12_399
	rdi_460 = r9_456
	rax_461 = memcpy(rdi_460, rsi_459, rdx_458)
	r9_462 = rax_461
	r9d_463 = (word32) r9_462 (alias)
// DataOut: ebx fs r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C3AC:
	r12_454 = rax_442
	r12d_455 = (word32) r12_454 (alias)
// DataOut: ebx fs r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C242:
	r8_151 = PHI((r8_382, l000000000040C3AC), (r8_118, l000000000040C237))
	qwLocB0_152 = PHI((qwLocB0_395, l000000000040C3AC), (qwLocB0_119, l000000000040C237))
	r9_153 = PHI((r9_452, l000000000040C3AC), (r9_120, l000000000040C237))
	r9d_154 = PHI((r9d_453, l000000000040C3AC), (r9d_121, l000000000040C237))
	r12d_155 = PHI((r12d_455, l000000000040C3AC), (r12d_122, l000000000040C237))
	r14d_156 = PHI((r14d_437, l000000000040C3AC), (r14d_123, l000000000040C237))
	CZ_157 = PHI((CZ_432, l000000000040C3AC), (CZ_124, l000000000040C237))
	rsi_158 = PHI((rsi_440, l000000000040C3AC), (rsi_126, l000000000040C237))
	rcx_159 = PHI((rcx_393, l000000000040C3AC), (rcx_128, l000000000040C237))
	rdx_160 = PHI((rdx_439, l000000000040C3AC), (rdx_130, l000000000040C237))
	edx_161 = PHI((edx_420, l000000000040C3AC), (edx_131, l000000000040C237))
	dl_162 = PHI((dl_424, l000000000040C3AC), (dl_132, l000000000040C237))
	rdi_163 = PHI((rdi_441, l000000000040C3AC), (rdi_133, l000000000040C237))
	rax_164 = PHI((rax_442, l000000000040C3AC), (rax_134, l000000000040C237))
	eax_165 = PHI((eax_443, l000000000040C3AC), (eax_135, l000000000040C237))
	rdx_rax_166 = PHI((rdx_rax_444, l000000000040C3AC), (rdx_rax_136, l000000000040C237))
	edx_eax_167 = PHI((edx_eax_445, l000000000040C3AC), (edx_eax_137, l000000000040C237))
	ah_168 = PHI((ah_446, l000000000040C3AC), (ah_138, l000000000040C237))
	ax_169 = PHI((ax_447, l000000000040C3AC), (ax_139, l000000000040C237))
	al_170 = PHI((al_448, l000000000040C3AC), (al_140, l000000000040C237))
	SCZO_171 = PHI((SCZO_431, l000000000040C3AC), (SCZO_141, l000000000040C237))
	rbp_172 = PHI((rbp_428, l000000000040C3AC), (rbp_67, l000000000040C237))
	r12_173 = PHI((r12_454, l000000000040C3AC), (r12_143, l000000000040C237))
	r13_174 = PHI((r13_401, l000000000040C3AC), (r13_88, l000000000040C237))
	r14_175 = PHI((r14_436, l000000000040C3AC), (r14_144, l000000000040C237))
	r15_176 = PHI((r15_434, l000000000040C3AC), (r15_145, l000000000040C237))
	r15d_177 = PHI((r15d_435, l000000000040C3AC), (r15d_146, l000000000040C237))
	SZO_178 = cond(bLocC8 & 0x80)
	Z_179 = (bool) SZO_178 (alias)
	C_180 = false
	branch (bLocC8 & 0x80) == 0x00 l000000000040C2BA
// DataOut: ebx fs r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C249:
	SCZO_226 = cond(ebx_125 - 0xFFFFFFFF)
	Z_227 = (bool) SCZO_226 (alias)
	branch ebx_125 == 0xFFFFFFFF l000000000040C618
// DataOut: ebx fs r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C618:
	rdx_343 = qwLocC0_43
	edx_344 = (word32) rdx_343 (alias)
	rdx_rax_345 = SEQ(rdx_343, rax_164) (alias)
	edx_eax_346 = rdx_343 (alias)
	dl_347 = (byte) rdx_343 (alias)
	SCZO_348 = cond(rdx_343 - 0x0000000000000001)
	CZ_349 = SCZO_348 (alias)
	branch rdx_343 <=u 0x0000000000000001 l000000000040C7A9
// DataOut: fs r12 r8 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C7A9:
	rbx_378 = 0x0000000000000000
	ebx_379 = (word32) rbx_378 (alias)
	SZO_380 = cond(ebx_379)
	C_381 = false
// DataOut: ebx fs r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C627:
	r14_350 = (uint64) dwLocC4_59
	r14d_351 = (word32) r14_350 (alias)
	rbx_352 = 0x0000000000000001
	ebx_353 = (word32) rbx_352 (alias)
	rax_354 = 0x0000000000000001
	eax_355 = (word32) rax_354 (alias)
	rdx_rax_356 = SEQ(rdx_343, rax_354) (alias)
	edx_eax_357 = rax_354 (alias)
	ah_358 = SLICE(rax_354, byte, 8) (alias)
	ax_359 = (word16) rax_354 (alias)
	al_360 = (byte) rax_354 (alias)
// DataOut: ebx fs r12 r14 r8 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C640:
	ebx_361 = PHI((ebx_353, l000000000040C627), (ebx_375, l000000000040C64D))
	Z_362 = PHI((Z_227, l000000000040C627), (Z_377, l000000000040C64D))
	rax_363 = PHI((rax_354, l000000000040C627), (rax_365, l000000000040C64D))
	rbx_364 = PHI((rbx_352, l000000000040C627), (rbx_374, l000000000040C64D))
	rax_365 = rax_363 *s r14_350
	eax_366 = (word32) rax_365 (alias)
	rdx_rax_367 = SEQ(rdx_343, rax_365) (alias)
	edx_eax_368 = rax_365 (alias)
	ah_369 = SLICE(rax_365, byte, 8) (alias)
	ax_370 = (word16) rax_365 (alias)
	al_371 = (byte) rax_365 (alias)
	SCZO_372 = cond(rdx_343 - rax_365)
	CZ_373 = SCZO_372 (alias)
	branch rdx_343 <=u rax_365 l000000000040C252
// DataOut: ebx fs r12 r14 r8 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C64D:
	rbx_374 = (uint64) (ebx_361 + 0x00000001)
	ebx_375 = (word32) rbx_374 (alias)
	SCZO_376 = cond(ebx_375 - 0x00000008)
	Z_377 = (bool) SCZO_376 (alias)
	branch ebx_375 != 0x00000008 l000000000040C640
// DataOut: ebx fs r12 r14 r8 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C655:
// DataOut: ebx fs r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C252:
	r14d_228 = PHI((r14d_156, l000000000040C249), (r14d_351, l000000000040C640), (r14d_351, l000000000040C655), (r14d_156, l000000000040C7A9))
	CZ_229 = PHI((CZ_157, l000000000040C249), (CZ_373, l000000000040C640), (CZ_373, l000000000040C655), (CZ_349, l000000000040C7A9))
	ebx_230 = PHI((ebx_125, l000000000040C249), (ebx_361, l000000000040C640), (ebx_375, l000000000040C655), (ebx_379, l000000000040C7A9))
	rdx_231 = PHI((rdx_160, l000000000040C249), (rdx_343, l000000000040C640), (rdx_343, l000000000040C655), (rdx_343, l000000000040C7A9))
	edx_232 = PHI((edx_161, l000000000040C249), (edx_344, l000000000040C640), (edx_344, l000000000040C655), (edx_344, l000000000040C7A9))
	dl_233 = PHI((dl_162, l000000000040C249), (dl_347, l000000000040C640), (dl_347, l000000000040C655), (dl_347, l000000000040C7A9))
	SCZO_234 = PHI((SCZO_226, l000000000040C249), (SCZO_372, l000000000040C640), (SCZO_376, l000000000040C655), (SCZO_348, l000000000040C7A9))
	rbx_235 = PHI((rbx_142, l000000000040C249), (rbx_364, l000000000040C640), (rbx_374, l000000000040C655), (rbx_378, l000000000040C7A9))
	r14_236 = PHI((r14_175, l000000000040C249), (r14_350, l000000000040C640), (r14_350, l000000000040C655), (r14_175, l000000000040C7A9))
	rax_237 = (uint64) dwLocC8_41
	eax_238 = (word32) rax_237 (alias)
	rcx_239 = (uint64) ebx_230
	ecx_240 = (word32) rcx_239 (alias)
	rax_241 = (uint64) (eax_238 & 0x00000100)
	eax_242 = (word32) rax_241 (alias)
	rdx_rax_243 = SEQ(rdx_231, rax_241) (alias)
	edx_eax_244 = rax_241 (alias)
	ah_245 = SLICE(rax_241, byte, 8) (alias)
	ax_246 = (word16) rax_241 (alias)
	al_247 = (byte) rax_241 (alias)
	rcx_248 = (uint64) (ecx_240 | eax_242)
	ecx_249 = (word32) rcx_248 (alias)
	SZO_250 = cond(ecx_249)
	Z_251 = (bool) SZO_250 (alias)
	C_252 = false
	branch ecx_249 == 0x00000000 l000000000040C2BA
// DataOut: eax ebx fs r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(0) Local -00D0(64)

l000000000040C261:
	SZO_253 = cond(bLocC8 & 0x40)
	Z_254 = (bool) SZO_253 (alias)
	C_255 = false
	branch (bLocC8 & 0x40) != 0x00 l000000000040C3E8
// DataOut: eax ebx fs r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00D0(64)

l000000000040C3E8:
	rcx_339 = qwLocB8_38
	rsi_340 = rcx_339 + 0x0000000000000289
	Mem341[rcx_339 + 0x0000000000000288:byte] = 0x20
	qwLocD0_342 = rsi_340
// DataOut: eax ebx fs r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C26C:
	rsi_256 = PHI((rsi_158, l000000000040C261), (rsi_340, l000000000040C3E8))
	rcx_257 = PHI((rcx_248, l000000000040C261), (rcx_339, l000000000040C3E8))
	qwLocD0_258 = PHI((qwLocD0_93, l000000000040C261), (qwLocD0_342, l000000000040C3E8))
	SZO_259 = cond(ebx_230 & ebx_230)
	Z_260 = (bool) SZO_259 (alias)
	C_261 = false
	branch (ebx_230 & ebx_230) == 0x00000000 l000000000040C7EB
// DataOut: eax ebx fs r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C7EB:
	rdx_334 = qwLocD0_258
	edx_335 = (word32) rdx_334 (alias)
	rdx_rax_336 = SEQ(rdx_334, rax_241) (alias)
	edx_eax_337 = rdx_334 (alias)
	dl_338 = (byte) rdx_334 (alias)
// DataOut: eax ebx fs r12 r8 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32)

l000000000040C274:
	rcx_305 = qwLocD0_258
	rdx_306 = rcx_305 + 0x0000000000000001
	edx_307 = (word32) rdx_306 (alias)
	rdx_rax_308 = SEQ(rdx_306, rax_241) (alias)
	edx_eax_309 = rdx_306 (alias)
	dl_310 = (byte) rdx_306 (alias)
	rcx_311 = (uint64) dwLoc90_51
	ecx_312 = (word32) rcx_311 (alias)
	SZO_313 = cond(ecx_312 & ecx_312)
	Z_314 = (bool) SZO_313 (alias)
	C_315 = false
	branch (ecx_312 & ecx_312) == 0x00000000 l000000000040C3D0
// DataOut: eax ebx fs r12 r8 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C3D0:
	SCZO_329 = cond(ebx_230 - 0x00000001)
	Z_330 = (bool) SCZO_329 (alias)
	rcx_331 = 0x000000000000006B
	ecx_332 = (word32) rcx_331 (alias)
	cl_333 = (byte) rcx_331 (alias)
	branch ebx_230 != 0x00000001 l000000000040C289
// DataOut: cl eax ebx fs r12 r8 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C3DE:
// DataOut: cl eax ebx fs r12 r8 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x000000000000006B r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x6B edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:0x0000006B dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C289:
	Z_323 = PHI((Z_314, l000000000040C274), (Z_330, l000000000040C3D0))
	SCZO_324 = PHI((SCZO_234, l000000000040C274), (SCZO_329, l000000000040C3D0))
	rcx_325 = (int64) ebx_230
	ecx_326 = (word32) Mem0[rcx_325 + 0x0000000000415F78:byte]
	rcx_327 = DPB(rcx_325, ecx_326, 0) (alias)
	cl_328 = (byte) ecx_326 (alias)
// DataOut: cl eax ebx fs r12 r8 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C293:
	ecx_316 = PHI((ecx_326, l000000000040C289), (ecx_332, l000000000040C3DE))
	rcx_317 = PHI((rcx_327, l000000000040C289), (rcx_331, l000000000040C3DE))
	cl_318 = PHI((cl_328, l000000000040C289), (cl_333, l000000000040C3DE))
	Z_319 = PHI((Z_323, l000000000040C289), (Z_330, l000000000040C3DE))
	SCZO_320 = PHI((SCZO_324, l000000000040C289), (SCZO_329, l000000000040C3DE))
	rdi_321 = qwLocD0_258
	Mem322[rdi_321:byte] = cl_318
// DataOut: eax ebx fs r12 r8 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> ecx:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32)

l000000000040C29A:
	ecx_262 = PHI((ecx_316, l000000000040C293), (ecx_249, l000000000040C7EB))
	rcx_263 = PHI((rcx_317, l000000000040C293), (rcx_257, l000000000040C7EB))
	cl_264 = PHI((cl_318, l000000000040C293), (cl_129, l000000000040C7EB))
	rdx_265 = PHI((rdx_306, l000000000040C293), (rdx_334, l000000000040C7EB))
	edx_266 = PHI((edx_307, l000000000040C293), (edx_335, l000000000040C7EB))
	dl_267 = PHI((dl_310, l000000000040C293), (dl_338, l000000000040C7EB))
	rdi_268 = PHI((rdi_321, l000000000040C293), (rdi_163, l000000000040C7EB))
	rdx_rax_269 = PHI((rdx_rax_308, l000000000040C293), (rdx_rax_336, l000000000040C7EB))
	edx_eax_270 = PHI((edx_eax_309, l000000000040C293), (edx_eax_337, l000000000040C7EB))
	SCZO_271 = PHI((SCZO_320, l000000000040C293), (SCZO_234, l000000000040C7EB))
	SZO_272 = cond(eax_242 & eax_242)
	Z_273 = (bool) SZO_272 (alias)
	C_274 = false
	branch (eax_242 & eax_242) == 0x00000000 l000000000040C7F5
// DataOut: ebx fs r12 r8 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32)

l000000000040C7F5:
	qwLocD0_304 = rdx_265
// DataOut: fs r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -00D0(64)

l000000000040C2A2:
	rax_275 = (uint64) dwLoc90_51
	eax_276 = (word32) rax_275 (alias)
	rdx_rax_277 = SEQ(rdx_265, rax_275) (alias)
	edx_eax_278 = rax_275 (alias)
	SZO_279 = cond(eax_276 & eax_276)
	Z_280 = (bool) SZO_279 (alias)
	C_281 = false
	branch (eax_276 & eax_276) != 0x00000000 l000000000040C3B8
// DataOut: ebx fs r12 r8 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64)

l000000000040C3B8:
	SZO_294 = cond(ebx_230 & ebx_230)
	Z_295 = (bool) SZO_294 (alias)
	C_296 = false
	branch (ebx_230 & ebx_230) == 0x00000000 l000000000040C2AE
// DataOut: fs r12 r8 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64)

l000000000040C3C0:
	Mem297[rdx_265:byte] = 0x69
	rdx_298 = rdx_265 + 0x0000000000000001
	edx_299 = (word32) rdx_298 (alias)
	rdx_rax_300 = SEQ(rdx_298, rax_275) (alias)
	edx_eax_301 = rdx_298 (alias)
	dl_302 = (byte) rdx_298 (alias)
	SCZO_303 = cond(rdx_298)
// DataOut: fs r12 r8 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64)

l000000000040C2AE:
	rdx_282 = PHI((rdx_265, l000000000040C2A2), (rdx_265, l000000000040C3B8), (rdx_298, l000000000040C3C0))
	edx_283 = PHI((edx_266, l000000000040C2A2), (edx_266, l000000000040C3B8), (edx_299, l000000000040C3C0))
	dl_284 = PHI((dl_267, l000000000040C2A2), (dl_267, l000000000040C3B8), (dl_302, l000000000040C3C0))
	SZO_285 = PHI((SZO_279, l000000000040C2A2), (SZO_294, l000000000040C3B8), (SZO_294, l000000000040C3C0))
	Z_286 = PHI((Z_280, l000000000040C2A2), (Z_295, l000000000040C3B8), (Z_295, l000000000040C3C0))
	C_287 = PHI((C_281, l000000000040C2A2), (C_296, l000000000040C3B8), (C_296, l000000000040C3C0))
	rdx_rax_288 = PHI((rdx_rax_277, l000000000040C2A2), (rdx_rax_277, l000000000040C3B8), (rdx_rax_300, l000000000040C3C0))
	edx_eax_289 = PHI((edx_eax_278, l000000000040C2A2), (edx_eax_278, l000000000040C3B8), (edx_eax_301, l000000000040C3C0))
	SCZO_290 = PHI((SCZO_271, l000000000040C2A2), (SCZO_271, l000000000040C3B8), (SCZO_303, l000000000040C3C0))
	rax_291 = rdx_282 + 0x0000000000000001
	Mem292[rdx_282:byte] = 0x42
	qwLocD0_293 = rax_291
// DataOut: fs r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -00D0(64)

l000000000040C2BA:
	r14d_181 = PHI((r14d_156, l000000000040C242), (r14d_228, l000000000040C252), (r14d_228, l000000000040C2AE), (r14d_228, l000000000040C7F5))
	CZ_182 = PHI((CZ_157, l000000000040C242), (CZ_229, l000000000040C252), (CZ_229, l000000000040C2AE), (CZ_229, l000000000040C7F5))
	ebx_183 = PHI((ebx_125, l000000000040C242), (ebx_230, l000000000040C252), (ebx_230, l000000000040C2AE), (ebx_230, l000000000040C7F5))
	rsi_184 = PHI((rsi_158, l000000000040C242), (rsi_158, l000000000040C252), (rsi_256, l000000000040C2AE), (rsi_256, l000000000040C7F5))
	ecx_185 = PHI((ecx_127, l000000000040C242), (ecx_249, l000000000040C252), (ecx_262, l000000000040C2AE), (ecx_262, l000000000040C7F5))
	rcx_186 = PHI((rcx_159, l000000000040C242), (rcx_248, l000000000040C252), (rcx_263, l000000000040C2AE), (rcx_263, l000000000040C7F5))
	cl_187 = PHI((cl_129, l000000000040C242), (cl_129, l000000000040C252), (cl_264, l000000000040C2AE), (cl_264, l000000000040C7F5))
	rdx_188 = PHI((rdx_160, l000000000040C242), (rdx_231, l000000000040C252), (rdx_282, l000000000040C2AE), (rdx_265, l000000000040C7F5))
	edx_189 = PHI((edx_161, l000000000040C242), (edx_232, l000000000040C252), (edx_283, l000000000040C2AE), (edx_266, l000000000040C7F5))
	dl_190 = PHI((dl_162, l000000000040C242), (dl_233, l000000000040C252), (dl_284, l000000000040C2AE), (dl_267, l000000000040C7F5))
	qwLocD0_191 = PHI((qwLocD0_93, l000000000040C242), (qwLocD0_93, l000000000040C252), (qwLocD0_293, l000000000040C2AE), (qwLocD0_304, l000000000040C7F5))
	SCZO_192 = PHI((SCZO_171, l000000000040C242), (SCZO_234, l000000000040C252), (SCZO_290, l000000000040C2AE), (SCZO_271, l000000000040C7F5))
	rbx_193 = PHI((rbx_142, l000000000040C242), (rbx_235, l000000000040C252), (rbx_235, l000000000040C2AE), (rbx_235, l000000000040C7F5))
	r14_194 = PHI((r14_175, l000000000040C242), (r14_236, l000000000040C252), (r14_236, l000000000040C2AE), (r14_236, l000000000040C7F5))
	rax_195 = qwLocD0_191
	rdi_196 = qwLoc40_47
	rdi_197 = rdi_196 ^ Mem0[fs:0x00000028:word64]
	SZO_198 = cond(rdi_197)
	Z_199 = (bool) SZO_198 (alias)
	C_200 = false
	Mem201[rax_195:byte] = 0x00
	rax_202 = r12_173
	eax_203 = (word32) rax_202 (alias)
	rdx_rax_204 = SEQ(rdx_188, rax_202) (alias)
	edx_eax_205 = rax_202 (alias)
	ah_206 = SLICE(rax_202, byte, 8) (alias)
	ax_207 = (word16) rax_202 (alias)
	al_208 = (byte) rax_202 (alias)
	branch rdi_197 != 0x0000000000000000 l000000000040C7E6
// DataOut: fs r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32)

l000000000040C7E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040C2DC:
	rsp_209 = fp - 48
	SCZO_210 = cond(fp - 48)
	rbx_211 = qwLoc30_30
	rsp_212 = fp - 40
	rbp_213 = qwLoc28_27
	rsp_214 = fp - 32
	r12_215 = qwLoc20_21
	rsp_216 = fp - 24
	r13_217 = qwLoc18_18
	rsp_218 = fp - 16
	r14_219 = qwLoc10_12
	rsp_220 = fp - 8
	r15_221 = qwLoc08_4
	r15d_222 = (word32) r15_221 (alias)
	rsp_223 = fp
	return rax_202
// DataOut: fs r15d r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 232 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040BD70_exit:
	use r8_151 (=> r8Out)
	use r15d_222 (=> r15dOut)
// DataOut: r15d r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r14:r14 r12:r12 rbx:rbx rcx:<invalid> r15:r15 r13:r13 rdi:<invalid> eax:<invalid> rbp:rbp r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn000000000040C810(word64 rdx, word64 rsi, word64 rdi, word64 r8, ptr64 & ebxOut, ptr64 & r8Out, ptr64 & r14bOut, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi rdx rsi
// LiveOut: eax ebx r14b r15 r8
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi si sil
// Preserved: r12 r13 rbp rbx rsp
fn000000000040C810_entry:
	*r15Out = r15
	*r14bOut = r14b
	*r8Out = r8
// DataOut: fs r14b r15 r8 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C810:
	word32 ebp_147
	word64 rdx_144
	word32 eax_108
	word64 rbx_117 = rdi
	branch rdi == 0x0000000000000000 l000000000040C910
// DataOut: fs r12 r13 r14b r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C910:
	word64 rax_245 = getenv(0x00000000004138E4)
	rbx_117 = rax_245
	branch rax_245 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r12 r13 r14b r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:rdi -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l000000000040C926:
	word64 rax_252 = getenv(0x0000000000415F24)
	rbx_117 = rax_252
	branch rax_252 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r12 r13 r14b r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l000000000040C93C:
	word64 rdx_267 = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	Mem271[rdx:word64] = rdx_267 + 512
	ebp_147 = 0x00000000 (alias)
	rdx_144 = rdx_267 + 512
// DataOut: ebp fs r12 r13 r14b r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rdi:0x0000000000415F24 rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C82C:
	word32 ebp_120 = 0x00000000
	branch Mem0[rbx_117:byte] == 0x27 l000000000040C8A0
// DataOut: ebp fs r12 r13 r14b r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rdi:<invalid> rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l000000000040C8A0:
	rbx_117 = rbx_117 + 0x0000000000000001
	ebp_120 = 0x00000004 (alias)
// DataOut: ebp fs r12 r13 r14b r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l000000000040C833:
	word64 rax_134 = fn0000000000409E50(0x0000000000000004, 0x0000000000415F50, 0x0000000000415F60, rbx_117)
	byte al_137 = (byte) rax_134
	branch (word32) rax_134 < 0x00000000 l000000000040C8B0
// DataOut: al ebp fs r12 r13 r14b r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> bpl:0x04 rdi:<invalid> rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l000000000040C8B0:
	byte r14b_166
	eax_108 = fn0000000000411360(rdx, 0x00000000, fp - 0x0000000000000030, rbx_117, 0x0000000000415F3E, out ebp_147, out r8, out r14b_166)
	branch eax_108 != 0x00000000 l000000000040C968
// DataOut: eax ebp fs r12 r13 r14b r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ecx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C968:
	Mem235[rsi:word32] = 0x00000000
	rdx_144 = Mem235[rdx:word64]
// DataOut: eax fs r12 r14b r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C8D0:
	branch (byte) (uint64) ((word32) Mem0[rbx_117:byte] - 0x00000030) <=u 0x09 l000000000040C907
// DataOut: ebp fs r12 r13 r14b r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C8DA:
	word64 rdx_194 = Mem0[fp - 0x0000000000000030:word64]
	branch rbx_117 != rdx_194 l000000000040C8F9
// DataOut: ebp fs r12 r13 r14b r15 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C8F9:
	rbx_117 = rbx_117 + 0x0000000000000001
	branch (byte) (uint64) ((word32) Mem0[rbx_117:byte] - 0x00000030) >u 0x09 l000000000040C8F0
// DataOut: ebp fs r12 r13 r14b r15 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C8F0:
	branch rbx_117 == rdx_194 l000000000040C980
// DataOut: ebp fs r12 r13 r14b r15 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C8E4:
// DataOut: ebp fs r12 r13 r14b r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C980:
	branch Mem0[rdx_194 - 0x0000000000000001:byte] == 0x42 l000000000040C998
// DataOut: ebp fs r12 r13 r14b r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C998:
	ebp_147 = (word32) (uint64) (ebp_147 | 0x00000180) (alias)
	branch Mem0[rdx_194 - 0x0000000000000002:byte] != 0x69 l000000000040C907
// DataOut: ebp fs r12 r13 r14b r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C9A8:
// DataOut: ebp fs r12 r13 r14b r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C986:
	ebp_147 = DPB(ebp_147, 0x84, 0) (alias)
// DataOut: ebp fs r12 r13 r14b r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C98A:
	ebp_147 = (word32) (uint64) (ebp_147 | 0x00000020) (alias)
// DataOut: ebp fs r12 r13 r14b r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C907:
	rdx_144 = Mem0[rdx:word64]
// DataOut: ebp fs r12 r13 r14b r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C84E:
	Mem143[rdx:word64] = 0x0000000000000001
	rdx_144 = 0x0000000000000001
	ebp_147 = (word32) (uint64) (ebp_120 | Mem143[DPB(rax_134, (int16) al_137, 0) * 0x0000000000000004 + 0x00415F50:word32]) (alias)
// DataOut: ebp fs r12 r13 r14b r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ecx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C864:
	Mem106[rsi:word32] = ebp_147
	eax_108 = 0x00000000 (alias)
// DataOut: eax fs r12 r14b r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:(int16) al rax:<invalid> bpl:<invalid> r8:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C86A:
	branch rdx_144 != 0x0000000000000000 l000000000040C894
// DataOut: eax fs r12 r14b r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C86F:
	Mem84[rdx:word64] = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	word64 r8_81
	*r8Out = r8 + 512
	eax_108 = 0x00000004 (alias)
// DataOut: eax fs r14b r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C894:
	word32 ebx_61
	*ebxOut = (word32) Mem0[fp - 0x0000000000000020:word64]
	return eax_108
// DataOut: eax ebx fs r13b r14b r15 r8
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

fn000000000040C810_exit:
// DataOut: eax ebx r14b r15 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbx:rbx rbp:rbp rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



word64 fn000000000040C9B0(word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn000000000040C9B0_entry:
// DataOut: ebp edi fs r14 r15d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C9B0:
	word32 ebp_10 = (word32) (uint64) edi
	word64 rbx_15 = Mem0[0x000000000061B1F8:word64]
	branch rbx_15 != 0x0000000000000000 l000000000040C9D1
// DataOut: ebp fs r14 r15d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9D1:
	branch Mem0[rbx_15:word32] != ebp_10 l000000000040C9C8
// DataOut: ebp fs r14 r15d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9C8:
	rbx_15 = Mem0[rbx_15 + 0x0000000000000008:word64]
	branch rbx_15 == 0x0000000000000000 l000000000040C9F0
// DataOut: ebp fs r14 r15d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9C2:
// DataOut: ebp fs r14 r15d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9F0:
	word64 r12_45 = 0x0000000000416919
	word64 rax_47 = getpwuid((uint64) ebp_10)
	word64 rdi_52 = 0x0000000000000011
	branch rax_47 == 0x0000000000000000 l000000000040CA16
// DataOut: ebp fs r12 r14 r15d r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040CA07:
	r12_45 = Mem0[rax_47:word64]
	rdi_52 = DPB(rax_47, strlen(r12_45), 0) + 0x0000000000000011
// DataOut: ebp fs r12 r14 r15d r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 r12:0x0000000000416919 rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040CA16:
	word64 rax_60 = fn0000000000410C40(rsi, rdi_52)
	Mem62[rax_60:word32] = ebp_10
	strcpy(rax_60 + 0x0000000000000010, r12_45)
	word64 rax_66 = Mem62[0x000000000061B1F8:word64]
	Mem67[0x000000000061B1F8:word64] = rax_60
	Mem68[rax_60 + 0x0000000000000008:word64] = rax_66
	rbx_15 = rax_60
// DataOut: fs r14 r15d r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9D5:
	word64 rax_26 = 0x0000000000000000
	word64 rdx_30 = rbx_15 + 0x0000000000000010
	branch Mem0[rbx_15 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
// DataOut: ebp fs r14 r15d r8 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040C9E3_1:
	rax_26 = rdx_30
// DataOut: ebp fs r14 r15d r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040C9E7:
	return rax_26
// DataOut: ebp fs r14 r15d r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040C9B0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040CB40(word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn000000000040CB40_entry:
// DataOut: edi fs r13d r14 r15d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB40:
	word32 ebp_10 = (word32) (uint64) edi
	word64 rbx_15 = Mem0[0x000000000061B1E8:word64]
	branch rbx_15 != 0x0000000000000000 l000000000040CB61
// DataOut: ebp fs r13d r14 r15d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB61:
	branch Mem0[rbx_15:word32] != ebp_10 l000000000040CB58
// DataOut: ebp fs r13d r14 r15d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB58:
	rbx_15 = Mem0[rbx_15 + 0x0000000000000008:word64]
	branch rbx_15 == 0x0000000000000000 l000000000040CB80
// DataOut: ebp fs r13d r14 r15d r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB52:
// DataOut: ebp fs r13d r14 r15d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB80:
	word64 r12_44 = 0x0000000000416919
	word64 rax_46 = getgrgid((uint64) ebp_10)
	word64 rdi_51 = 0x0000000000000011
	branch rax_46 == 0x0000000000000000 l000000000040CBA6
// DataOut: ebp fs r12 r13d r14 r15d r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB97:
	r12_44 = Mem0[rax_46:word64]
	rdi_51 = DPB(rax_46, strlen(r12_44), 0) + 0x0000000000000011
// DataOut: ebp fs r12 r13d r14 r15d r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 r12:0x0000000000416919 rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CBA6:
	word64 rax_59 = fn0000000000410C40(rsi, rdi_51)
	Mem61[rax_59:word32] = ebp_10
	strcpy(rax_59 + 0x0000000000000010, r12_44)
	word64 rax_65 = Mem61[0x000000000061B1E8:word64]
	Mem66[0x000000000061B1E8:word64] = rax_59
	Mem67[rax_59 + 0x0000000000000008:word64] = rax_65
	rbx_15 = rax_59
// DataOut: fs r13d r14 r15d r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB65:
	word64 rax_26 = 0x0000000000000000
	word64 rdx_30 = rbx_15 + 0x0000000000000010
	branch Mem0[rbx_15 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
// DataOut: fs r13d r14 r15d r8 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040CB73_1:
	rax_26 = rdx_30
// DataOut: fs r13d r14 r15d r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040CB77:
	return rax_26
// DataOut: fs r13d r14 r15d r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040CB40_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040CCD0(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CCD0_entry:
// DataOut: dil fs r13 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CCD0:
	Mem8[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_25 = rsi + 0x0000000000000014
	branch rdi < 0x0000000000000000 l000000000040CD28
// DataOut: dil fs r13 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD28:
// DataOut: dil fs r13 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 rsi:0x0000000066666667

l000000000040CD30:
	word64 rdx_67 = (rdi *s 0x0000000066666667 >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_25 = rcx_25 - 0x0000000000000001
	Mem78[rcx_25:byte] = (byte) (uint64) (rdx_67 * 0x000000000000000A + 0x0000000000000030 - edi)
	rdi = rdx_67
	edi = (word32) rdx_67 (alias)
	branch rdx_67 != 0x0000000000000000 l000000000040CD30
// DataOut: dil fs r13 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000000000030 r8:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CD5B:
	Mem82[rcx_25 - 0x0000000000000001:byte] = 0x2D
	return rcx_25 - 0x0000000000000001
// DataOut: fs r13 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000000000030 r8:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CCE7:
// DataOut: dil fs r13 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 rsi:0x0000000066666667

l000000000040CCF0:
	word64 rdx_34 = (rdi *s 0x0000000066666667 >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_25 = rcx_25 - 0x0000000000000001
	Mem44[rcx_25:byte] = (byte) (uint64) ((word32) (rdi - rdx_34 * 0x000000000000000A) + 0x00000030)
	rdi = rdx_34
	branch rdx_34 != 0x0000000000000000 l000000000040CCF0
// DataOut: dil fs r13 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CD20:
	return rcx_25
// DataOut: fs r13 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CCD0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> r8:0x0000000066666667 eax:<invalid>



word64 fn000000000040CD70(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CD70_entry:
// DataOut: dil fs r12 r13 r13d r14 r14d r15 r8 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD70:
	Mem4[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_10 = rsi + 0x0000000000000014
// DataOut: dil fs r12 r13 r13d r14 r14d r15 r8 rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD88:
	word64 rdx_rax_11 = rdi *u 0x00000000CCCCCCCD
	rcx_10 = rcx_10 - 0x0000000000000001
	Mem23[rcx_10:byte] = (byte) (uint64) ((word32) (rdi - ((rdx_rax_11 >>u 0x0000000000000003) + (rdx_rax_11 >>u 0x0000000000000003) * 0x0000000000000004) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_rax_11 >>u 0x0000000000000003
	branch rdx_rax_11 >>u 0x0000000000000003 != 0x0000000000000000 l000000000040CD88
// DataOut: dil fs r12 r13 r13d r14 r14d r15 r8 rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CDAE:
	return rcx_10
// DataOut: fs r12 r13 r13d r14 r14d r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CD70_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>



word64 fn000000000040CDC0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8d r9b r9d rcx rdi rdx rsi
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040CDC0_entry:
// DataOut: ebx fs r12d r8 r8d r9b r9d rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CDC0:
	word64 r15_360
	word64 rsi_129
	word64 qwLoc58_258
	word64 rbp_103
	word64 rax_329
	word64 rcx_100
	word32 eax_268
	word32 ecx_263
	word64 r12_104
	word64 rbx_26 = (uint64) r9d
	word64 rax_38 = DPB(rax, strlen(rdi), 0)
	word64 r13_12 = rsi
	word32 ebx_27 = (word32) rbx_26
	byte bl_28 = (byte) rbx_26
	word64 qwLoc60_257 = rdi
	word64 r14_106 = rax_38
	branch (bl_28 & 0x02) == 0x00 l000000000040CF60
// DataOut: bl ebx fs r12 r13 r14 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040CF60:
	branch DPB(rax, __ctype_get_mb_cur_max(), 0) <=u 0x0000000000000001 l000000000040CDFA
// DataOut: bl ebx fs r12 r13 r14 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040CF6F:
	rsi_129 = rdi
	word64 rax_447 = DPB(rax, mbstowcs(0x0000000000000000, rdi, 0x0000000000000000), 0)
	branch rax_447 != 0xFFFFFFFFFFFFFFFF l000000000040CFA8
// DataOut: bl ebx fs r12 r13 r14 r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040CFA8:
	word64 r15_477 = (rax_447 + 0x0000000000000001) * 0x0000000000000004
	word64 rax_481 = malloc(r15_477)
	qwLoc58_258 = rax_481
	branch rax_481 == 0x0000000000000000 l000000000040D160
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:<invalid> -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D160:
	branch (bl_28 & 0x01) == 0x00 l000000000040CF8C
// DataOut: bl ebx fs r12 r13 r14 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D169:
	r15_360 = rax_38
	rbp_103 = 0x0000000000000000
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CFCF:
	rsi_129 = rdi
	branch DPB(rax_481, mbstowcs(rax_481, rdi, rax_447 + 0x0000000000000001), 0) == 0x0000000000000000 l000000000040CE03
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CFEC:
	word64 qwLoc48_505
	Mem498[rax_481 - 0x0000000000000004 + r15_477:word32] = 0x00000000
	word64 rdi_499 = (uint64) Mem498[rax_481:word32]
	branch (word32) rdi_499 == 0x00000000 l000000000040D106
// DataOut: bl ebx fs r12 r13 r14 r8 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D106:
	r15_360 = (int64) wcswidth(rax_481, rax_447 + 0x0000000000000001)
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D004:
	word64 r15_631 = rax_481
	byte bLoc39_633 = 0x00
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D010:
	branch iswprint(rdi_499) != 0x00000000 l000000000040D025
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D019:
	Mem666[r15_631:word32] = 0x0000FFFD
	bLoc39_633 = 0x01
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D025:
	r15_631 = r15_631 + 0x0000000000000004
	rdi_499 = (uint64) Mem498[r15_631:word32]
	branch (word32) rdi_499 != 0x00000000 l000000000040D010
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D030:
	r15_360 = (int64) wcswidth(rax_481, rax_447 + 0x0000000000000001)
	branch bLoc39_633 == 0x00 l000000000040D118
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D118:
	rsi_129 = rax_447 + 0x0000000000000001
	rax_329 = Mem498[rcx:word64]
	branch r15_360 <=u rax_329 l000000000040CF28
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF28:
	rbp_103 = 0x0000000000000000
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D125:
	qwLoc48_505 = rax_38 + 0x0000000000000001
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D04D:
	rsi_129 = rax_481
	qwLoc48_505 = DPB(rax_481, wcstombs(0x0000000000000000, rax_481, 0x0000000000000000), 0) + 0x0000000000000001
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D064:
	word64 rax_517 = malloc(qwLoc48_505)
	rbp_103 = rax_517
	branch rax_517 == 0x0000000000000000 l000000000040D138
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D138:
	branch (bl_28 & 0x01) != 0x00 l000000000040CE08
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D141:
// DataOut: fs r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040D07A:
	word64 r14_543
	word64 rdi_529 = (uint64) Mem498[rax_481:word32]
	word64 rax_523 = Mem498[rcx:word64]
	word64 rax_525 = rax_481
	branch (word32) rdi_529 == 0x00000000 l000000000040D173
// DataOut: bl ebx fs r12 r13 r8 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D173:
	r14_543 = rax_481
	r15_360 = 0x0000000000000000
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64)

l000000000040D092:
	r14_543 = rax_481
	r15_360 = 0x0000000000000000
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0BA:
	word32 eax_566 = wcwidth(rdi_529)
	byte al_569 = (byte) eax_566
	branch eax_566 != 0xFFFFFFFF l000000000040D0A0
// DataOut: al bl ebx fs r12 r13 r14 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0A0:
	rax_525 = DPB(rax_525, (int16) al_569, 0) + r15_360
	branch rax_523 <u rax_525 l000000000040D0E0
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0C4:
	Mem586[r14_543:word32] = 0x0000FFFD
	rax_525 = r15_360 + 0x0000000000000001
	branch rax_523 >=u rax_525 l000000000040D0AC
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0AC:
	r14_543 = r14_543 + 0x0000000000000004
	rdi_529 = (uint64) Mem498[r14_543:word32]
	r15_360 = rax_525
	branch (word32) rdi_529 == 0x00000000 l000000000040D0E0
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0DA:
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64)

l000000000040D0E0:
	Mem548[r14_543:word32] = 0x00000000
	rsi_129 = rax_481
	qwLoc60_257 = rax_517
	r14_106 = DPB(rax_525, wcstombs(rax_517, rax_481, qwLoc48_505), 0)
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF83:
	branch (bl_28 & 0x01) != 0x00 l000000000040D14D
// DataOut: bl ebx fs r12 r13 r14 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:<invalid> -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040D14D:
	r15_360 = rax_38
	qwLoc58_258 = 0x0000000000000000
	rbp_103 = 0x0000000000000000
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:<invalid> -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF8C:
	qwLoc58_258 = 0x0000000000000000
	rbp_103 = 0x0000000000000000
// DataOut: fs r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CDFA:
	qwLoc58_258 = 0x0000000000000000
	rsi_129 = rsi
// DataOut: bl ebx fs r12 r13 r14 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE03:
	r15_360 = rax_38
	rbp_103 = 0x0000000000000000
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE08:
	rax_329 = Mem0[rcx:word64]
	branch r15_360 <=u rax_329 l000000000040CF2A
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF2A:
	branch r15_360 >=u rax_329 l000000000040D180
// DataOut: bl ebx fs r12 r13 r14 r15 r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D180:
	rax_329 = r15_360
// DataOut: bl ebx ecx fs r12 r13 r14 r8 rax rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF33:
	Mem367[rcx:word64] = r15_360
	word64 rax_363 = rax_329 - r15_360
	rcx_100 = rax_363
	ecx_263 = (word32) rax_363 (alias)
	eax_268 = (word32) (uint64) r8d (alias)
	branch eax_268 != 0x00000000 l000000000040CE2A
// DataOut: bl eax ebx ecx fs r13 r14 r8 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE15:
	r14_106 = rax_329
// DataOut: bl ebx ecx fs r12 r13 r14 r8 rax rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE1A:
	Mem333[rcx:word64] = rax_329
	ecx_263 = 0x00000000
	rcx_100 = 0x0000000000000000
	eax_268 = (word32) (uint64) r8d (alias)
	branch eax_268 == 0x00000000 l000000000040CF4C
// DataOut: bl eax ebx ecx fs r13 r14 r8 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF4C:
	r12_104 = rcx_100
	rcx_100 = 0x0000000000000000
// DataOut: bl ebx fs r12 r13 r14 r8 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE2A:
	r12_104 = 0x0000000000000000
	branch eax_268 == 0x00000001 l000000000040CE3E
// DataOut: bl ebx ecx fs r12 r13 r14 r8 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE32:
	r12_104 = rcx_100 >>u 0x0000000000000001
	rcx_100 = (uint64) (ecx_263 & 0x00000001) + r12_104
// DataOut: bl ebx fs r12 r13 r14 r8 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE3E:
	branch (bl_28 & 0x04) == 0x00 l000000000040CE47
// DataOut: ebx fs r12 r13 r14 r8 rax rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE43_1:
	rcx_100 = 0x0000000000000000
// DataOut: ebx fs r12 r13 r14 r8 rax rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE47:
	branch (word32) (uint64) (ebx_27 & 0x00000008) == 0x00000000 l000000000040CE4E
// DataOut: fs r12 r13 r14 r8 rax rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE4A_1:
	r12_104 = 0x0000000000000000
// DataOut: fs r12 r13 r14 r8 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE4E:
	branch rdx == 0x0000000000000000 l000000000040CEF9
// DataOut: fs r12 r13 r14 r8 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(64) Local -0058(64) Local -0060(64)

l000000000040CE5A:
	word64 rdx_154 = rcx_100 - 0x0000000000000001
	word64 rbx_156 = rsi - 0x0000000000000001 + rdx
	branch rcx_100 == 0x0000000000000000 l000000000040CE97
// DataOut: fs r12 r13 r14 r8 rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE6D:
	branch rsi >=u rbx_156 l000000000040CE97
// DataOut: fs r12 r13 r14 r8 rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE72:
	word64 rax_230 = 0x0000000000000000
// DataOut: fs r12 r13 r14 r8 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE89:
	r13_12 = r13_12 + 0x0000000000000001
	Mem244[r13_12 - 0x0000000000000001:byte] = 0x20
	branch rdx_154 != rax_230 l000000000040CE80
// DataOut: fs r12 r13 r14 r8 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE80:
	rax_230 = rax_230 + 0x0000000000000001
	branch r13_12 == rbx_156 l000000000040CE97
// DataOut: fs r12 r13 r14 r8 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE97:
	Mem169[r13_12:byte] = 0x00
	word64 rdx_170 = rbx_156 - r13_12
	branch rdx_170 <=u r14_106 l000000000040CEB6
// DataOut: fs r12 r14 r8 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(64) Local -0058(64)

l000000000040CEB2_1:
	rdx_170 = r14_106
// DataOut: fs r12 r14 r8 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(64) Local -0058(64)

l000000000040CEB6:
	word64 rax_178 = mempcpy(r13_12, qwLoc60_257, rdx_170)
	word64 rdx_185 = rax_178
	rsi_129 = r12_104 - 0x0000000000000001
	branch r12_104 == 0x0000000000000000 l000000000040CEF6
// DataOut: fs r12 r14 r8 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CECD:
	branch rbx_156 <=u rax_178 l000000000040CEF6
// DataOut: fs r12 r14 r8 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CED2:
	word64 rax_204 = 0x0000000000000000
// DataOut: fs r12 r14 r8 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEE9:
	rdx_185 = rdx_185 + 0x0000000000000001
	Mem219[rdx_185 - 0x0000000000000001:byte] = 0x20
	branch rsi_129 != rax_204 l000000000040CEE0
// DataOut: fs r12 r14 r8 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEE0:
	rax_204 = rax_204 + 0x0000000000000001
	branch rdx_185 == rbx_156 l000000000040CEF6
// DataOut: fs r12 r14 r8 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEF6:
	Mem201[rdx_185:byte] = 0x00
// DataOut: fs r12 r14 r8 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEF9:
// DataOut: fs r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEFF:
	free(qwLoc58_258)
	free(rbp_103)
	return rsi_129
// DataOut: ebx fs r12d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040CDC0_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbx:rbx eax:<invalid> r14:r14 rbp:rbp rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:r15 rcx:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn000000000040D240(word32 edx, word64 rsi, word64 rdi, selector fs, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi rsi
// LiveOut: eax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040D240_entry:
// DataOut: ebx edx fs r13d r15d r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -004C(64)

l000000000040D240:
	word32 eax_104
	word64 rax_30 = Mem0[fs:0x00000028:word64]
	word32 r15d_7 = (word32) (uint64) edx
	word64 r13_16 = rdi + rsi
	word64 rbp_173 = rdi
	word64 rax_168 = (uint64) __ctype_get_mb_cur_max()
	branch rax_168 <=u 0x0000000000000001 l000000000040D370
// DataOut: fs r13 r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D370:
	branch rdi >=u r13_16 l000000000040D406
// DataOut: fs r13 r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D379:
	word64 rcx_348 = Mem0[__ctype_b_loc():word64]
	eax_104 = 0x00000000 (alias)
	word32 esi_353 = (word32) (uint64) ((word32) (uint64) r15d_7 & 0x00000002)
// DataOut: eax esi fs r13 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D398:
	rbp_173 = rbp_173 + 0x0000000000000001
	word32 edx_365 = (word32) Mem0[rcx_348 + DPB(rdx, (word32) Mem0[rbp_173 - 0x0000000000000001:byte], 0) * 0x0000000000000002:word16]
	rdx = DPB(rdx, edx_365, 0) (alias)
	branch (SLICE(edx_365, byte, 8) & 0x40) != 0x00 l000000000040D3B2
// DataOut: eax edx esi fs r13 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3A9:
	branch esi_353 != 0x00000000 l000000000040D369
// DataOut: eax edx esi fs r13 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3AD:
	rdx = (uint64) (edx_365 & 0x00000002)
	branch (word32) rdx != 0x00000000 l000000000040D393
// DataOut: eax esi fs r13 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3B2:
	branch eax_104 != 0x7FFFFFFF l000000000040D390
// DataOut: eax esi fs r13 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D390:
	eax_104 = (word32) (uint64) (eax_104 + 0x00000001) (alias)
// DataOut: eax esi fs r13 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D393:
	branch rbp_173 == r13_16 l000000000040D3C5
// DataOut: eax esi fs r13 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3B9:
// DataOut: fs r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D277:
	branch rdi >=u r13_16 l000000000040D406
// DataOut: fs r13 r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D406:
	eax_104 = 0x00000000 (alias)
// DataOut: eax fs r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D280:
	word32 r12d_151 = 0x00000000
	word32 r15d_153 = (word32) (uint64) (r15d_7 & 0x00000001)
	word32 r14d_155 = (word32) (uint64) ((word32) (uint64) r15d_7 & 0x00000002)
// DataOut: fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2AC:
	word32 eax_175 = (word32) Mem0[rbp_173:byte]
	rax_168 = DPB(rax_168, eax_175, 0) (alias)
	byte al_177 = (byte) eax_175
	branch al_177 <= 0x3F l000000000040D290
// DataOut: al fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D290:
	branch al_177 >= 0x25 l000000000040D29B
// DataOut: al fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D294:
	rax_168 = (uint64) (eax_175 - 0x00000020)
	branch (byte) rax_168 >u 0x03 l000000000040D2C3
// DataOut: fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2B4:
	branch al_177 < 0x41 l000000000040D2C3
// DataOut: al fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2B8:
	branch al_177 <= 0x5F l000000000040D29B
// DataOut: al fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2BC:
	rax_168 = (uint64) (eax_175 - 0x00000061)
	branch (byte) rax_168 <=u 0x1D l000000000040D29B
// DataOut: fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2C3:
// DataOut: fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2F4:
	rax_168 = DPB(rax_168, mbrtowc(fp - 0x000000000000004C, rbp_173, r13_16 - rbp_173, fp - 0x0000000000000048), 0) (alias)
	word64 rbx_267 = rax_168
	branch rax_168 == 0xFFFFFFFFFFFFFFFF l000000000040D360
// DataOut: fs r12d r13 r14d r15d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D360:
	branch r15d_153 == 0x00000000 l000000000040D29B
// DataOut: fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D29B:
	rbp_173 = rbp_173 + 0x0000000000000001
	r12d_151 = (word32) (uint64) (r12d_151 + 0x00000001) (alias)
// DataOut: fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D315:
	branch rax_168 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
// DataOut: fs r12d r13 r14d r15d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D3E8:
	branch r15d_153 != 0x00000000 l000000000040D369
// DataOut: fs r12d r13 r14d r15d r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D3F1:
	rbp_173 = r13_16
	r12d_151 = (word32) (uint64) (r12d_151 + 0x00000001) (alias)
	branch r13_16 >u r13_16 l000000000040D2AC
// DataOut: fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D31F:
	word64 rdi_271 = (uint64) dwLoc4C
	branch rax_168 != 0x0000000000000000 l000000000040D32F
// DataOut: fs r12d r13 r14d r15d r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D32B_1:
	rbx_267 = 0x0000000000000001
// DataOut: fs r12d r13 r14d r15d r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 eax:0x00000001 r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D32F:
	word32 eax_277 = wcwidth(rdi_271)
	rax_168 = DPB(0x0000000000000001, eax_277, 0) (alias)
	branch eax_277 >= 0x00000000 l000000000040D2D0
// DataOut: eax fs r12d r13 r14d r15d r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 eax:0x00000001 r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2D0:
	branch eax_277 > (word32) ((uint64) (0x7FFFFFFF - r12d_151)) l000000000040D3C0
// DataOut: eax fs r12d r13 r14d r15d r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2E0:
	r12d_151 = (word32) (uint64) (r12d_151 + eax_277) (alias)
// DataOut: fs r12d r13 r14d r15d r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D338:
	branch r14d_155 != 0x00000000 l000000000040D369
// DataOut: fs r12d r13 r14d r15d r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D369:
	eax_104 = 0xFFFFFFFF (alias)
// DataOut: eax fs r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D33D:
	branch iswcntrl((uint64) dwLoc4C) != 0x00000000 l000000000040D2E3
// DataOut: fs r12d r13 r14d r15d r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D34A:
	branch r12d_151 == 0x7FFFFFFF l000000000040D3C0
// DataOut: fs r12d r13 r14d r15d r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D3C0:
	eax_104 = 0x7FFFFFFF (alias)
// DataOut: eax fs r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D353:
	r12d_151 = (word32) (uint64) (r12d_151 + 0x00000001) (alias)
// DataOut: fs r12d r13 r14d r15d r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2E3:
	rbp_173 = rbp_173 + rbx_267
	branch mbsinit(fp - 0x0000000000000048) != 0x00000000 l000000000040D2A3
// DataOut: fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2A3:
	branch r13_16 <=u rbp_173 l000000000040D401
// DataOut: fs r12d r13 r14d r15d r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D401:
	eax_104 = (word32) (uint64) r12d_151 (alias)
// DataOut: eax fs r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3C5:
	word64 rsi_59 = rax_30 ^ Mem0[fs:0x00000028:word64]
	*rsiOut = rsi_59
	branch rsi_59 != 0x0000000000000000 l000000000040D40A
// DataOut: eax fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32)

l000000000040D40A:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D3D5:
	return eax_104
// DataOut: eax ebx fs r13d r15d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040D240_exit:
// DataOut: eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r13:r13 rbp:rbp rax:<invalid> eax:<invalid> rsi:<invalid> rbx:rbx r12:r12 r14:r14 rcx:<invalid> edx:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn000000000040D420(word32 esi, word64 rdi, selector fs, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs rdi
// LiveOut: eax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbp rbx rdi rsp
fn000000000040D420_entry:
// DataOut: ebx esi fs r12 r13d r14 r15d r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D420:
	word64 rax_16 = DPB(rax, strlen(rdi), 0)
	word32 edx_22 = (word32) (uint64) (word32) (uint64) esi
// DataOut: ebx edx fs r12 r13d r14 r15d r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D43E_thunk_fn000000000040D240:
	word64 rsi_31
	return fn000000000040D240(edx_22, rax_16, rdi, fs, out rsi_31)
// DataOut: eax ebx fs r12 r13d r14 r15d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx eax:<invalid> rdi:rdi rdx:(uint64) ebp rsi:rax -16(fp):rbx -8(fp):rbp

fn000000000040D420_exit:
// DataOut: eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp



word32 fn000000000040D450(word32 eax, word64 rsi, word64 rdi, ptr64 & rsiOut, ptr64 & r13dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rdi rsi
// LiveOut: eax r13d rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040D450_entry:
	rsp = fp
// DataOut: eax fs r13d r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D450:
	rsp = fp - 8
	qwLoc08 = r15
	rsp = fp - 16
	qwLoc10 = r14
	rsp = fp - 24
	qwLoc18 = r13
	rsp = fp - 32
	qwLoc20 = r12
	rsp = fp - 40
	qwLoc28 = rbp
	rbp = rcx
	rsp = fp - 48
	qwLoc30 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000068
	SCZO = cond(rsi - 0x0000000000000002)
	Z = (bool) SCZO (alias)
	SZO = SCZO (alias)
	CZ = SCZO (alias)
	C = (bool) SCZO (alias)
	qwLoc68 = rsi
	qwLoc50 = rdx
	branch Test(UGT,CZ) l000000000040D490
// DataOut: eax fs r8 rbx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32) Local -0068(64)

l000000000040D490:
	rsi = qwLoc68
	rdx = qwLoc50
	rax = rsi
	rax = rax >>u 0x0000000000000001
	r15 = rax
	qwLoc60 = rax
	rax = rdi + rax * 0x0000000000000008
	rsi = rsi - r15
	SCZO = cond(rsi)
	rdi = rax
	qwLoc40 = rax
	eax = fn000000000040D450(eax, rsi, rdi, out rsi, out r13d)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(r15 - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040D570
// DataOut: fs r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D570:
	r12 = Mem0[rbx:word64]
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[rax:word64] = r12
// DataOut: fs r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D4C5:
	rax = Mem0[rsp:word64]
	r15 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = rbp
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax >>u 0x0000000000000002
	rdx = r15
	r13 = rbx + rax * 0x0000000000000008
	r14 = rax
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r13
	eax = fn000000000040D450(eax, rsi, rdi, out rsi, out r13d)
	rsp = rsp + 0x0000000000000008
	rdx = r15
	rcx = rbp
	rsi = r14
	rdi = rbx
	r15 = r15 + 0x0000000000000008
	eax = fn000000000040D450(eax, rsi, rdi, out rsi, out r13d)
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rbx:word64]
	r13 = Mem0[r13 + 0x0000000000000000:word64]
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: eax fs r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D53B:
	rsi = r13
	rdi = r12
	call rbp (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D520
// DataOut: eax fs r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D520:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - r14)
	Mem0[r15 - 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D634
// DataOut: eax fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D533:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D547:
	v21 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v21
	Mem0[r15 - 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000020:word64] - rax)
	branch Test(EQ,Z) l000000000040D625
// DataOut: eax fs r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D625:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = r14
	Mem0[rsp + 0x0000000000000020:word64] = rax
// DataOut: fs r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D634:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r15
	rdx = rdx - rax
	rsi = rbx + rax * 0x0000000000000008
	rdx = rdx << 0x0000000000000003
	SCZO = cond(rdx)
	rax = memcpy(rdi, rsi, rdx)
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rax:word64]
// DataOut: fs r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D57B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	r15 = 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	r13 = Mem0[rax:word64]
// DataOut: eax fs r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5B7:
	rsi = r13
	rdi = r12
	call rbp (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D5A0
// DataOut: eax fs r12 r13 r14 r15 r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5A0:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp:word64] - r14)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D5F0
// DataOut: eax fs r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5F0:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdi = rbx + r15 * 0x0000000000000008
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r15 = Mem0[rsp + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000038
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8
	r13 = Mem0[rsp:word64]
	rsp = rsp + 8
	r15 = r15 - rax
	SCZO = cond(r15)
	rsi = rcx + rax * 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8
	rdx = 0x00000000 + r15 * 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8
	rax = memcpy(rdi, rsi, rdx)
	return eax
// DataOut: eax fs r13d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5AF:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5C3:
	v22 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v22
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(EQ,Z) l000000000040D479
// DataOut: eax fs r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rcx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5B3:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
// DataOut: eax fs r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D561:
	r12 = Mem0[rbx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D537:
	r15 = r15 + 0x0000000000000008
	SCZO = cond(r15)
// DataOut: eax fs r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D473:
	branch Test(EQ,Z) l000000000040D660
// DataOut: eax fs r8 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l000000000040D660:
	r13 = Mem0[rdi + 0x0000000000000008:word64]
	r13d = (word32) r13 (alias)
	r12 = Mem0[rdi:word64]
	rsi = r13
	rdi = r12
	call rcx (retsize: 8; depth: 112)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000040D479
// DataOut: eax fs r12 r13 r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l000000000040D677:
	Mem0[rbx:word64] = r13
	Mem0[rbx + 0x0000000000000008:word64] = r12
	rsp = fp - 0x0000000000000030
	SCZO = cond(fp - 0x0000000000000030)
	rbx = qwLoc30
	rsp = fp - 0x0000000000000028
	rbp = qwLoc28
	rsp = fp - 0x0000000000000020
	r12 = qwLoc20
	rsp = fp - 0x0000000000000018
	r13 = qwLoc18
	rsp = fp - 0x0000000000000010
	r14 = qwLoc10
	rsp = fp - 0x0000000000000008
	r15 = qwLoc08
	rsp = fp
	return eax
// DataOut: eax fs r13d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D479:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8
	rbp = Mem0[rsp:word64]
	rsp = rsp + 8
	r12 = Mem0[rsp:word64]
	rsp = rsp + 8
	r13 = Mem0[rsp:word64]
	r13d = (word32) r13 (alias)
	rsp = rsp + 8
	r14 = Mem0[rsp:word64]
	rsp = rsp + 8
	r15 = Mem0[rsp:word64]
	rsp = rsp + 8
	return eax
// DataOut: eax fs r13d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040D450_exit:
	use rsi (=> rsiOut)
	use r13d (=> r13dOut)
// DataOut: eax r13d rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040D690(word64 rsi, word64 rdi, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rdi rsi
// LiveOut: r13 r13d r14 r15 rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040D690_entry:
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
// DataOut: edi fs r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D690:
	word32 eax_5 = (word32) (rdi + rsi * 0x0000000000000008)
// DataOut: eax fs r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D69A_thunk_fn000000000040D450:
	word64 rsi_9
	word32 r13d_10
	fn000000000040D450(eax_5, rsi, rdi, out rsi_9, out r13d_10)
	return rsi_9
// DataOut: fs r13 r13d r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:rdi + rsi * 0x0000000000000008 rcx:rdx rdx:rdi + rsi * 0x0000000000000008

fn000000000040D690_exit:
// DataOut: r13 r13d r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid>



void fn000000000040D6A0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn000000000040D6A0_entry:
// DataOut: ebx fs r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D6A0:
	word64 rbx_119 = rdi
	branch rdi == 0x0000000000000000 l000000000040D713
// DataOut: fs r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0008(32)

l000000000040D713:
	fwrite(0x0000000000415FA0, 0x0000000000000001, 0x0000000000000037, Mem0[0x000000000061A650:word64])
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi -8(fp):rbx

l000000000040D6A9:
	word64 rax_11 = strrchr(rdi, 0x000000000000002F)
	branch rax_11 == 0x0000000000000000 l000000000040D703
// DataOut: fs r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6B8:
	word64 rcx_49 = rax_11 + 0x0000000000000001 - rdi
	byte SCZO_50 = cond(rcx_49 - 0x0000000000000006)
	bool C_110 = (bool) SCZO_50
	bool Z_143 = (bool) SCZO_50
	byte CZ_112 = SCZO_50
	branch rcx_49 <= 0x0000000000000006 l000000000040D703
// DataOut: fs r15 rax rbp rbx rdx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 8 rbx:rdi rsi:0x000000000000002F rax:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6C8:
	word64 rsi_145 = rax_11 - 0x0000000000000006
	word64 rdi_148 = 0x0000000000415FD8
	word64 rcx_150 = 0x0000000000000007
// DataOut: fs r15 rax rbp rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 8 rbx:rdi rsi:0x000000000000002F rax:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6D6:
	branch rcx_150 == 0x0000000000000000 l000000000040D6D8
// DataOut: fs r15 rax rbp rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 8 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6D6_1:
	byte SCZO_140 = cond(Mem0[rsi_158:byte] - Mem0[rdi_159:byte])
	C_110 = (bool) SCZO_140 (alias)
	Z_143 = (bool) SCZO_140 (alias)
	CZ_112 = SCZO_140 (alias)
	rsi_145 = rsi_158 + 0x0000000000000001
	rdi_148 = rdi_159 + 0x0000000000000001
	rcx_150 = rcx_150 - 0x0000000000000001
	word64 rsi_158 = rsi_145
	word64 rdi_159 = rdi_148
	branch Mem0[rsi_158:byte] != Mem0[rdi_159:byte] l000000000040D6D6
// DataOut: fs r15 rax rbp rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 8 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6D8:
	branch Z_143 l000000000040D703
// DataOut: fs r15 rax rbp rbx rdx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 8 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6DA:
	word64 rcx_104 = 0x0000000000000003
	word64 rsi_100 = rax_11 + 0x0000000000000001
	word64 rdi_102 = 0x0000000000415FE0
// DataOut: fs r15 rax rbp rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 8 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6E7:
	branch rcx_104 == 0x0000000000000000 l000000000040D6E9
// DataOut: fs r15 rax rbp rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 8 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6E7_2:
	byte SCZO_127 = cond(Mem0[rsi_160:byte] - Mem0[rdi_161:byte])
	C_110 = (bool) SCZO_127 (alias)
	CZ_112 = SCZO_127 (alias)
	rsi_100 = rsi_160 + 0x0000000000000001
	rdi_102 = rdi_161 + 0x0000000000000001
	rcx_104 = rcx_104 - 0x0000000000000001
	word64 rsi_160 = rsi_100
	word64 rdi_161 = rdi_102
	branch Mem0[rsi_160:byte] != Mem0[rdi_161:byte] l000000000040D6E7
// DataOut: fs r15 rax rbp rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 8 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6E9:
	rbx_119 = rax_11 + 0x0000000000000001
	branch CZ_112 != C_110 l000000000040D703
// DataOut: fs r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6F8:
	Mem125[0x000000000061A600:word64] = rax_11 + 0x0000000000000004
	rbx_119 = rax_11 + 0x0000000000000004
// DataOut: fs r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D703:
	Mem42[0x000000000061B200:word64] = rbx_119
	Mem43[0x000000000061A648:word64] = rbx_119
	return
// DataOut: ebx fs r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -8(fp):rbx

fn000000000040D6A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -8(fp):rbx



void fn000000000040D740(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx rax rcx rdi rdx
// Preserved: rsp
fn000000000040D740_entry:
// DataOut: ebx esi fs r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D740:
	word64 rcx_16 = 0x0000000000000007
	word64 rdi_15 = fp - 0x0000000000000048
// DataOut: ebx esi fs r15 rax rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D754:
	branch rcx_16 == 0x0000000000000000 l000000000040D757
// DataOut: ebx esi fs r15 rax rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D757:
	branch esi == 0x00000008 l000000000040D7A1
// DataOut: ebx esi fs r15 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D7A1:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

l000000000040D759:
	Mem26[rdi:word64] = DPB(qwLoc48, esi, 0)
	Mem29[rdi + 0x0000000000000008:word64] = qwLoc40
	Mem32[rdi + 0x0000000000000010:word64] = qwLoc38
	Mem35[rdi + 0x0000000000000018:word64] = qwLoc30
	Mem38[rdi + 0x0000000000000020:word64] = qwLoc28
	Mem41[rdi + 0x0000000000000028:word64] = qwLoc20
	Mem44[rdi + 0x0000000000000030:word64] = qwLoc18
	return
// DataOut: ebx fs r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

fn000000000040D740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):esi

l000000000040D754_1:
	Mem18[rdi_15:word64] = 0x0000000000000000
	rdi_15 = rdi_15 + 0x0000000000000008
	rcx_16 = rcx_16 - 0x0000000000000001
// DataOut: ebx esi fs r15 rax rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)



word64 fn000000000040D7B0(word32 esi, word64 rdi, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs rdi
// LiveOut: rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 rbp rbx rsp
fn000000000040D7B0_entry:
// DataOut: ebx esi fs r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D7B0:
	word64 rax_23 = dcgettext(0x0000000000000000, rdi, 0x0000000000000005)
	word32 r12d_11 = (word32) (uint64) esi
	word64 rbx_116 = rax_23
	branch rax_23 == rdi l000000000040D7E8
// DataOut: fs r12d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32)

l000000000040D7E8:
	word64 rax_49 = fn0000000000411900(fs)
	byte dl_55 = (byte) (uint64) ((word32) Mem0[rax_49:byte] & 0xFFFFFFDF)
	branch dl_55 != 0x55 l000000000040D850
// DataOut: dl fs r12d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:0x0000000000000005 r12:(uint64) esi rsi:rdi rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D850:
	branch dl_55 != 0x47 l000000000040D838
// DataOut: fs r12d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D855:
	branch (byte) (uint64) ((word32) Mem0[rax_49 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x42 l000000000040D838
// DataOut: fs r12d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D861:
	branch Mem0[rax_49 + 0x0000000000000002:byte] != 0x31 l000000000040D838
// DataOut: fs r12d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D867:
	branch Mem0[rax_49 + 0x0000000000000003:byte] != 0x38 l000000000040D838
// DataOut: fs r12d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D86D:
	branch Mem0[rax_49 + 0x0000000000000004:byte] != 0x30 l000000000040D838
// DataOut: fs r12d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D873:
	branch Mem0[rax_49 + 0x0000000000000005:byte] != 0x33 l000000000040D838
// DataOut: fs r12d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D879:
	branch Mem0[rax_49 + 0x0000000000000006:byte] != 0x30 l000000000040D838
// DataOut: fs r12d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D87F:
	branch Mem0[rax_49 + 0x0000000000000007:byte] != 0x00 l000000000040D838
// DataOut: fs r12d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D885:
	rbx_116 = 0x0000000000415FED
	branch Mem0[rax_23:byte] == 0x60 l000000000040D89B
// DataOut: fs r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D897_1:
	rbx_116 = 0x0000000000415FE8
// DataOut: fs r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FE8 rbx:0x0000000000415FED edx:<invalid> r13:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FE8 edi:<invalid> r10:<invalid> al:0xE8 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D89B:
// DataOut: fs r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FE8 rbx:<invalid> edx:<invalid> r13:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FE8 edi:<invalid> r10:<invalid> al:0xE8 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D7F8:
	branch (byte) (uint64) ((word32) Mem0[rax_49 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x54 l000000000040D838
// DataOut: fs r12d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D804:
	branch (byte) (uint64) ((word32) Mem0[rax_49 + 0x0000000000000002:byte] & 0xFFFFFFDF) != 0x46 l000000000040D838
// DataOut: fs r12d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D810:
	branch Mem0[rax_49 + 0x0000000000000003:byte] != 0x2D l000000000040D838
// DataOut: fs r12d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D816:
	branch Mem0[rax_49 + 0x0000000000000004:byte] != 0x38 l000000000040D838
// DataOut: fs r12d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D81C:
	branch Mem0[rax_49 + 0x0000000000000005:byte] != 0x00 l000000000040D838
// DataOut: fs r12d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D838:
	rbx_116 = 0x0000000000415FEB
	branch r12d_11 == 0x00000007 l000000000040D84A
// DataOut: fs r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D846_1:
	rbx_116 = 0x0000000000416DEA
// DataOut: fs r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000416DEA rbx:0x0000000000415FEB edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00416DEA edi:<invalid> r10:<invalid> al:0xEA -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D84A:
// DataOut: fs r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000416DEA rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00416DEA edi:<invalid> r10:<invalid> al:0xEA -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D822:
	rbx_116 = 0x0000000000415FE4
	branch Mem0[rax_23:byte] != 0x60 l000000000040D833
// DataOut: fs r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D82F_1:
	rbx_116 = 0x0000000000415FF1
// DataOut: fs r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FF1 rbx:0x0000000000415FE4 edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FF1 edi:<invalid> r10:<invalid> al:0xF1 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D833:
// DataOut: fs r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FF1 rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FF1 edi:<invalid> r10:<invalid> al:0xF1 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D7D7:
	return rbx_116
// DataOut: ebx fs r15 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

fn000000000040D7B0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> r12:r12 rsi:<invalid> rbp:rbp rdi:<invalid> rax:<invalid> rbx:rbx r13:r13 edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



word64 fn000000000040D8A0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d, selector fs, word64 qwArg08, word64 qwArg10, word64 qwArg18, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r12dOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8d r9b r9d rcx rdi rdx rsi
// LiveOut: ebp r12d r13 r14 r15 r8 rax rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 rcx rdi rdx
// Stack args: Stack +0008(64) Stack +0010(64) Stack +0018(64)
fn000000000040D8A0_entry:
// DataOut: fs r8d r9b r9d rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -004C(64) Stack +0008(64) Stack +0010(64) Stack +0018(64)

l000000000040D8A0:
	byte al_59 = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (word32) (uint64) r9d >>u 0x00000001) & 0x00000001)
	word64 r15_1087 = rcx
	word32 r14d_12 = (word32) (uint64) r8d
	word64 rsp_253 = fp - 248
	word32 dwLocC4_1524 = r8d
	word64 qwLoc88_1599 = qwArg10
	word64 qwLoc90_1600 = qwArg18
	word64 rax_52 = (uint64) __ctype_get_mb_cur_max()
	byte bLocC5_1499 = al_59
	branch r14d_12 >u 0x00000008 l000000000040E280
// DataOut: fs r13 r14d r15 rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(32) Local -00C5(0) Local -00D0(64) Local -00D8(64)

l000000000040E280:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> eax:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D92D:
	word64 rbx_1486
	word64 rdx_1016
	word64 r14_1501
	word64 qwLoc98_1503
	byte bLocD8_1500
	word64 rax_1607 = (uint64) r14d_12
	switch (r14d_12) { l000000000040D940 l000000000040E070 l000000000040DF10 l000000000040DF50 l000000000040DFB0 l000000000040DF90 l000000000040DFE0 l000000000040DFE0 l000000000040DFE0 }
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> eax:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(32) Local -00C5(0) Local -00D0(64)

l000000000040DFE0:
	branch r14d_12 == 0x00000008 l000000000040E012
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(32) Local -00C5(0) Local -00D0(64)

l000000000040DFE2:
	word32 ebx_1671 = (word32) (uint64) r8d
	esi = (word32) (uint64) ebx_1671 (alias)
	qwLoc88_1599 = fn000000000040D7B0((word32) (uint64) ebx_1671, 0x0000000000415FF5, fs)
	rax_1607 = fn000000000040D7B0(esi, 0x0000000000416DEA, fs)
	qwLoc90_1600 = rax_1607
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(0) Local -00D0(64)

l000000000040E012:
	rbx_1486 = 0x0000000000000000
	rdx_1016 = rdx
	branch al_59 != 0x00 l000000000040E044
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E01B:
	word32 eax_1643 = (word32) Mem0[qwLoc88_1599:byte]
	rdx_1016 = qwLoc88_1599
	rax_1607 = DPB(rax_1607, eax_1643, 0) (alias)
	byte al_1645 = (byte) eax_1643
	branch al_1645 == 0x00 l000000000040E044
// DataOut: al fs r11 r13 r15 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E027:
// DataOut: al fs r11 r13 r15 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E030:
	branch rbx_1486 >=u rsi l000000000040E038
// DataOut: al fs r11 r13 r15 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:rdi edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E035:
	Mem1669[rdi + rbx_1486:byte] = al_1645
// DataOut: fs r11 r13 r15 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:rdi edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E038:
	rbx_1486 = rbx_1486 + 0x0000000000000001
	word32 eax_1663 = (word32) Mem0[qwLoc88_1599 + rbx_1486:byte]
	rax_1607 = DPB(rax_1607, eax_1663, 0) (alias)
	al_1645 = (byte) eax_1663 (alias)
	branch al_1645 != 0x00 l000000000040E030
// DataOut: al fs r11 r13 r15 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:rdi edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E044:
	qwLoc98_1503 = qwLoc90_1600
	r14_1501 = DPB(rax_1607, strlen(qwLoc90_1600), 0)
	bLocD8_1500 = 0x01
// DataOut: fs r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF90:
	bLocC5_1499 = 0x00
	bLocD8_1500 = 0x01
	r14_1501 = 0x0000000000000000
	qwLoc98_1503 = 0x0000000000000000
	rbx_1486 = 0x0000000000000000
	rdx_1016 = rdx
// DataOut: fs r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DFB0:
	bLocC5_1499 = 0x01
	bLocD8_1500 = 0x01
	r14_1501 = 0x0000000000000001
	qwLoc98_1503 = 0x0000000000415FEB
	rbx_1486 = 0x0000000000000000
	dwLocC4_1524 = 0x00000003
	rdx_1016 = rdx
// DataOut: fs r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF50:
	branch al_59 != 0x00 l000000000040E428
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E428:
	bLocD8_1500 = 0x01
	r14_1501 = 0x0000000000000001
	qwLoc98_1503 = 0x0000000000415FEB
	rbx_1486 = 0x0000000000000000
	rdx_1016 = rdx
// DataOut: fs r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF5B:
	branch rsi == 0x0000000000000000 l000000000040E2B3
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E2B3:
	bLocD8_1500 = 0x01
	r14_1501 = 0x0000000000000001
	qwLoc98_1503 = 0x0000000000415FEB
	rbx_1486 = 0x0000000000000001
	rdx_1016 = rdx
// DataOut: fs r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF64:
	Mem1564[rdi:byte] = 0x22
	bLocD8_1500 = 0x01
	r14_1501 = 0x0000000000000001
	qwLoc98_1503 = 0x0000000000415FEB
	rbx_1486 = 0x0000000000000001
	rdx_1016 = rdx
// DataOut: fs r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF10:
	branch al_59 != 0x00 l000000000040E408
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E408:
	bLocD8_1500 = 0x00
	r14_1501 = 0x0000000000000001
	qwLoc98_1503 = 0x0000000000416DEA
	rbx_1486 = 0x0000000000000000
	rdx_1016 = rdx
// DataOut: fs r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF1B:
	branch rsi == 0x0000000000000000 l000000000040E2D1
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E2D1:
	bLocD8_1500 = 0x00
	r14_1501 = 0x0000000000000001
	qwLoc98_1503 = 0x0000000000416DEA
	rbx_1486 = 0x0000000000000001
	rdx_1016 = rdx
// DataOut: fs r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF24:
	Mem1537[rdi:byte] = 0x27
	bLocD8_1500 = 0x00
	r14_1501 = 0x0000000000000001
	qwLoc98_1503 = 0x0000000000416DEA
	rbx_1486 = 0x0000000000000001
	rdx_1016 = rdx
// DataOut: fs r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040E070:
	bLocC5_1499 = 0x01
	bLocD8_1500 = 0x00
	r14_1501 = 0x0000000000000001
	qwLoc98_1503 = 0x0000000000416DEA
	rbx_1486 = 0x0000000000000000
	dwLocC4_1524 = 0x00000002
	rdx_1016 = rdx
// DataOut: fs r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040D940:
	bLocC5_1499 = 0x00
	bLocD8_1500 = 0x00
	r14_1501 = 0x0000000000000000
	qwLoc98_1503 = 0x0000000000000000
	rbx_1486 = 0x0000000000000000
	rdx_1016 = rdx
// DataOut: fs r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040D960:
	word64 r13_1105
	word64 r11_1290
	word64 rax_239
	word64 rax_109 = (uint64) ((word32) bLocD8_1500 ^ 0x00000001)
	byte al_114 = 0x0000000000000000 != rcx
	word64 r9_1473 = r14_1501
	word64 rbp_1487 = 0x0000000000000000
	word64 r14_101 = rsi
	word64 r8_103
	*r8Out = rdx
	byte al_106 = (byte) (uint64) ((word32) bLocC5_1499 ^ 0x00000001)
	byte al_110 = (byte) rax_109
	word64 rax_115 = DPB(rax_109, al_114, 0)
	branch rcx == 0xFFFFFFFFFFFFFFFF l000000000040DB76
// DataOut: al ebp fs r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):rsi -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D996:
// DataOut: al ebp fs r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:rcx r14:rsi r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9A0:
	branch al_114 == 0x00 l000000000040DB86
// DataOut: ebp fs r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9A8:
	byte r11b_1078
	word64 r13_1410
	word32 r11d_1412
	branch r9_1473 == 0x0000000000000000 l000000000040E0A0
// DataOut: ebp ecx fs r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9B4:
	branch bLocD8_1500 == 0x00 l000000000040E0A0
// DataOut: ebp ecx fs r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040D9BF:
	rax_115 = rbp_1487 + r9_1473
	branch r15_1087 <u rax_115 l000000000040E0A0
// DataOut: ebp ecx fs r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040E0A0:
	r13_1410 = r8_103 + rbp_1487
	r11d_1412 = 0x00000000 (alias)
	r11b_1078 = 0x00 (alias)
// DataOut: ebp fs r11b r11d r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040D9CD:
	r13_1410 = r8_103 + rbp_1487
	rdx_1016 = r9_1473
	branch memcmp(r13_1410, qwLoc98_1503, r9_1473) != 0x00000000 l000000000040E0B0
// DataOut: ebp fs r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040E0B0:
	r11d_1412 = 0x00000000 (alias)
	r11b_1078 = 0x00 (alias)
// DataOut: ebp fs r11b r11d r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):rdx -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040DA05:
	branch bLocC5_1499 != 0x00 l000000000040DC40
// DataOut: ebp fs r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):rdx -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040DA10:
	r11d_1412 = 0x00000001 (alias)
	r11b_1078 = 0x01 (alias)
// DataOut: ebp fs r11b r11d r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):rdx -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040DA20:
	word32 r12d_1143 = (word32) Mem0[r13_1410:byte]
	byte r12b_1142 = (byte) r12d_1143
	branch r12b_1142 >u 0x7E l000000000040DE18
// DataOut: ebp fs r11b r11d r12b r12d r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040DE18:
	word64 rax_1000
	word64 rdx_1068
	byte dl_1071
	byte r11b_1054
	word64 rbx_1001
	byte dl_1175
	branch rax_52 != 0x0000000000000001 l000000000040E0C0
// DataOut: fs r11b r11d r12b r12d r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E0C0:
	branch r15_1087 == 0xFFFFFFFFFFFFFFFF l000000000040E285
// DataOut: fs r11b r11d r12b r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E285:
	r15_1087 = DPB(rax_115, strlen(r8_103), 0)
	r11b_1078 = (byte) (uint64) r11d_1412 (alias)
// DataOut: fs r11b r12b r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E0D6:
	esi = 0x00000001 (alias)
	word64 rbx_1096 = 0x0000000000000000
	word32 r12d_1101 = 0x00000001
	r13_1105 = r8_103
// DataOut: fs r12b r12d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E11D:
	word64 r14_1124 = rbx_1096 + rbp_1487
	word64 r15_1126 = r8_103 + r14_1124
	word64 rdi_1123 = fp - 0x000000000000004C
	word64 rax_1130 = DPB(rbp_1487, mbrtowc(fp - 0x000000000000004C, r15_1126, r15_1087 - r14_1124, fp - 0x0000000000000048), 0)
	branch rax_1130 == 0x0000000000000000 l000000000040E30E
// DataOut: fs r12b r12d r13 r14 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E30E:
	r12d_1143 = (word32) r12b_1142
	rdx_1068 = (uint64) ((word32) (uint64) r12d_1101 ^ 0x00000001)
	rax_1000 = rbx_1096
	r11b_1054 = (byte) (word32) r11b_1078 (alias)
	r12b_1142 = (byte) r12d_1143 (alias)
	dl_1071 = (byte) rdx_1068 (alias)
// DataOut: dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E157:
	branch rax_1130 == 0xFFFFFFFFFFFFFFFF l000000000040E350
// DataOut: fs r12b r12d r13 r14 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040E350:
	r12d_1143 = (word32) r12b_1142
	rax_1000 = rbx_1096
	r12b_1142 = (byte) r12d_1143 (alias)
	r11b_1054 = (byte) (word32) r11b_1078 (alias)
	rdx_1068 = 0x0000000000000001
	dl_1071 = 0x01 (alias)
// DataOut: dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E161:
	branch rax_1130 == 0xFFFFFFFFFFFFFFFE l000000000040E391
// DataOut: fs r12b r12d r13 r14 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040E391:
	r12d_1143 = (word32) r12b_1142
	rax_1000 = rbx_1096
	r12b_1142 = (byte) r12d_1143 (alias)
	r11b_1054 = (byte) (word32) r11b_1078 (alias)
	branch r15_1087 <=u r14_1124 l000000000040E3FE
// DataOut: fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3DB:
	branch Mem0[r15_1126:byte] != 0x00 l000000000040E3F0
// DataOut: fs r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3F0:
	rax_1000 = rax_1000 + 0x0000000000000001
	branch r15_1087 >u rbp_1487 + rax_1000 l000000000040E3E8
// DataOut: fs r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3E8:
	branch Mem0[r13_1410 + rax_1000:byte] == 0x00 l000000000040E3FE
// DataOut: fs r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3E1:
// DataOut: fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3FE:
	rdx_1068 = 0x0000000000000001
	dl_1071 = 0x01 (alias)
// DataOut: dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E16B:
	branch bLocC5_1499 == 0x00 l000000000040E1BF
// DataOut: fs r12b r12d r13 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E172:
	branch dwLocC4_1524 != 0x00000002 l000000000040E1BF
// DataOut: fs r12b r12d r13 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E179:
	branch rax_1130 == 0x0000000000000001 l000000000040E1BF
// DataOut: fs r12b r12d r13 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E17F:
	word64 rdx_1252 = 0x0000000000000001
// DataOut: fs r12b r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E190:
	rdi_1123 = DPB(rdi_1123, (word32) Mem0[r15_1126 + rdx_1252:byte], 0) (alias)
	byte cl_1270 = (byte) (rdi_1123 - 0x000000000000005B)
	branch cl_1270 >u 0x21 l000000000040E1B6
// DataOut: cl fs r12b r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 eax:0x00000001 r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E19D:
	rdi_1123 = 0x000000000000002B
	branch (0x0000000000000001 << cl_1270 & 0x000000000000002B) != 0x0000000000000000 l000000000040E260
// DataOut: fs r12b r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 eax:0x00000001 r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E260:
	r11_1290 = r14_101
// DataOut: fs r11 r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 eax:0x00000001 r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:0x000000000000002B edi:0x0000002B ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0068(32) Local -0088(64) Local -0090(64) Local -00C4(64) Local -00D0(64)

l000000000040E1B6:
	rdx_1252 = rdx_1252 + 0x0000000000000001
	branch rdx_1252 != rax_1130 l000000000040E190
// DataOut: fs r12b r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 eax:0x00000001 r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1BF:
	branch iswprint((uint64) dwLoc4C) != 0x00000000 l000000000040E1DE
// DataOut: fs r12b r12d r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1DA_1:
	r12d_1101 = 0x00000000
// DataOut: fs r12b r12d r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000000 eax:0x00000000 r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:0x00 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:fp - 0x0000000000000048 edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1DE:
	rbx_1096 = rbx_1096 + rax_1130
	branch mbsinit(fp - 0x0000000000000048) == 0x00000000 l000000000040E11D
// DataOut: fs r12b r12d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000000 eax:0x00000000 r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:0x00 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:fp - 0x0000000000000048 edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1EE:
	esi = (word32) (uint64) r12d_1101 (alias)
	r12d_1143 = (word32) r12b_1142
	rdx_1068 = (uint64) ((word32) (uint64) esi ^ 0x00000001)
	r11b_1054 = (byte) (word32) r11b_1078 (alias)
	r12b_1142 = (byte) r12d_1143 (alias)
	rax_1000 = rbx_1096
	dl_1071 = (byte) rdx_1068 (alias)
// DataOut: dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:fp - 0x0000000000000048 edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E22D:
	branch rax_1000 <=u 0x0000000000000001 l000000000040DE61
// DataOut: dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E237:
	dl_1175 = dl_1071 & bLocD8_1500
	rdx_1016 = DPB(rdx_1068, dl_1175, 0) (alias)
// DataOut: dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DE24:
	word32 edx_1059 = (word32) Mem0[Mem0[__ctype_b_loc():word64] + DPB(rdx_1016, (word32) r12b_1142, 0) * 0x0000000000000002:word16]
	rdx_1068 = (uint64) ((word32) (uint64) (DPB(edx_1059, (word16) edx_1059 >>u 0x000E, 0) ^ 0x00000001) & 0x00000001)
	r11b_1054 = (byte) (uint64) r11d_1412 (alias)
	rax_1000 = 0x0000000000000001
	dl_1071 = (byte) rdx_1068 (alias)
// DataOut: dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040DE61:
	dl_1175 = dl_1071 & bLocD8_1500
	rbx_1001 = rbx_1486
	rdx_1016 = DPB(rdx_1068, dl_1175, 0) (alias)
	branch dl_1175 == 0x00 l000000000040DAF8
// DataOut: dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DAF8:
	branch al_106 == 0x00 l000000000040DB09
// DataOut: fs r11b r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DAFF:
	branch al_110 != 0x00 l000000000040DB2E
// DataOut: fs r11b r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB09:
	branch qwArg08 == 0x0000000000000000 l000000000040DB2E
// DataOut: fs r11b r12b r14 r15 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB13:
	word64 rdx_1028 = (uint64) r12d_1143
	rax_1000 = (uint64) (0x00000001 << (byte) ((uint64) ((word32) ((uint64) r12d_1143) & 0x0000001F)))
	rdx_1016 = DPB(rdx_1028, (word32) ((byte) rdx_1028 >>u 0x05), 0) (alias)
	branch (Mem0[qwArg08 + rdx_1016 * 0x0000000000000004:word32] & (word32) rax_1000) != 0x00000000 l000000000040DB33
// DataOut: fs r11b r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB2E:
	branch r11b_1054 == 0x00 l000000000040DB50
// DataOut: fs r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB33:
	branch bLocC5_1499 != 0x00 l000000000040DC40
// DataOut: fs r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB3E:
	branch rbx_1486 >=u r14_101 l000000000040DB4C
// DataOut: fs r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB43:
	Mem1005[rdi + rbx_1486:byte] = 0x5C
	rax_1000 = rdi
// DataOut: fs r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB4C:
	rbx_1001 = rbx_1486 + 0x0000000000000001
// DataOut: fs r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB50:
	rbp_1487 = rbp_1487 + 0x0000000000000001
// DataOut: ebp fs r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE6B:
	rbx_1001 = rbx_1486
	rax_1000 = rax_1000 + rbp_1487
	byte dil_802 = (byte) (word32) bLocC5_1499
// DataOut: dil dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEF0:
	branch dl_1175 != 0x00 l000000000040DE80
// DataOut: dil dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE80:
	branch dil_802 != 0x00 l000000000040DC40
// DataOut: dil dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DC40:
	r11_1290 = r14_101
	r13_1105 = r8_103
// DataOut: fs r11 r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> sil:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0068(32) Local -0088(64) Local -0090(64) Local -00C4(64) Local -00D0(64)

l000000000040DE89:
	branch rbx_1001 >=u r14_101 l000000000040DE92
// DataOut: dil dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE8E:
	Mem908[rdi + rbx_1001:byte] = 0x5C
// DataOut: dil dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE92:
	branch r14_101 <=u rbx_1001 + 0x0000000000000001 l000000000040DEAA
// DataOut: dil dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE9B:
	word64 rsi_903 = (uint64) (DPB(esi, (byte) (uint64) r12d_1143 >>u 0x06, 0) + 0x00000030)
	Mem907[rdi + 0x0000000000000001 + rbx_1001:byte] = (byte) rsi_903
	esi = (word32) rsi_903 (alias)
// DataOut: dil dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEAA:
	branch r14_101 <=u rbx_1001 + 0x0000000000000002 l000000000040DEC5
// DataOut: dil dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEB3:
	word64 rsi_894 = (uint64) ((word32) (uint64) (DPB(esi, (byte) (uint64) r12d_1143 >>u 0x03, 0) & 0x00000007) + 0x00000030)
	Mem898[rdi + 0x0000000000000002 + rbx_1001:byte] = (byte) rsi_894
	esi = (word32) rsi_894 (alias)
// DataOut: dil dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEC5:
	rbx_1001 = rbx_1001 + 0x0000000000000003
	r12b_1142 = (byte) (uint64) ((word32) (uint64) (r12d_1143 & 0x00000007) + 0x00000030) (alias)
// DataOut: dil dl fs r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEF4:
	branch r11b_1054 == 0x00 l000000000040DED1
// DataOut: dil dl fs r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEF9:
	branch rbx_1001 >=u r14_101 l000000000040DF02
// DataOut: dil dl fs r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEFE:
	Mem863[rdi + rbx_1001:byte] = 0x5C
// DataOut: dil dl fs r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DF02:
	rbx_1001 = rbx_1001 + 0x0000000000000001
	r11b_1054 = 0x00 (alias)
// DataOut: dil dl fs r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DED1:
	rbp_1487 = rbp_1487 + 0x0000000000000001
	branch rax_1000 <=u rbp_1487 l000000000040DB54
// DataOut: dil dl ebp fs r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB54:
	*r8Out = r8_103
	branch rbx_1001 >=u r14_101 l000000000040DB62
// DataOut: ebp fs r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB59:
	Mem753[rdi + rbx_1001:byte] = r12b_1142
	rax_1000 = rdi
// DataOut: ebp fs r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB62:
	al_114 = rbp_1487 != r15_1087
	rbx_1486 = rbx_1001 + 0x0000000000000001
	rax_115 = DPB(rax_1000, al_114, 0) (alias)
	branch r15_1087 != 0xFFFFFFFFFFFFFFFF l000000000040D9A0
// DataOut: al ebp fs r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB76:
	branch Mem0[r8_103 + rbp_1487:byte] != 0x00 != 0x00 l000000000040D9A8
// DataOut: ebp fs r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB86:
	r11_1290 = r14_101
	r13_1105 = r8_103
	branch rbx_1486 != 0x0000000000000000 l000000000040DBA3
// DataOut: fs r11 r13 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0068(32) Local -0088(64) Local -0090(64) Local -0098(0) Local -00C4(0) Local -00C5(0) Local -00D0(64)

l000000000040DB91:
	branch dwLocC4_1524 != 0x00000002 l000000000040DBA3
// DataOut: fs r11 r13 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0068(32) Local -0088(64) Local -0090(64) Local -0098(0) Local -00C4(64) Local -00C5(0) Local -00D0(64)

l000000000040DB98:
	branch bLocC5_1499 != 0x00 l000000000040DC46
// DataOut: fs r11 r13 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0068(32) Local -0088(64) Local -0090(64) Local -0098(0) Local -00C4(64) Local -00C5(0) Local -00D0(64)

l000000000040DC46:
	word64 rbx_330
	word64 rbp_332
	word64 r8_333
	word32 r12d_334
	word64 r13_335
	word64 r14_336
	word64 r15_337
	rax_239 = fn000000000040D8A0(r15_1087, r13_1105, r11_1290, rdi, (word32) (uint64) dwLocC4_1524, (word32) (uint64) ((word32) (uint64) r9d & 0xFFFFFFFD), fs, 0x0000000000000000, qwLoc88_1599, qwLoc90_1600, out rbx_330, out rsp_253, out rbp_332, out r8_333, out r12d_334, out r13_335, out r14_336, out r15_337)
// DataOut: fs r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> cl:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r12:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040DBA3:
	branch bLocC5_1499 != 0x00 l000000000040DBE4
// DataOut: fs r11 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0098(0) Local -00D0(64)

l000000000040DBAA:
	branch qwLoc98_1503 == 0x0000000000000000 l000000000040DBE4
// DataOut: fs r11 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0098(64) Local -00D0(64)

l000000000040DBB2:
	byte al_425 = (byte) (word32) Mem0[qwLoc98_1503:byte]
	branch al_425 == 0x00 l000000000040DBE4
// DataOut: al fs r11 r8 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -00D0(64)

l000000000040DBBE:
	word64 rdx_432 = qwLoc98_1503 - rbx_1486
// DataOut: al fs r11 r8 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -00D0(64)

l000000000040DBD0:
	branch r14_101 <=u rbx_1486 l000000000040DBD8
// DataOut: al fs r11 r8 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -00D0(64)

l000000000040DBD5:
	Mem455[rdi + rbx_1486:byte] = al_425
// DataOut: fs r11 r8 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -00D0(64)

l000000000040DBD8:
	rbx_1486 = rbx_1486 + 0x0000000000000001
	al_425 = (byte) (word32) Mem0[rdx_432 + rbx_1486:byte] (alias)
	branch al_425 != 0x00 l000000000040DBD0
// DataOut: al fs r11 r8 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -00D0(64)

l000000000040DBE4:
	rax_239 = rbx_1486
	branch rbx_1486 >=u r14_101 l000000000040DC86
// DataOut: fs r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -00D0(64)

l000000000040DBF0:
	Mem416[rdi + rbx_1486:byte] = 0x00
// DataOut: fs r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040DC86:
	branch (Mem0[rsp_253 + 0x00000000000000B8:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l000000000040E423
// DataOut: fs r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r12:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040E423:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r12:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040DC9D:
	word64 rsp_259 = rsp_253 + 200
	word64 rbx_261
	*rbxOut = Mem0[rsp_259:word64]
	word64 rbp_264
	*rbpOut = Mem0[rsp_259 + 8:word64]
	word32 r12d_268
	*r12dOut = (word32) Mem0[rsp_259 + 16:word64]
	word64 r13_271
	*r13Out = Mem0[rsp_259 + 24:word64]
	word64 r14_273
	*r14Out = Mem0[rsp_259 + 32:word64]
	word64 r15_276
	*r15Out = Mem0[rsp_259 + 40:word64]
	word64 rsp_277
	*rspOut = rsp_259 + 48
	return rax_239
// DataOut: ebp fs r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r12:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040DEDE:
	branch rbx_1001 >=u r14_101 l000000000040DEE7
// DataOut: dil dl fs r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEE3:
	Mem850[rdi + rbx_1001:byte] = r12b_1142
// DataOut: dil dl fs r11b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEE7:
	r12d_1143 = (word32) Mem0[r8_103 + rbp_1487:byte]
	r12b_1142 = (byte) r12d_1143 (alias)
	rbx_1001 = rbx_1001 + 0x0000000000000001
// DataOut: dil dl fs r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DA2F:
	word32 eax_644 = (word32) r12b_1142
	word64 rax_645 = DPB(rax_115, eax_644, 0)
	word64 rsp_647
	word64 r15_648
	word64 rcx_649
	word64 r14_650
	word32 r14d_651
	word32 r8d_652
	word64 r13_653
	word64 rdx_654
	word64 r12_655
	word64 rbp_656
	word64 rbx_657
	word32 ebx_658
	word32 r9d_659
	byte SCZO_660
	word64 rax_661
	word64 rdi_662
	word64 rsi_663
	selector fs_664
	word32 eax_665
	byte SZO_666
	bool C_667
	byte al_668
	byte CZ_669
	word64 r11_670
	bool Z_671
	word32 edi_672
	word32 esi_673
	word64 r9_674
	word32 ebp_675
	word64 r8_676
	byte cl_677
	word32 ecx_678
	word32 r11d_679
	word32 r12d_680
	byte r12b_681
	word32 edx_682
	word16 dx_683
	byte dl_684
	byte r11b_685
	word64 r10_686
	byte dil_687
	byte sil_688
	call Mem0[rax_645 * 0x0000000000000008 + 0x00416068:word64] (retsize: 8; depth: 256)
		uses: al_646,bLoc61_520,bLoc62_517,bLoc63_111,bLocC0_107,bLocC5_75,bLocD8_76,C_628,cl_564,CZ_643,dil_526,dl_529,dwLoc68_38,dwLocA8_619,dwLocB0_515,dwLocB8_524,dwLocC4_74,dx_530,eax_644,ebp_537,ebx_550,ecx_566,edi_540,edx_531,esi_539,fs,qwLoc08_4,qwLoc10_9,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc40_49,qwLoc48_514,qwLoc60_518,qwLoc70_519,qwLoc78_516,qwLoc80_53,qwLoc88_71,qwLoc90_72,qwLoc98_77,qwLocA0_39,qwLocA8_522,qwLocB0_621,qwLocB8_620,qwLocC0_73,qwLocD0_34,qwLocD8_70,qwLocE8,qwLocF0,qwLocF8,r10_527,r11_627,r11b_622,r11d_623,r12_640,r12b_641,r12d_639,r13_636,r14_558,r14d_557,r15_560,r8_624,r8d_637,r9_625,r9d_634,rax_645,rbp_552,rbx_551,rcx_638,rdi_632,rdx_635,rsi_631,rsp_30,SCZO_642,sil_525,SZO_629,Z_626
		defs: al_668,C_667,cl_677,CZ_669,dil_687,dl_684,dx_683,eax_665,ebp_675,ebx_658,ecx_678,edi_672,edx_682,esi_673,fs_664,r10_686,r11_670,r11b_685,r11d_679,r12_655,r12b_681,r12d_680,r13_653,r14_650,r14d_651,r15_648,r8_676,r8d_652,r9_674,r9d_659,rax_661,rbp_656,rbx_657,rcx_649,rdi_662,rdx_654,rsi_663,rsp_647,SCZO_660,sil_688,SZO_666,Z_671
	return rax_661
// DataOut: ebp fs r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 248 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040D8A0_exit:
// DataOut: ebp r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040E450(word64 rcx, word64 rdx, word64 rsi, word32 edi, word64 r15, selector fs, ptr64 & r8Out, ptr64 & r12dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r15 rcx rdx rsi
// LiveOut: r12b r12d r8 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040E450_entry:
// DataOut: edi fs r15 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E450:
	word64 r15_6 = (int64) edi
	__errno_location()
	word32 r15d_7 = (word32) r15_6
	word64 r12_178 = Mem0[0x000000000061A5D8:word64]
	branch r15d_7 < 0x00000000 l000000000040E5F7
// DataOut: fs r12 r15 r15d rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0008(64) Local -0050(64) Local -0058(64)

l000000000040E5F7:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040E48C:
	branch r15d_7 <u Mem0[0x000000000061A5F0:word32] l000000000040E4FA
// DataOut: fs r12 r15 r15d rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64) Local -0050(64) Local -0058(64)

l000000000040E495:
	word64 r14_168 = (uint64) (r15_6 + 0x0000000000000001)
	branch r12_178 != 0x000000000061A5E0 l000000000040E5E0
// DataOut: ebp fs r12 r14 r15 rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64) Local -0050(64) Local -0058(64)

l000000000040E5E0:
	word64 r8_204
	word64 rax_205 = fn0000000000410C90(rdx, r14_168 << 0x0000000000000004, r12_178, out r8_204)
	Mem208[0x000000000061A5D8:word64] = rax_205
	r12_178 = rax_205
// DataOut: ebp fs r12 r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:(int64) edi + 0x0000000000000001 r14:<invalid> rsi:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64) Local -0050(64) Local -0058(64)

l000000000040E4B0:
	word64 r8_194
	word64 rax_195 = fn0000000000410C90(rdx, r14_168 << 0x0000000000000004, 0x0000000000000000, out r8_194)
	word64 rsi_196 = Mem0[0x000000000061A5E0:word64]
	word64 rdi_197 = Mem0[0x000000000061A5E8:word64]
	Mem200[0x000000000061A5D8:word64] = rax_195
	Mem201[rax_195:word64] = rsi_196
	Mem202[rax_195 + 0x0000000000000008:word64] = rdi_197
	r12_178 = rax_195
// DataOut: ebp fs r12 r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:(int64) edi + 0x0000000000000001 r14:<invalid> rsi:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64) Local -0050(64) Local -0058(64)

l000000000040E4D6:
	word64 rdi_180 = (uint64) Mem0[0x000000000061A5F0:word32]
	memset((rdi_180 << 0x0000000000000004) + r12_178, 0x0000000000000000, r14_168 - rdi_180 << 0x0000000000000004)
	Mem189[0x000000000061A5F0:word32] = r15_6 + 0x0000000000000001
// DataOut: fs r12 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:(int64) edi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64) Local -0050(64) Local -0058(64)

l000000000040E4FA:
	word64 r12_53 = r12_178 + (r15_6 << 0x0000000000000004)
	word32 ebp_64 = (word32) (uint64) ((word32) (uint64) Mem0[rcx + 0x0000000000000004:word32] | 0x00000001)
	word64 rbx_77
	word64 rbp_79
	word64 r8_80
	word32 r12d_81
	word64 r15_84
	word64 r13_100
	word64 r14_101
	word64 rsp_102
	word64 rax_85 = fn000000000040D8A0(rdx, rsi, Mem0[r12_53:word64], Mem0[r12_53 + 0x0000000000000008:word64], (word32) (uint64) Mem0[rcx:word32], (word32) (uint64) ebp_64, fs, rcx + 0x0000000000000008, Mem0[rcx + 0x0000000000000028:word64], Mem0[rcx + 0x0000000000000030:word64], out rbx_77, out rsp_102, out rbp_79, out r8_80, out r12d_81, out r13_100, out r14_101, out r15_84)
	branch Mem0[rsp_102 + 0x0000000000000038:word64] >u rax_85 l000000000040E5BF
// DataOut: ebp fs r12 r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:(int64) edi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64)

l000000000040E554:
	Mem129[r12_53:word64] = rax_85 + 0x0000000000000001
	word64 rsi_125 = rax_85 + 0x0000000000000001
	branch r14_101 == 0x000000000061B220 l000000000040E577
// DataOut: ebp fs r12 r14 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):rdx + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64)

l000000000040E565:
	Mem163[rsp_102 + 0x0000000000000038:word64] = rax_85 + 0x0000000000000001
	free(r14_101)
	rsi_125 = Mem163[rsp_102 + 0x0000000000000038:word64]
// DataOut: ebp fs r12 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):rdx + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64)

l000000000040E577:
	Mem133[rsp_102 + 0x0000000000000038:word64] = rsi_125
	word64 rax_134 = fn0000000000410C40(rsi_125, rsi_125)
	Mem135[r12_53 + 0x0000000000000008:word64] = rax_134
	word32 r8d_139 = (word32) (uint64) Mem135[rbx_77:word32]
	word64 rcx_140 = Mem135[rsp_102 + 0x0000000000000028:word64]
	word64 rdx_143 = Mem135[rsp_102 + 0x0000000000000020:word64]
	word64 rsi_144 = Mem135[rsp_102 + 0x0000000000000038:word64]
	Mem146[rsp_102 + 0x0000000000000010:word64] = Mem135[rbx_77 + 0x0000000000000030:word64]
	word64 rax_147 = Mem146[rbx_77 + 0x0000000000000028:word64]
	Mem148[rsp_102:word64] = r15_84
	Mem149[rsp_102 + 0x0000000000000008:word64] = rax_147
	word64 rbx_153
	word64 rbp_155
	word64 r8_156
	word32 r12d_157
	word64 r15_160
	fn000000000040D8A0(rcx_140, rdx_143, rsi_144, rax_134, r8d_139, (word32) (uint64) ebp_64, fs, qwArg00, qwArg08, qwArg10, out rbx_153, out rsp_102, out rbp_155, out r8_156, out r12d_157, out r13_100, out r14_101, out r15_160)
// DataOut: fs r13 r14 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):rdx + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040E5BF:
	Mem105[r13_100:word32] = (word32) (uint64) Mem0[rsp_102 + 0x0000000000000034:word32]
	word32 r12d_115
	*r12dOut = (word32) Mem105[rsp_102 + 0x0000000000000058:word64]
	return r14_101
// DataOut: ebx fs r12b r12d r13b r15b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):rdx + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040E450_exit:
// DataOut: r12b r12d r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 rbx:rbx rax:<invalid> r13:r13 r12:r12 rbp:rbp r8:<invalid> r11:<invalid> r14:r14 rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):rdx + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040E600(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn000000000040E600_entry:
// DataOut: ebx fs r13b r15 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E600:
	word64 rax_13 = __errno_location()
	word32 r12d_16 = (word32) (uint64) Mem0[rax_13:word32]
	word64 rdi_20 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E61E
// DataOut: fs r12d r13b r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32)

l000000000040E61A_1:
	rdi_20 = rdi
// DataOut: fs r12d r13b r15 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l000000000040E61E:
	word64 rax_26 = fn0000000000410E00(0x0000000000000038, rdi_20)
	Mem27[rax_13:word32] = r12d_16
	return rax_26
// DataOut: ebx fs r13b r15 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040E600_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rax:<invalid> r12:r12 rdi:<invalid> rbx:rbx rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn000000000040E630(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E630_entry:
// DataOut: ebx fs r12 r13b r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E630:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E63C
// DataOut: ebx fs r12 r13b r15 r8 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E638_1:
	rax_12 = rdi
// DataOut: ebx fs r12 r13b r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E63C:
	return (word32) (uint64) Mem0[rax_12:word32]
// DataOut: eax ebx fs r12 r13b r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E630_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040E640(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E640_entry:
// DataOut: ebx esi fs r12 r13b r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E640:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E64C
// DataOut: ebx esi fs r12 r13b r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E648_1:
	rax_12 = rdi
// DataOut: ebx esi fs r12 r13b r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E64C:
	Mem11[rax_12:word32] = esi
	return
// DataOut: ebx fs r12 r13b r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040E650(word32 edx, word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi rdi sil
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040E650_entry:
// DataOut: ebx edx esi fs r12 r13b r14 r15 r8 rbp rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E650:
	word64 rax_12 = 0x000000000061B320
	word32 ecx_10 = (word32) (uint64) esi
	branch rdi == 0x0000000000000000 l000000000040E65E
// DataOut: cl ebx edx fs r12 r13b r14 r15 r8 rax rbp rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E65A_1:
	rax_12 = rdi
// DataOut: cl ebx edx fs r12 r13b r14 r15 r8 rax rbp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rcx:(uint64) esi

l000000000040E65E:
	word64 rsi_20 = rax_12 + DPB(rsi, (word32) (sil >>u 0x05), 0) * 0x0000000000000004
	word32 edi_25 = (word32) (uint64) Mem0[rsi_20 + 0x0000000000000008:word32]
	byte cl_16 = (byte) (uint64) (ecx_10 & 0x0000001F)
	Mem42[rsi_20 + 0x0000000000000008:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) (edx ^ (word32) ((uint64) ((word32) ((uint64) edi_25) >>u cl_16))) & 0x00000001) << cl_16) ^ edi_25)
	return rsi_20
// DataOut: ebx fs r12 r13b r14 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:(uint64) esi

fn000000000040E650_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid>



void fn000000000040E6B0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rsp
fn000000000040E6B0_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6B0:
	branch rdi != 0x0000000000000000 l000000000040E6C0
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E6BC_1:
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320

l000000000040E6C0:
	Mem13[0x000000000061B320:word32] = 0x00000008
	branch rsi == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6CB:
	branch rdx == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6DD:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6D0:
	Mem21[0x000000000061B348:word64] = rsi
	Mem22[0x000000000061B350:word64] = rdx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

fn000000000040E6B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rdi:0x000000000061B320



word64 fn000000000040E6F0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, selector fs, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8 rcx rdi rdx rsi
// LiveOut: r8 rax
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp
fn000000000040E6F0_entry:
// DataOut: fs r8 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6F0:
	word64 rbx_28 = r8
	branch r8 != 0x0000000000000000 l000000000040E716
// DataOut: ebx fs r13 r14 r15 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E712_1:
	rbx_28 = 0x000000000061B320
// DataOut: ebx fs r13 r14 r15 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040E716:
	__errno_location()
	word64 rbx_56
	word64 rsp_57
	word64 rbp_58
	word64 r8_59
	word32 r12d_60
	word64 r13_61
	word64 r14_62
	word64 r15_63
	word64 rax_64 = fn000000000040D8A0(rcx, rdx, rsi, rdi, (word32) (uint64) Mem0[rbx_28:word32], (word32) (uint64) Mem0[rbx_28 + 0x0000000000000004:word32], fs, rbx_28 + 0x0000000000000008, Mem0[rbx_28 + 0x0000000000000028:word64], Mem0[rbx_28 + 0x0000000000000030:word64], out rbx_56, out rsp_57, out rbp_58, out r8_59, out r12d_60, out r13_61, out r14_62, out r15_63)
	Mem66[rbp_58:word32] = r12d_60
	return rax_64
// DataOut: fs r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040E6F0_exit:
// DataOut: r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):rdi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040E930(word64 rdi, word64 r15, selector fs, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r15 rdi
// LiveOut: r12 r12d r8 rax rbp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040E930_entry:
	*rbpOut = rbp
	*r12Out = r12
// DataOut: ebx fs r13 r13b r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E930:
// DataOut: ebx edi fs r13 r13b r15 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E941_thunk_fn000000000040E450:
	word64 r8_14
	word32 r12d_15
	return fn000000000040E450(0x000000000061B320, 0xFFFFFFFFFFFFFFFF, rdi, 0x00000000, r15, fs, out r8_14, out r12d_15)
// DataOut: ebx fs r12 r12d r13 r13b r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061B320 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040E930_exit:
// DataOut: r12 r12d r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040E970(word64 rdx, word32 esi, word32 edi, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r15 rdx
// LiveOut: r12
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn000000000040E970_entry:
// DataOut: edi esi fs r15 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E970:
	fn000000000040D740(esi, fp - 0x0000000000000058)
	word64 r8_24
	word32 r12d_25
	fn000000000040E450(fp - 0x0000000000000058, 0xFFFFFFFFFFFFFFFF, rdx, (word32) (uint64) (word32) (uint64) edi, r15, fs, out r8_24, out r12d_25)
	return r12
// DataOut: fs r12 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040E970_exit:
// DataOut: r12
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn000000000040EAB0(word64 rdi, word64 r15, selector fs, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r15 rdi
// LiveOut: r12 r12b r8
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040EAB0_entry:
	*r12Out = r12
// DataOut: fs r13 r14 r15 r15b rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EAB0:
// DataOut: dl fs r13 r14 r15 r15b rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EA00:
	word64 r8_8 = (uint64) edx
	word64 r8_15 = DPB(r8_8, (word32) ((byte) r8_8 >>u 0x05), 0)
	word32 r9d_34 = (word32) (uint64) Mem0[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32]
	byte cl_18 = (byte) (uint64) ((word32) (uint64) edx & 0x0000001F)
	Mem53[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) r9d_34 >>u cl_18) ^ 0x00000001) & 0x00000001) << cl_18) ^ r9d_34)
	word64 r8_56
	word32 r12d_57
	fn000000000040E450(fp - 0x0000000000000048, 0xFFFFFFFFFFFFFFFF, rdi, 0x00000000, r15, fs, out r8_56, out r12d_57)
	return r8_56
// DataOut: fs r12 r12b r13 r14 r15 r15b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:0x000000000000003A rsi:0xFFFFFFFFFFFFFFFF

fn000000000040EAB0_exit:
// DataOut: r12 r12b r8
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r8b:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):<invalid>



void fn000000000040EBF0(word64 rsi, word32 edi, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r15 rsi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040EBF0_entry:
// DataOut: edi fs r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBF0:
// DataOut: edi fs r15 rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBFC_thunk_fn000000000040E450:
	word64 r8_9
	word32 r12d_10
	fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, rsi, edi, r15, fs, out r8_9, out r12d_10)
	return
// DataOut: fs r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF

fn000000000040EBF0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rdx:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040EC10(word64 rdi, word64 r15, selector fs, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r15 rdi
// LiveOut: r12 r8 rax rbp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040EC10_entry:
	*rbpOut = rbp
	*r12Out = r12
// DataOut: ebx fs r13 r14 r15 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC10:
// DataOut: ebx edi fs r13 r14 r15 rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC21_thunk_fn000000000040E450:
	word64 r8_13
	word32 r12d_14
	return fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, rdi, 0x00000000, r15, fs, out r8_13, out r12d_14)
// DataOut: ebx fs r12 r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040EC10_exit:
// DataOut: r12 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



void fn000000000040EC30(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: r12 rbp rbx rsp
fn000000000040EC30_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC30:
	word64 rbx_17 = rdx - 0x0000000000000001
	branch rdx == 0x0000000000000000 l000000000040EC69
// DataOut: rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC40:
	word64 rax_37 = __ctype_tolower_loc()
// DataOut: r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rbx:rdx - 0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040EC50:
	rcx = DPB(rcx, (word32) Mem0[rsi + rbx_17:byte], 0) (alias)
	Mem46[rdi + rbx_17:byte] = (byte) (uint64) Mem0[Mem0[rax_37:word64] + rcx * 0x0000000000000004:word32]
	rbx_17 = rbx_17 - 0x0000000000000001
	branch rbx_17 != 0xFFFFFFFFFFFFFFFF l000000000040EC50
// DataOut: r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rbx:<invalid> r12:rsi rax:<invalid> ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040EC69:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rbx:<invalid> r12:rsi rax:<invalid> ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040EC30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:rdi r12:r12 ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



void fn000000000040EC80(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: r12 rbp rbx rsp
fn000000000040EC80_entry:
// DataOut: fs r13 r14 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC80:
	word64 rbx_17 = rdx - 0x0000000000000001
	branch rdx == 0x0000000000000000 l000000000040ECB9
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC90:
	word64 rax_37 = __ctype_toupper_loc()
// DataOut: fs r12 r13 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rbx:rdx - 0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040ECA0:
	rcx = DPB(rcx, (word32) Mem0[rsi + rbx_17:byte], 0) (alias)
	Mem46[rdi + rbx_17:byte] = (byte) (uint64) Mem0[Mem0[rax_37:word64] + rcx * 0x0000000000000004:word32]
	rbx_17 = rbx_17 - 0x0000000000000001
	branch rbx_17 != 0xFFFFFFFFFFFFFFFF l000000000040ECA0
// DataOut: fs r12 r13 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rbx:<invalid> r12:rsi rax:<invalid> ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040ECB9:
	return
// DataOut: fs r13 r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi rbx:<invalid> r12:rsi rax:<invalid> ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040EC80_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:rdi r12:r12 ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040ECD0(word64 rcx, word64 rdx, word64 rsi, byte dil, word64 r8, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil fs r8 rcx rdx rsi
// LiveOut: rax
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040ECD0_entry:
// DataOut: dil fs r8 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ECD0:
	word64 r12_17 = rsi
	word64 rbx_25 = rcx
	word64 rsi_31 = Mem0[fs:0x00000028:word64]
	word32 esi_35 = (word32) (uint64) Mem0[r8 + 0x0000000000000008:word32]
	branch esi_35 <= 0x0000000C l000000000040EEE0
// DataOut: fs r10 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(64) Local -04C8(32) Local -04F9(32)

l000000000040EEE0:
	branch (word32) (uint64) esi_35 == 0x00000000 l000000000040EEEE
// DataOut: fs r10 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EEEB_1:
// DataOut: fs r10 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:rsi rbx:rcx rax:0x000000000000000C rsi:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EEEE:
// DataOut: fs r10 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED26:
// DataOut: fs r10 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED2B:
	word64 rax_145
	byte al_258 = (byte) (word32) Mem0[rcx:byte]
	word64 r13_192 = 0x0000000000000000
	branch al_258 == 0x00 l000000000040F053
// DataOut: al fs r10 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1273(fp):dil -1272(fp):r8 -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED39:
// DataOut: al fs r12 r13 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED85:
	word64 r8_281
	branch al_258 != 0x25 l000000000040ED50
// DataOut: al fs r12 r13 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED50:
	branch rdx - r13_192 <=u 0x0000000000000001 l000000000040EE98
// DataOut: al fs r12 r13 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED60:
	branch r12_17 == 0x0000000000000000 l000000000040ED6D
// DataOut: al fs r12 r13 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED65:
	Mem742[r12_17:byte] = al_258
	r12_17 = r12_17 + 0x0000000000000001
// DataOut: fs r12 r13 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED6D:
	r13_192 = r13_192 + 0x0000000000000001
	r8_281 = rbx_25
// DataOut: fs r12 r13 r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED89:
	word32 r9d_336 = (word32) dil
	byte r9b_338 = (byte) r9d_336
	word32 r11d_344 = 0x00000000
// DataOut: fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED94:
	rbx_25 = rbx_25 + 0x0000000000000001
	byte dil_360 = (byte) (word32) Mem0[rbx_25:byte]
	byte SZO_363 = cond(dil_360 - 0x30)
	branch dil_360 == 0x30 l000000000040EDC0
// DataOut: dil fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDA1:
	branch SZO_363 l000000000040EDD0
// DataOut: dil fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDD0:
	branch dil_360 != 0x5E l000000000040EE70
// DataOut: dil fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE70:
	branch dil_360 != 0x5F l000000000040EDEE
// DataOut: dil fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE7A:
	r11d_344 = (int32) dil_360
// DataOut: fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDDA:
	r9d_336 = 0x00000001 (alias)
	r9b_338 = 0x01 (alias)
// DataOut: fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDA3:
	branch dil_360 != 0x23 l000000000040EDE8
// DataOut: dil fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDE8:
	branch dil_360 == 0x2D l000000000040EDC0
// DataOut: dil fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDEE:
	word64 rdx_402 = (uint64) ((int32) dil_360 - 0x00000030)
	word32 ebp_401 = 0xFFFFFFFF
	branch (word32) rdx_402 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDFF:
	word64 rbp_652 = 0x0000000000000000
	ebp_401 = 0x00000000 (alias)
// DataOut: ebp fs r11d r12 r13 r14 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:0x00000000FFFFFFFF rdx:<invalid> r11d:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:0xFFFFFFFF -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE28:
	branch ebp_401 <= 0x0CCCCCCC l000000000040EE08
// DataOut: ebp fs r11d r12 r13 r14 r9b rax rbp rbx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE08:
	word32 edx_690 = (int32) Mem0[rbx_25:byte]
	word64 rdx_691 = DPB(rdx_402, edx_690, 0)
	byte dl_692 = (byte) edx_690
	branch ebp_401 == 0x0CCCCCCC l000000000040EE88
// DataOut: dl ebp edx fs r11d r12 r13 r14 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE88:
	branch dl_692 <= 0x37 l000000000040EE0D
// DataOut: ebp edx fs r11d r12 r13 r14 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE8D:
	rbp_652 = 0x000000007FFFFFFF
	ebp_401 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11d r12 r13 r14 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE0D:
	rcx = DPB(rcx, rbp_652 * 0x0000000000000005, 0) (alias)
	ebp_401 = rdx_691 - 0x0000000000000030 + rcx * 0x0000000000000002
	rbp_652 = DPB(rbp_652, ebp_401, 0) (alias)
// DataOut: bpl ebp fs r11d r12 r13 r14 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE30:
	rbp_652 = 0x000000007FFFFFFF
	ebp_401 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11d r12 r13 r14 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE15:
	rbx_25 = rbx_25 + 0x0000000000000001
	dil_360 = (byte) (word32) Mem0[rbx_25:byte] (alias)
	rdx_402 = (uint64) ((int32) dil_360 - 0x00000030)
	branch (word32) rdx_402 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> ecx:<invalid> ebp:<invalid> r11d:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE40:
	branch dil_360 == 0x45 l000000000040EEC8
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE4A:
	branch dil_360 == 0x4F l000000000040EEC8
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EEC8:
	rbx_25 = rbx_25 + 0x0000000000000001
	dil_360 = (byte) (word32) Mem0[rbx_25:byte] (alias)
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE52:
	branch dil_360 >u 0x7A l000000000040FF4D
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040FF4D:
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r8 r9b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F39F:
	word64 r15_478
	word64 rcx_477
	branch dil_360 != 0x25 l000000000040F0B2
// DataOut: bpl ebp fs r11d r12 r13 r14 r8 r9b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0B2:
	word64 rax_621 = rbx_25 - 0x0000000000000001
	word32 ecx_626 = 0x00000001
// DataOut: bpl ebp ecx fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0C1:
	r15_478 = rax_621
	rax_621 = rax_621 - 0x0000000000000001
	ecx_626 = (word32) (uint64) (ecx_626 + 0x00000001) (alias)
	branch Mem0[rax_621 + 0x0000000000000001:byte] != 0x25 l000000000040F0C1
// DataOut: bpl ebp ecx fs r11d r12 r13 r14 r15 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0D1:
	rcx_477 = (int64) ecx_626
// DataOut: bpl ebp fs r11d r12 r13 r14 r15 r8 r9b rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F3A9:
	r15_478 = rbx_25
	rcx_477 = 0x0000000000000001
// DataOut: bpl ebp fs r11d r12 r13 r14 r15 r8 r9b rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0D7:
	word64 rax_482 = 0x0000000000000000
	byte al_484 = 0x00
	branch ebp_401 < 0x00000000 l000000000040F0E1
// DataOut: al bpl ebp fs r11d r12 r13 r14 r15 r8 r9b rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0DE_1:
	rax_482 = (uint64) ebp_401 (alias)
	al_484 = (byte) ebp_401 (alias)
// DataOut: al ebp fs r11d r12 r13 r14 r15 r8 r9b rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0E1:
	word64 rax_497 = DPB(rax_482, (int16) al_484, 0)
	word64 rbx_501 = rax_497
	branch rcx_477 <u rax_497 l000000000040F0ED
// DataOut: ebp fs r11d r12 r13 r14 r15 r8 r9b rax rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0E9_1:
	rbx_501 = rcx_477
// DataOut: ebp fs r11d r12 r13 r14 r15 r8 r9b rax rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0ED:
	branch rbx_501 >=u rdx - r13_192 l000000000040EE98
// DataOut: ebp fs r11d r12 r13 r14 r15 r8 r9b rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE98:
	rax_145 = 0x0000000000000000
// DataOut: fs rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F0F9:
	branch r12_17 == 0x0000000000000000 l000000000040F16E
// DataOut: ebp fs r11d r12 r13 r14 r15 r8 r9b rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0FE:
	branch rax_497 <=u rcx_477 l000000000040F144
// DataOut: ebp fs r11d r12 r13 r14 r15 r8 r9b rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F103:
	word64 rbp_582 = (int64) ebp_401 - rcx_477
	branch r11d_344 == 0x00000030 l000000000040F1C1
// DataOut: fs r12 r13 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04D8(64) Local -04E0(8) Local -04F0(64) Local -04F9(32)

l000000000040F1C1:
	memset(r12_17, 0x0000000000000030, rbp_582)
	r12_17 = r12_17 + rbp_582
	r9b_338 = (byte) (uint64) r9d_336 (alias)
// DataOut: fs r12 r13 r14 r15 r8 r9b rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F125:
	memset(r12_17, 0x0000000000000020, rbp_582)
	r12_17 = r12_17 + rbp_582
	r9b_338 = (byte) (uint64) r9d_336 (alias)
// DataOut: fs r12 r13 r14 r15 r8 r9b rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F144:
	branch r9b_338 == 0x00 l000000000040F180
// DataOut: fs r12 r13 r14 rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04E0(64) Local -04F0(64) Local -04F9(32)

l000000000040F180:
	memcpy(r12_17, r15_478, rcx_477)
// DataOut: fs r12 r13 r14 r8 rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F15C:
	fn000000000040EC80(rcx_477, r15_478, r12_17)
// DataOut: fs r12 r13 r14 r8 rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F16B:
	r12_17 = r12_17 + rcx_477
// DataOut: fs r12 r13 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F16E:
	r8_281 = rbx_25
	rcx = rcx_477
	r13_192 = r13_192 + rbx_501
// DataOut: fs r12 r13 r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED74:
	al_258 = (byte) (word32) Mem0[r8_281 + 0x0000000000000001:byte] (alias)
	rbx_25 = r8_281 + 0x0000000000000001
	branch al_258 == 0x00 l000000000040F050
// DataOut: al fs r12 r13 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F050:
// DataOut: fs r10 r12 r13
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F053:
	branch r12_17 == 0x0000000000000000 l000000000040F191
// DataOut: fs r10 r12 r13
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F05C:
	branch rdx == 0x0000000000000000 l000000000040F191
// DataOut: fs r12 r13
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F191:
	rax_145 = r13_192
// DataOut: fs rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F065:
	Mem223[r12_17:byte] = 0x00
	rax_145 = r13_192
// DataOut: fs rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040EE9A:
	branch (rsi_31 ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l00000000004105EA
// DataOut: fs rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004105EA:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040EEB1:
	return rax_145
// DataOut: fs rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040EE60:
	word32 edx_433 = (word32) dil_360
	word64 rdx_434 = DPB(rdx_402, edx_433, 0)
	word64 rsp_435
	word64 r15_436
	word64 r10_437
	word64 rdx_438
	word64 r14_439
	word64 r13_440
	word64 r12_441
	word64 rsi_442
	word64 rbp_443
	word64 rbx_444
	word64 rcx_445
	byte SCZO_446
	word64 rax_447
	word64 r8_448
	selector fs_449
	word32 esi_450
	byte SZO_451
	bool C_452
	word32 r9d_453
	byte dil_454
	word32 eax_455
	word32 r13d_456
	byte al_457
	bool Z_458
	word32 r11d_459
	word64 r11_460
	word32 edi_461
	word32 edx_462
	word32 ebp_463
	byte CZ_464
	word64 r9_465
	word32 ecx_466
	byte dl_467
	bool S_468
	word16 ax_469
	word64 rdi_470
	byte r9b_471
	call Mem0[rdx_434 * 0x0000000000000008 + 0x004164E8:word64] (retsize: 8; depth: 1296)
		uses: al_390,ax_391,bLoc04F9_40,C_418,CZ_431,dil_427,dl_406,dwLoc04C4_38,dwLoc04C8_45,dwLoc04E0_232,eax_389,ebp_408,ecx_423,edi_426,edx_433,esi_432,fs,qwLoc04C0_41,qwLoc04D8_231,qwLoc04E0_233,qwLoc04E8_230,qwLoc04F0_234,qwLoc04F8_36,qwLoc08_4,qwLoc10_9,qwLoc18_12,qwLoc20_15,qwLoc28_20,qwLoc30_23,qwLoc40_32,r10_6,r11_357,r11d_356,r12_248,r13_249,r13d_241,r14_229,r15_251,r8_244,r9_348,r9b_347,r9d_349,rax_388,rbp_411,rbx_425,rcx_424,rdi_428,rdx_434,rsi_247,rsp_26,S_420,SCZO_430,SZO_417,Z_429
		defs: al_457,ax_469,C_452,CZ_464,dil_454,dl_467,eax_455,ebp_463,ecx_466,edi_461,edx_462,esi_450,fs_449,r10_437,r11_460,r11d_459,r12_441,r13_440,r13d_456,r14_439,r15_436,r8_448,r9_465,r9b_471,r9d_453,rax_447,rbp_443,rbx_444,rcx_445,rdi_470,rdx_438,rsi_442,rsp_435,S_468,SCZO_446,SZO_451,Z_458
	return rax_447
// DataOut: fs rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040ECD0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040EDA9:
	rbx_25 = rbx_25 + 0x0000000000000001
	dil_360 = (byte) (word32) Mem0[rbx_25:byte] (alias)
	SZO_363 = cond(dil_360 - 0x30) (alias)
	branch dil_360 != 0x30 l000000000040EDA1
// DataOut: dil fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDBB:
// DataOut: dil fs r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:0x0000000000000001 rsi:<invalid> eax:0x00000001 r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:0x0001 rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDC0:
	r11d_344 = (int32) dil_360
// DataOut: fs r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 1288 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)



word64 fn0000000000410600(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8d rcx rdi rdx rsi
// LiveOut: rax
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410600_entry:
// DataOut: fs r8d rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410600:
	return fn000000000040ECD0(rdx, rsi, rdi, 0x00, rcx, fs)
// DataOut: fs rax
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410600_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r10:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rbx:<invalid> r13:<invalid> rbp:<invalid> r14:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ax:<invalid> r15:<invalid> -24(fp):r9d



word64 fn0000000000410630(word64 rsi, word64 rdi, word64 r8, word64 r9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 r9 rdi rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r13 r14 r15
fn0000000000410630_entry:
// DataOut: r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0090(0)

l0000000000410630:
	branch rsi == 0x0000000000000000 l0000000000410A30
// DataOut: r12 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0090(0)

l0000000000410A30:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168CC, tLoc90)
// DataOut: r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0090(0)

l0000000000410650:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168C0, tLoc90)
// DataOut: r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0090(0)

l000000000041066A:
	dcgettext(0x0000000000000000, 0x00000000004168D3, 0x0000000000000005)
	__fprintf_chk(rdi, 0x0000000000000001, 0x0000000000416BA0, tLoc90)
	word64 rax_49 = dcgettext(0x0000000000000000, 0x0000000000416930, 0x0000000000000005)
	word32 eax_52 = fputs_unlocked(rax_49, rdi)
	branch r9 >u 0x0000000000000009 l0000000000410A50
// DataOut: rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rax:<invalid> eax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0090(0)

l0000000000410A50:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:0x00000000000007DD rcx:<invalid> rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0090(0)

l00000000004107A1:
	__fprintf_chk(rdi, 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000416B08, 0x0000000000000005), tLoc90)
	return fp
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:<invalid> rbp:rdi rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:0x0000000000000005 rsi:0x0000000000416B08 rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004106BE:
	word64 rsp_106
	word64 r15_107
	word64 r14_108
	word64 r13_109
	word64 r12_110
	word64 r9_111
	word64 rbp_112
	word64 rdi_113
	word64 rbx_114
	word64 r8_115
	byte SCZO_116
	word64 rsi_117
	byte SZO_118
	bool C_119
	bool Z_120
	word64 rcx_121
	word64 rdx_122
	word32 edx_123
	word32 esi_124
	word32 eax_125
	word64 rax_126
	word32 edi_127
	word32 r8d_128
	byte CZ_129
	word64 r10_130
	call Mem0[0x0000000000416B48:word64] (retsize: 8; depth: 144)
		uses: C_31,CZ_54,eax_52,edi,edx,esi,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_18,qwLoc30_23,qwLoc40,qwLoc48,qwLoc50,qwLoc58,qwLoc60,qwLoc68,qwLoc70,qwLoc78,qwLoc80,qwLoc88,r10,r12_15,r13,r14,r15,r8_38,r8d,r9_33,rax_49,rbp_20,rbx_25,rcx_39,rdi_51,rdx_47,rsi_50,rsp_26,SCZO_53,SZO_32,tLoc90,Z_29
		defs: C_119,CZ_129,eax_125,edi_127,edx_123,esi_124,r10_130,r12_110,r13_109,r14_108,r15_107,r8_115,r8d_128,r9_111,rax_126,rbp_112,rbx_114,rcx_121,rdi_113,rdx_122,rsi_117,rsp_106,SCZO_116,SZO_118,Z_120
	return rsp_106
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:0x00000000000007DD rcx:<invalid> rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000410630_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:r13 r15:r15 r14:r14 -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000410AC0(word64 rsi, word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410AC0_entry:
// DataOut: r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AC0:
	word64 r9_11 = 0x0000000000000000
// DataOut: r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AF3:
	word32 eax_17 = (word32) (uint64) Mem0[r8:word32]
	branch eax_17 <u 0x00000030 l0000000000410AD0
// DataOut: eax r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AD0:
	word64 r10_52 = (uint64) eax_17 + Mem0[r8 + 0x0000000000000010:word64]
	Mem55[r8:word32] = (word32) (uint64) (eax_17 + 0x00000008)
	word64 rax_56 = Mem55[r10_52:word64]
	Mem60[fp - 0x0000000000000058 + r9_11 * 0x0000000000000008:word64] = rax_56
	branch rax_56 == 0x0000000000000000 l0000000000410B18
// DataOut: r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AFB:
	word64 r10_43 = Mem0[r8 + 0x0000000000000008:word64]
	Mem45[r8 + 0x0000000000000008:word64] = r10_43 + 0x0000000000000008
	word64 rax_46 = Mem45[r10_43:word64]
	Mem50[fp - 0x0000000000000058 + r9_11 * 0x0000000000000008:word64] = rax_46
	branch rax_46 != 0x0000000000000000 l0000000000410AE9
// DataOut: r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AE9:
	r9_11 = r9_11 + 0x0000000000000001
	branch r9_11 == 0x000000000000000A l0000000000410B18
// DataOut: r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B13:
// DataOut: r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B18:
	fn0000000000410630(rsi, rdi, fp - 0x0000000000000058, r9_11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>

fn0000000000410AC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> rax:<invalid> r10:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid>



void fn0000000000410B30(byte al, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410B30_entry:
// DataOut: al rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B30:
	branch al == 0x00 l0000000000410B7C
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B45:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9
// LocalsOut: fp(64)

l0000000000410B7C:
	fn0000000000410AC0(rsi, rdi, fp - 0x00000000000000D0)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9 -136(fp):xmm0 -120(fp):xmm1 -104(fp):xmm2 -88(fp):xmm3 -72(fp):xmm4 -56(fp):xmm5 -40(fp):xmm6 -24(fp):xmm7

fn0000000000410B30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> -208(fp):0x00000020 -204(fp):0x00000030 -200(fp):fp + 0x0000000000000008 -192(fp):fp - 0x00000000000000B8 -152(fp):r8 -144(fp):r9 -136(fp):xmm0 -120(fp):xmm1 -104(fp):xmm2 -88(fp):xmm3 -72(fp):xmm4 -56(fp):xmm5 -40(fp):xmm6 -24(fp):xmm7



word64 fn0000000000410C40(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rbx rsp
fn0000000000410C40_entry:
// DataOut: ebp ebx fs r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C40:
	word64 rax_13 = malloc(rdi)
	branch rax_13 == 0x0000000000000000 l0000000000410C50
// DataOut: ebp ebx fs r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> rax:<invalid> rdi:rdi *s rsi -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l0000000000410C50:
	branch rdi == 0x0000000000000000 l0000000000410C4E
// DataOut: ebp ebx fs r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l0000000000410C55:
	fn0000000000410E50()
	word64 rax_32 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi)
	branch rax_32 <u rdi l0000000000410C7A
// DataOut: ebp ebx fs r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C7A:
	Mem39[fp - 16:word64] = rax_32
	fn0000000000410E50()
// DataOut: ebp ebx fs r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C71:
	rdi = rdi *s rsi
// DataOut: ebp ebx fs r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410C4E:
	return rax_13
// DataOut: ebp ebx fs r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx

fn0000000000410C40_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx



word64 fn0000000000410C90(word64 rdx, word64 rsi, word64 rdi, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: al r8 rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rbx rsi rsp
fn0000000000410C90_entry:
	*r8Out = r8
// DataOut: ebp fs r13d r14 r15 r8 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C90:
	branch rsi == 0x0000000000000000 l0000000000410CB0
// DataOut: ebp fs r13d r14 r15 r8 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB0:
	branch rdi == 0x0000000000000000 l0000000000410C99
// DataOut: ebp fs r13d r14 r15 r8 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB5:
	free(rdi)
	return 0x0000000000000000
// DataOut: al ebp fs r13d r14 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx

l0000000000410C99:
	word64 rax_59 = realloc(rdi, rsi)
	branch rax_59 == 0x0000000000000000 l0000000000410CBE
// DataOut: al ebp fs r13d r14 r15 r8 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CBE:
	branch rsi == 0x0000000000000000 l0000000000410CA6
// DataOut: al ebp fs r13d r14 r15 r8 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CC3:
	fn0000000000410E50()
	rdx = (uint64) (0xFFFFFFFFFFFFFFFF % rdx)
	word64 rax_82 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdx)
	branch rax_82 <u rsi l0000000000410CED
// DataOut: ebp fs r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410CED:
	Mem91[fp - 16:word64] = rax_82
	fn0000000000410E50()
	word64 r8_95
	*r8Out = rdx
	word64 rcx_109 = Mem91[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410D40
// DataOut: ebp fs r13d r14 r15 r8 rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410D40:
	branch rcx_109 != 0x0000000000000000 l0000000000410D29
// DataOut: ebp fs r13d r14 r15 r8 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D45:
	word64 rax_196 = (uint64) (0x0000000000000080 /u rdx)
	rdx = (uint64) (0x0000000000000080 % rdx)
	rcx_109 = (uint64) (rax_196 == 0x0000000000000000) + rax_196
// DataOut: ebp fs r13d r14 r15 r8 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D0B:
	rdx = (uint64) (0x00000000AAAAAAAA % rdx)
	word64 rax_121 = (uint64) (0x00000000AAAAAAAA /u rdx)
	branch rcx_109 >=u rax_121 l0000000000410D5C
// DataOut: ebp fs r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D5C:
	Mem134[fp - 24:word64] = rax_121
	fn0000000000410E50()
	word64 rax_138 = Mem134[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410DA0
// DataOut: ebp fs r13d r14 r15 r8 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410DA0:
	rdx = 0x0000000000000080
	branch rax_138 != 0x0000000000000000 l0000000000410DAC
// DataOut: ebp fs r13d r14 r15 r8 rax rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410DA8_1:
	rax_138 = 0x0000000000000080
// DataOut: ebp fs r13d r14 r15 r8 rax rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410DAC:
	Mem180[rsi:word64] = rax_138
	rsi = rax_138
// DataOut: ebp fs r13d r14 r15 r8 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D78:
	branch rax_138 >u 0x00000000AAAAAAA9 l0000000000410DB7
// DataOut: ebp fs r13d r14 r15 r8 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410DB7:
	Mem155[fp - 32:word64] = rax_138
	fn0000000000410E50()
	Mem157[fp - 40:word64] = rsi
	return memset(fn0000000000410C40(rsi, rdi), 0x0000000000000000, rdi)
// DataOut: al ebp fs r13d r14 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x00000000AAAAAAA9 -8(fp):rbx
// Terminates process

l0000000000410D87:
	rdx = rax_138 + 0x0000000000000001 >>u 0x0000000000000001
	word64 rax_148 = rax_138 + rdx
	Mem151[rsi:word64] = rax_148
	rsi = rax_148
// DataOut: ebp fs r13d r14 r15 r8 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x00000000AAAAAAA9 -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D1F:
	rcx_109 = rcx_109 + (rcx_109 + 0x0000000000000001 >>u 0x0000000000000001)
// DataOut: ebp fs r13d r14 r15 r8 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D29:
	Mem110[rsi:word64] = rcx_109
	rsi = rcx_109 *s rdx
// DataOut: ebp fs r13d r14 r15 r8 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CE4:
	rsi = rsi *s rdx
// DataOut: ebp fs r13d r14 r15 r8 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CA6:
	return rax_59
// DataOut: al ebp fs r13d r14 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -8(fp):rbx

fn0000000000410C90_exit:
// DataOut: al r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx



word64 fn0000000000410E00(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: rbp rbx rsi rsp
fn0000000000410E00_entry:
// DataOut: ebx fs r12 r12d r13 r13b r14 r14d r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E00:
	return memcpy(fn0000000000410C40(rsi, rsi), rdi, rsi)
// DataOut: ebx fs r12 r12d r13 r13b r14 r14d r15 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410E00_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rdi:<invalid> rbx:rbx rdx:rsi rsi:<invalid> rax:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000410E30(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000410E30_entry:
// DataOut: ebx fs r12 r12d r13 r13b r14 r14d r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E30:
	word64 rax_9 = DPB(rax, strlen(rdi), 0)
	word64 rsi_11
	*rsiOut = rax_9 + 0x0000000000000001
// DataOut: ebx fs r12 r12d r13 r13b r14 r14d r15 r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000410E41_thunk_fn0000000000410E00:
	return fn0000000000410E00(rax_9 + 0x0000000000000001, rdi)
// DataOut: ebx fs r12 r12d r13 r13b r14 r14d r15 r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:rdi rsi:rax + 0x0000000000000001 -8(fp):rbx

fn0000000000410E30_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx



void fn0000000000410E50()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000410E50_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000410E50_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(0)

l0000000000410E50:
	dcgettext(0x0000000000000000, 0x0000000000416BCF, 0x0000000000000005)
	error((uint64) Mem0[0x000000000061A580:word32], 0x0000000000000000, 0x0000000000415E54, tLoc10)
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



word32 fn0000000000410E90(word64 rcx, word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & ebxOut, ptr64 & r13bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rcx rdi rsi
// LiveOut: eax ebx r13b
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rdi rsp
fn0000000000410E90_entry:
// DataOut: ebx edx fs r13b r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E90:
	word32 r14d_10 = (word32) (uint64) edx
	branch edx >u 0x00000024 l00000000004112B0
// DataOut: fs r14d r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l00000000004112B0:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416DC8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000410EAA:
	word64 r15_31 = rsi
	branch rsi != 0x0000000000000000 l0000000000410EC2
// DataOut: fs r12 r13 r13b r14d r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410EBE_1:
	r15_31 = fp - 0x0000000000000040
// DataOut: fs r12 r13 r13b r14d r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:rsi r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410EC2:
	byte bl_409 = (byte) (word32) Mem0[rdi:byte]
	word64 rdx_46 = Mem0[__ctype_b_loc():word64]
	word64 rax_403 = rdi
// DataOut: bl fs r12 r13 r13b r14d r15 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:<invalid> r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410EDF:
	word32 r9d_61 = (word32) bl_409
	r9 = DPB(r9, r9d_61, 0) (alias)
	branch (Mem0[rdx_46 + 0x0000000000000001 + r9 * 0x0000000000000002:byte] & 0x20) != 0x00 l0000000000410ED8
// DataOut: bl fs r12 r13 r13b r14d r15 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410ED8:
	rax_403 = rax_403 + 0x0000000000000001
	bl_409 = (byte) (word32) Mem0[rax_403:byte] (alias)
// DataOut: bl fs r12 r13 r13b r14d r15 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410EEB:
	word32 eax_128
	branch bl_409 != 0x2D l0000000000410F08
// DataOut: fs r12 r13 r13b r14d r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F08:
	word32 ebp_194
	word32 edx_219
	word64 rax_173 = __errno_location()
	Mem175[rax_173:word32] = 0x00000000
	word64 rax_180 = DPB(rax_173, strtoul(rdi, r15_31, (uint64) r14d_10), 0)
	word64 r14_181 = Mem175[r15_31:word64]
	word64 rbx_183 = rax_180
	branch r14_181 == rdi l0000000000410FE7
// DataOut: ebx fs r12 r13 r13b r14 rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FE7:
	branch r8 == 0x0000000000000000 l0000000000410EF0
// DataOut: fs r12 r13 r13b r14 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FF0:
	word32 edx_381 = (word32) Mem175[rdi:byte]
	byte dl_383 = (byte) edx_381
	branch dl_383 == 0x00 l0000000000410EF0
// DataOut: dl edx fs r12 r13 r13b r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FFC:
	ebp_194 = 0x00000000 (alias)
	rbx_183 = 0x0000000000000001
	edx_219 = (word32) (uint64) edx_381 (alias)
	branch strchr(r8, DPB(r15_31, (int32) dl_383, 0)) != 0x0000000000000000 l0000000000410F94
// DataOut: dl ebp ebx edx fs r12 r13 r13b r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l000000000041101F:
// DataOut: fs
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:0x0000000000000001 rcx:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F3A:
	word32 eax_315 = (word32) (uint64) Mem175[rax_173:word32]
	branch eax_315 != 0x00000000 l0000000000410F68
// DataOut: eax ebx fs r12 r13 r13b r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F68:
	ebp_194 = 0x00000001 (alias)
	branch eax_315 != 0x00000022 l0000000000410EF0
// DataOut: ebp ebx fs r12 r13 r13b r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F76:
// DataOut: ebp ebx fs r12 r13 r13b r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F40:
	ebp_194 = 0x00000000 (alias)
// DataOut: ebp ebx fs r12 r13 r13b r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F42:
	branch r8 == 0x0000000000000000 l0000000000410F4F
// DataOut: ebp ebx fs r12 r13 r13b r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F47:
	word32 edx_353 = (word32) Mem175[r14_181:byte]
	byte dl_355 = (byte) edx_353
	branch dl_355 != 0x00 l0000000000410F78
// DataOut: dl ebp ebx edx fs r12 r13 r13b r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F78:
	edx_219 = (word32) (uint64) edx_353 (alias)
	branch strchr(r8, DPB(r15_31, (int32) dl_355, 0)) == 0x0000000000000000 l0000000000411028
// DataOut: dl ebp ebx edx fs r12 r13 r13b r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F94:
	word32 edx_235 = (word32) (uint64) edx_219
	branch strchr(r8, 0x0000000000000030) == 0x0000000000000000 l0000000000410FCB
// DataOut: dl ebp ebx fs r13 r13b r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FAE:
	byte al_292 = (byte) (word32) Mem175[r14_181 + 0x0000000000000001:byte]
	branch al_292 == 0x44 l0000000000411262
// DataOut: al dl ebp ebx fs r13 r13b r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FBB:
	branch al_292 == 0x69 l000000000041124A
// DataOut: al dl ebp ebx fs r13 r13b r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l000000000041124A:
// DataOut: dl eax ebp ebx fs r13 r13b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FC3:
	branch al_292 == 0x42 l0000000000411262
// DataOut: dl ebp ebx fs r13 r13b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000411262:
// DataOut: dl eax ebp ebx fs r13 r13b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FCB:
// DataOut: dl eax ebp ebx fs r13 r13b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FD5:
	word64 rdx_244 = (uint64) (edx_235 - 0x00000042)
	byte dl_246 = (byte) rdx_244
	branch dl_246 >u 0x35 l0000000000411028
// DataOut: dl eax ebp ebx fs r13 r13b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000411028:
	Mem211[rcx:word64] = rbx_183
	eax_128 = (word32) (uint64) ((word32) (uint64) ebp_194 | 0x00000002) (alias)
// DataOut: eax fs
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FDD:
	word32 edx_249 = (word32) dl_246
	word64 rdx_250 = DPB(rdx_244, edx_249, 0)
	word64 rsp_251
	word64 r15_252
	word64 r14_253
	word32 r14d_254
	word32 edx_255
	word64 r13_256
	word64 r12_257
	word64 rbp_258
	word64 rbx_259
	byte SCZO_260
	byte CZ_261
	word64 rax_262
	word64 rdi_263
	word64 rsi_264
	byte SZO_265
	bool C_266
	word64 rcx_267
	word64 r8_268
	bool Z_269
	word32 ecx_270
	word64 rdx_271
	word32 esi_272
	word32 edi_273
	word32 ebx_274
	word32 r9d_275
	byte bl_276
	word64 r9_277
	word32 eax_278
	word32 ebp_279
	byte dl_280
	byte al_281
	byte cl_282
	byte r13b_283
	call Mem175[rdx_250 * 0x0000000000000008 + 0x00416C18:word64] (retsize: 8; depth: 96)
		uses: al_243,bl_225,C_233,cl_237,CZ_248,dl_246,dwLoc50_229,eax_242,ebp_217,ebx_224,ecx_238,edi,edx_249,esi_218,qwLoc08_4,qwLoc10_7,qwLoc18_13,qwLoc20_16,qwLoc28_19,qwLoc30_22,qwLoc50_178,r12_39,r13_36,r13b_37,r14_181,r14d_182,r15_40,r8,r9_62,r9d_61,rax_241,rbp_226,rbx_223,rcx_240,rdi_228,rdx_250,rsi_227,rsp_23,SCZO_247,SZO_231,Z_239
		defs: al_281,bl_276,C_266,cl_282,CZ_261,dl_280,eax_278,ebp_279,ebx_274,ecx_270,edi_273,edx_255,esi_272,r12_257,r13_256,r13b_283,r14_253,r14d_254,r15_252,r8_268,r9_277,r9d_275,rax_262,rbp_258,rbx_259,rcx_267,rdi_263,rdx_271,rsi_264,rsp_251,SCZO_260,SZO_265,Z_269
	return eax_278
// DataOut: eax ebx fs r13b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000410F4F:
	Mem332[rcx:word64] = rax_180
	word32 ebx_339
	*ebxOut = (word32) rbx
	byte r13b_347
	*r13bOut = (byte) r13
	return (word32) (uint64) ebp_194
// DataOut: eax ebx fs r13b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000410EF0:
	eax_128 = 0x00000004 (alias)
// DataOut: eax fs
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410EF5:
	word32 ebx_133
	*ebxOut = (word32) rbx
	byte r13b_141
	*r13bOut = (byte) r13
	return eax_128
// DataOut: eax ebx fs r13b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000410E90_exit:
// DataOut: eax ebx r13b
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebx:<invalid> rdx:<invalid> r9d:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn00000000004112D0(word64 rcx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi rcx
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004112D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004112D0_entry:
// DataOut: edi esi rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(0)

l00000000004112D0:
	word64 rsi_103
	word32 r10d_7 = (word32) (int64) esi
	word32 ebp_25 = (word32) (uint64) Mem0[0x000000000061A580:word32]
	branch edi >u 0x00000003 l000000000041133B
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(0)

l000000000041133B:
	rsi_103 = 0x0000000000416DD1
	branch edi == 0x00000004 l00000000004112FA
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0040(0)

l0000000000411345:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:0x0000000000416DD1 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l00000000004112EB:
	branch edi >=u 0x00000002 l0000000000411334
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0040(0)

l0000000000411334:
	rsi_103 = 0x0000000000416E10
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0040(0)

l00000000004112F0:
	rsi_103 = 0x0000000000416DEC
	branch (word32) (uint64) (edi - 0x00000001) != 0x00000000 l000000000041132F
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0040(0)

l00000000004112FA:
	branch r10d_7 < 0x00000000 l0000000000411347
// DataOut: ebp r10 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0040(0)

l0000000000411347:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: Local -0040(0)

l00000000004112FF:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: Local -0040(0)

l000000000041130C:
	error((uint64) ebp_25, 0x0000000000000000, dcgettext(0x0000000000000000, rsi_103, 0x0000000000000005), tLoc40)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:<invalid> r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r13:<invalid> -56(fp):dl -55(fp):0x00 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000041132F:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:<invalid> r12:r8 rbp:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> r13:<invalid> rdx:<invalid> rax:<invalid> r9:r8 r8:<invalid> rcx:<invalid> -56(fp):dl -55(fp):0x00 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



word32 fn0000000000411360(word64 rcx, word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & ebpOut, ptr64 & r8Out, ptr64 & r14bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rcx rdi rsi
// LiveOut: eax ebp r14b r8
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rdi rsp
fn0000000000411360_entry:
	*r8Out = r8
// DataOut: ebp edx fs r14b r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411360:
	word32 r14d_10 = (word32) (uint64) edx
	branch edx >u 0x00000024 l0000000000411788
// DataOut: fs r14d r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411788:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416FE8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000041137A:
	word64 r15_32 = rsi
	branch rsi != 0x0000000000000000 l0000000000411392
// DataOut: fs r12 r13 r14d r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041138E_1:
	r15_32 = fp - 0x0000000000000040
// DataOut: fs r12 r13 r14d r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:rsi r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411392:
	byte bl_411 = (byte) (word32) Mem0[rdi:byte]
	word64 rdx_46 = Mem0[__ctype_b_loc():word64]
	word64 rax_405 = rdi
// DataOut: bl fs r12 r13 r14d r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:<invalid> r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113AF:
	word32 r9d_61 = (word32) bl_411
	r9 = DPB(r9, r9d_61, 0) (alias)
	branch (Mem0[rdx_46 + 0x0000000000000001 + r9 * 0x0000000000000002:byte] & 0x20) != 0x00 l00000000004113A8
// DataOut: bl fs r12 r13 r14d r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113A8:
	rax_405 = rax_405 + 0x0000000000000001
	bl_411 = (byte) (word32) Mem0[rax_405:byte] (alias)
// DataOut: bl fs r12 r13 r14d r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113BB:
	word32 eax_128
	branch bl_411 != 0x2D l00000000004113D8
// DataOut: fs r12 r13 r14d r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113D8:
	word32 ebp_210
	word32 edx_222
	word64 rax_175 = __errno_location()
	Mem178[rax_175:word32] = 0x00000000
	word64 rax_183 = DPB(rax_175, __strtoul_internal(rdi, r15_32, (uint64) r14d_10, 0x0000000000000000), 0)
	word64 r14_184 = Mem178[r15_32:word64]
	word64 rbx_187 = rax_183
	word64 r8_190 = rax_175
	*r8Out = r8_190
	branch r14_184 == rdi l00000000004114BF
// DataOut: fs r12 r13 r14 r14b r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114BF:
	branch r8 == 0x0000000000000000 l00000000004113C0
// DataOut: fs r12 r13 r14 r14b r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114C8:
	word32 edx_383 = (word32) Mem178[rdi:byte]
	byte dl_385 = (byte) edx_383
	branch dl_385 == 0x00 l00000000004113C0
// DataOut: dl edx fs r12 r13 r14 r14b r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114D4:
	ebp_210 = 0x00000000 (alias)
	rbx_187 = 0x0000000000000001
	edx_222 = (word32) (uint64) edx_383 (alias)
	branch strchr(r8, DPB(r15_32, (int32) dl_385, 0)) != 0x0000000000000000 l000000000041146C
// DataOut: dl ebp edx fs r12 r13 r14 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114F7:
// DataOut: fs r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:r8 eax:<invalid> rbx:0x0000000000000001 r8:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041140C:
	word32 eax_317 = (word32) (uint64) Mem178[rax_175:word32]
	branch eax_317 != 0x00000000 l0000000000411440
// DataOut: eax fs r12 r13 r14 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411440:
	ebp_210 = 0x00000001 (alias)
	branch eax_317 != 0x00000022 l00000000004113C0
// DataOut: ebp fs r12 r13 r14 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041144E:
// DataOut: ebp fs r12 r13 r14 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411413:
	ebp_210 = 0x00000000 (alias)
// DataOut: ebp fs r12 r13 r14 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411415:
	branch r8 == 0x0000000000000000 l0000000000411422
// DataOut: ebp fs r12 r13 r14 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041141A:
	word32 edx_355 = (word32) Mem178[r14_184:byte]
	byte dl_357 = (byte) edx_355
	branch dl_357 != 0x00 l0000000000411450
// DataOut: dl ebp edx fs r12 r13 r14 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411450:
	edx_222 = (word32) (uint64) edx_355 (alias)
	branch strchr(r8, DPB(r15_32, (int32) dl_357, 0)) == 0x0000000000000000 l0000000000411500
// DataOut: dl ebp edx fs r12 r13 r14 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041146C:
	word32 edx_237 = (word32) (uint64) edx_222
	branch strchr(r8, 0x0000000000000030) == 0x0000000000000000 l00000000004114A3
// DataOut: dl ebp fs r13 r14 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411486:
	byte al_294 = (byte) (word32) Mem178[r14_184 + 0x0000000000000001:byte]
	branch al_294 == 0x44 l000000000041173A
// DataOut: al dl ebp fs r13 r14 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411493:
	branch al_294 == 0x69 l0000000000411722
// DataOut: al dl ebp fs r13 r14 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411722:
// DataOut: dl eax ebp fs r13 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041149B:
	branch al_294 == 0x42 l000000000041173A
// DataOut: dl ebp fs r13 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041173A:
// DataOut: dl eax ebp fs r13 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114A3:
// DataOut: dl eax ebp fs r13 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114AD:
	word64 rdx_246 = (uint64) (edx_237 - 0x00000042)
	byte dl_248 = (byte) rdx_246
	branch dl_248 >u 0x35 l0000000000411500
// DataOut: dl eax ebp fs r13 r14b r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411500:
	Mem213[rcx:word64] = rbx_187
	eax_128 = (word32) (uint64) ((word32) (uint64) ebp_210 | 0x00000002) (alias)
// DataOut: eax fs r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114B5:
	word32 edx_251 = (word32) dl_248
	word64 rdx_252 = DPB(rdx_246, edx_251, 0)
	word64 rsp_253
	word64 r15_254
	word64 r14_255
	word32 r14d_256
	word32 edx_257
	word64 r13_258
	word64 r12_259
	word64 rbp_260
	word64 rbx_261
	byte SCZO_262
	byte CZ_263
	word64 rax_264
	word64 rdi_265
	word64 rsi_266
	byte SZO_267
	bool C_268
	word64 rcx_269
	word64 r8_270
	bool Z_271
	word32 ecx_272
	word64 rdx_273
	word32 esi_274
	word32 edi_275
	word32 ebx_276
	word32 r9d_277
	byte bl_278
	word64 r9_279
	word32 eax_280
	word32 ebp_281
	byte dl_282
	byte al_283
	byte cl_284
	byte r14b_285
	call Mem178[rdx_252 * 0x0000000000000008 + 0x00416E38:word64] (retsize: 8; depth: 96)
		uses: al_245,bl_219,C_235,cl_239,CZ_250,dl_248,dwLoc50_231,eax_244,ebp_228,ebx_220,ecx_240,edi,edx_251,esi_221,qwLoc08_4,qwLoc10_7,qwLoc18_14,qwLoc20_17,qwLoc28_20,qwLoc30_23,qwLoc50_181,r12_39,r13_37,r14_184,r14b_186,r14d_185,r15_40,r8_190,r9_62,r9d_61,rax_243,rbp_227,rbx_226,rcx_242,rdi_230,rdx_252,rsi_229,rsp_24,SCZO_249,SZO_233,Z_241
		defs: al_283,bl_278,C_268,cl_284,CZ_263,dl_282,eax_280,ebp_281,ebx_276,ecx_272,edi_275,edx_257,esi_274,r12_259,r13_258,r14_255,r14b_285,r14d_256,r15_254,r8_270,r9_279,r9d_277,rax_264,rbp_260,rbx_261,rcx_269,rdi_265,rdx_273,rsi_266,rsp_253,SCZO_262,SZO_267,Z_271
	return eax_280
// DataOut: eax ebp fs r14b r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000411422:
	Mem334[rcx:word64] = rax_183
	word32 ebp_343
	*ebpOut = (word32) rbp
	byte r14b_351
	*r14bOut = (byte) r14
	return (word32) (uint64) ebp_210
// DataOut: eax ebp fs r14b r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004113C0:
	eax_128 = 0x00000004 (alias)
// DataOut: eax fs r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113C5:
	word32 ebp_135
	*ebpOut = (word32) rbp
	byte r14b_143
	*r14bOut = (byte) r14
	return eax_128
// DataOut: eax ebp fs r14b r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000411360_exit:
// DataOut: eax ebp r14b r8
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebx:<invalid> rdx:<invalid> r9d:<invalid> rbx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn00000000004117B0(word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn00000000004117B0_entry:
// DataOut: edi fs r12 r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004117B0:
	word32 eax_16
	branch edi == 0x00000000 l0000000000411800
// DataOut: edi fs r12 r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411800:
	Mem65[__errno_location():word32] = 0x0000005F
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r12 r14 r15 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008

l00000000004117B8:
	bool Z_21 = (bool) cond(edi - 0x0000000A)
	eax_16 = (word32) (uint64) edi (alias)
	branch edi == 0x0000000A l00000000004117C8
// DataOut: eax fs r12 r14 r15 r8 rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008

l00000000004117C8:
	word64 rdx_30 = Mem0[rsi:word64]
	word64 rdi_31 = 0x00000000004137B1
	word64 rcx_33 = 0x000000000000000A
	word64 rsi_34 = rdx_30
// DataOut: eax fs r12 r14 r15 r8 rcx rdi rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:(uint64) edi

l00000000004117D8:
	branch rcx_33 == 0x0000000000000000 l00000000004117DA
// DataOut: eax fs r12 r14 r15 r8 rcx rdi rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117D8_1:
	Z_21 = (bool) cond(Mem0[rsi_68:byte] - Mem0[rdi_69:byte]) (alias)
	rsi_34 = rsi_68 + 0x0000000000000001
	rdi_31 = rdi_69 + 0x0000000000000001
	rcx_33 = rcx_33 - 0x0000000000000001
	word64 rsi_68 = rsi_34
	word64 rdi_69 = rdi_31
	branch Mem0[rsi_68:byte] != Mem0[rdi_69:byte] l00000000004117D8
// DataOut: eax fs r12 r14 r15 r8 rcx rdi rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DA:
	branch Z_21 l00000000004117BF
// DataOut: eax fs r12 r14 r15 r8 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DC:
	freecon(rdx_30)
	Mem53[__errno_location():word32] = 0x0000003D
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r12 r14 r15 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117BF:
	return eax_16
// DataOut: eax fs r12 r14 r15 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

fn00000000004117B0_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>



word32 fn0000000000411820(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsi rsp
fn0000000000411820_entry:
// DataOut: fs r12 r14 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411820:
	word32 edi_11 = (word32) (uint64) getfilecon(rdi, rsi)
// DataOut: edi fs r12 r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041182F_thunk_fn00000000004117B0:
	return fn00000000004117B0(rsi, edi_11)
// DataOut: eax fs r12 r14 r15 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rsi:rsi rdi:<invalid> -8(fp):rbx

fn0000000000411820_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx



word32 fn0000000000411840(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsi rsp
fn0000000000411840_entry:
// DataOut: fs r12 r14 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411840:
	word32 edi_11 = (word32) (uint64) lgetfilecon(rdi, rsi)
// DataOut: edi fs r12 r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041184F_thunk_fn00000000004117B0:
	return fn00000000004117B0(rsi, edi_11)
// DataOut: eax fs r12 r14 r15 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rsi:rsi rdi:<invalid> -8(fp):rbx

fn0000000000411840_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx



void fn0000000000411880(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax bl bx dh dl dx eax ebx edx esi rax rbx rdx rsi si sil
// Preserved: r12 rbp rbx rdi rsp
fn0000000000411880_entry:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411880:
	word64 rax_15 = DPB(rax, __fpending(rdi), 0)
	word32 ebx_18 = (word32) (uint64) Mem0[rdi:word32]
	word32 eax_21 = fn0000000000411D30(rdi)
	branch (word32) (uint64) (ebx_18 & 0x00000020) != 0x00000000 l00000000004118C0
// DataOut: dl ebx r12
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004118C0:
	branch eax_21 != 0x00000000 != 0x00 l00000000004118B4
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi eax:<invalid> rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004118C9:
	Mem88[__errno_location():word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi eax:<invalid> rbx:0x00000000FFFFFFFF rdi:rdi r12:rax dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l00000000004118A6:
	branch eax_21 != 0x00000000 == 0x00 l00000000004118B4
// DataOut: ebx r12
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi eax:<invalid> rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004118AA:
	branch rax_15 == 0x0000000000000000 l00000000004118E0
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi eax:<invalid> rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004118E0:
	__errno_location()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi eax:<invalid> rbx:0x00000000FFFFFFFF rdi:rdi r12:rax dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l00000000004118B4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbp:rdi eax:<invalid> rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000411880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp eax:<invalid> rbx:rbx rdi:rdi r12:r12 dl:Test(NE,Z) rax:(uint64) ebx bl:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn0000000000411900(selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs
// LiveOut: rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000411900_entry:
	rsp = fp
// DataOut: fs r12d
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -00E0(0)

l0000000000411900:
	rsp = fp - 8
	qwLoc08 = r15
	rdi = 0x000000000000000E
	rsp = fp - 16
	qwLoc10 = r14
	rsp = fp - 24
	qwLoc18 = r13
	rsp = fp - 32
	qwLoc20 = r12
	rsp = fp - 40
	qwLoc28 = rbp
	rsp = fp - 48
	qwLoc30 = rbx
	rsp = fp - 216
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	rax = nl_langinfo(0x000000000000000E)
	r14 = Mem0[0x000000000061B358:word64]
	r14d = (word32) r14 (alias)
	SZO = cond(rax & rax)
	Z = (bool) SZO (alias)
	C = false
	rbx = rax
	rax = 0x0000000000416919
	branch Test(NE,Z) l0000000000411944
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411940_1:
	rbx = 0x0000000000416919
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:0x000000000000000E rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411944:
	SZO = cond(r14 & r14)
	Z = (bool) SZO (alias)
	C = false
	branch Test(NE,Z) l000000000041196A
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:0x000000000000000E rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411949:
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:0x000000000000000E rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l00000000004119D4:
	rdi = 0x0000000000417002
	rax = getenv(0x0000000000417002)
	SZO = cond(rax & rax)
	Z = (bool) SZO (alias)
	C = false
	r15 = rax
	r15d = (word32) r15 (alias)
	branch Test(EQ,Z) l00000000004119EF
// DataOut: fs r14 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:0x000000000000000E rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l00000000004119E6:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000411C52
// DataOut: fs r14 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411C52:
	rdi = rax
	eax = strlen(rdi)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r14 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411C62:
	rax = rax - 0x0000000000000001
// DataOut: fs r12 r14 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l00000000004119EF:
	rax = 0x0000000000000007
	r12 = 0x0000000000000008
	r15 = 0x0000000000416FF3
// DataOut: fs r12 r14 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411A00:
	SCZO = cond(Mem0[r15 + rax:byte] - 0x2F)
	r13 = 0x0000000000000001
	dwLocD0 = 0x00000001
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r13 r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(32) Local -00E0(0)

l0000000000411C42:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	dwLocD0 = 0x00000000
// DataOut: fs r12 r13 r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> r13:0x0000000000000001 -208(fp):0x00000001 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(32) Local -00E0(0)

l0000000000411A19:
	r13 = r13 + r12
	rdi = r13 + 0x000000000000000E
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000411CF2
// DataOut: fs r12 r13 r14 r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(32) Local -00E0(0)

l0000000000411CF2:
	r14 = 0x0000000000416919
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411A31:
	rdx = r12
	rsi = r15
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	rdx = (uint64) dwLocD0
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000411A4D
// DataOut: fs r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411A47:
	Mem0[rbp + 0x0000000000000000:byte] = 0x2F
// DataOut: fs r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411A4D:
	r13 = r13 + rbp
	rax = 0x0000000072616863
	rsi = 0x0000000000020000
	Mem0[r13 + 0x0000000000000000:word64] = 0x0000000072616863
	rax = 0x0000000000000073
	Mem0[r13 + 0x0000000000000008:word32] = 0x61696C61
	Mem0[r13 + 0x000000000000000C:word16] = ax
	rdi = rbp
	rax = 0x0000000000000000
	eax = open(rdi, 0x0000000000020000)
	SZO = cond(eax & eax)
	C = false
	r12 = (uint64) eax
	branch Test(SG,S) l0000000000411C28
// DataOut: eax fs r12d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411A8A:
	rsi = 0x0000000000413A21
	rdi = (uint64) eax
	rax = fdopen(rdi, 0x0000000000413A21)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l0000000000411C20
// DataOut: fs r12d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000020000 -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411C20:
	rdi = (uint64) r12d
	eax = close(rdi)
// DataOut: fs rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000413A21 -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411AA2:
	r12 = fp - 0x00000000000000B8
	qwLocD0 = 0x0000000000000000
// DataOut: fs r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000413A21 -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411AB0:
	rax = Mem0[r15 + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[r15 + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411C01
// DataOut: fs r14 r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411ABE:
	rdx = rax + 0x0000000000000001
	Mem0[r15 + 0x0000000000000008:word64] = rdx
	edi = (word32) Mem0[rax:byte]
// DataOut: edi fs r14 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411AC9:
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0000000000411AB0
// DataOut: edi fs r14 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411ACE:
	eax = rdi - 0x0000000000000009
	SCZO = cond(eax - 0x00000001)
	branch Test(ULE,CZ) l0000000000411AB0
// DataOut: edi fs r14 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411AD6:
	SCZO = cond(edi - 0x00000023)
	branch Test(EQ,Z) l0000000000411C75
// DataOut: fs r14 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C75:
	rax = Mem0[r15 + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[r15 + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
// DataOut: fs r14 r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411D1D:
	rdi = r15
	eax = __uflow(rdi)
// DataOut: eax fs r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C83:
	rdx = rax + 0x0000000000000001
	Mem0[r15 + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
// DataOut: eax fs r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C8E:
	SCZO = cond(eax - 0x0000000A)
	branch Test(NE,Z) l0000000000411C70
// DataOut: eax fs r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C70:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000411C93
// DataOut: eax fs r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C93:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000411AB0
// DataOut: fs r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411ADF:
	rsi = r15
	eax = ungetc(rdi, rsi)
	rcx = fp - 0x0000000000000078
	rax = 0x0000000000000000
	rdx = fp - 0x00000000000000B8
	rsi = 0x0000000000417012
	rdi = r15
	eax = fscanf(rdi, 0x0000000000417012, tLocE0)
	SCZO = cond(eax - 0x00000001)
	branch Test(LE,SZO) l0000000000411C9C
// DataOut: fs r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411B07:
	rdx = fp - 0x00000000000000B8
// DataOut: fs r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:fp - 0x00000000000000B8 rsi:0x0000000000417012 edi:<invalid> rcx:fp - 0x0000000000000078 r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B0A:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B0A
// DataOut: al eax fs r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B21:
	rcx = (uint64) eax
	r10 = fp - 0x0000000000000078
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B33
// DataOut: al cl fs r10 r14 r15 rbp rbx rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B30_1:
	eax = ecx
// DataOut: al fs r10 r14 r15 rbp rbx rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B33:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B3B
// DataOut: al fs r10 r14 r15 rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B37_1:
	rdx = rcx
// DataOut: al fs r10 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B3B:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = rdx - (fp - 0x00000000000000B8)
	SCZO = cond(rdx)
// DataOut: fs r10 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B44:
	rcx = (uint64) Mem0[r10:word32]
	r10 = r10 + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B44
// DataOut: al eax fs r10 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B5C:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B69
// DataOut: al cl fs r10 r14 r15 rbp rbx rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B66_1:
	eax = ecx
// DataOut: al fs r10 r14 r15 rbp rbx rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B69:
	rcx = r10 + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B71
// DataOut: al fs r10 r14 r15 rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B6D_1:
	r10 = rcx
// DataOut: al fs r10 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B71:
	al = al + al
	SCZO = cond(al)
	rax = fp - 0x0000000000000078
	r10 = r10 - 0x03 - C
	r10 = r10 - (fp - 0x0000000000000078)
	SCZO = cond(qwLocD0 - 0x0000000000000000)
	rax = r10 + rdx
	branch Test(NE,Z) l0000000000411CBC
// DataOut: fs r10 r14 r15 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411CBC:
	rax = rax + qwLocD0
	SCZO = cond(rax)
	rdi = r14
	qwLocC0 = r10
	qwLocC8 = rdx
	rcx = rax + 0x0000000000000002
	rsi = rax + 0x0000000000000003
	qwLocD0 = rcx
	rax = realloc(rdi, rsi)
	r10 = qwLocC0
	r13 = rax
	rdx = qwLocC8
// DataOut: fs r10 r13 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411B8F:
	rcx = rax + 0x0000000000000002
	rdi = rax + 0x0000000000000003
	qwLocC0 = rdx
	qwLocC8 = r10
	qwLocD0 = rcx
	rax = malloc(rdi)
	r10 = qwLocC8
	rdx = qwLocC0
	r13 = rax
// DataOut: fs r10 r13 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411BB8:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000411D02
// DataOut: fs r10 r13 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411D02:
	rdi = r14
	r14 = 0x0000000000416919
	free(rdi)
	rdi = r15
	eax = fn0000000000411D30(rdi)
// DataOut: fs r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411BC1:
	r14 = qwLocD0
	rdi = 0xFFFFFFFFFFFFFFFE
	rsi = fp - 0x00000000000000B8
	rdi = 0xFFFFFFFFFFFFFFFE - rdx
	r14 = r14 - r10
	rdi = rdi + r14
	rdi = rdi + r13
	rax = strcpy(rdi, fp - 0x00000000000000B8)
	rdi = r13 - 0x0000000000000001 + r14
	rsi = fp - 0x0000000000000078
	r14 = r13
	rax = strcpy(rdi, fp - 0x0000000000000078)
	rax = Mem0[r15 + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[r15 + 0x0000000000000010:word64])
	branch Test(ULT,C) l0000000000411ABE
// DataOut: fs r14 r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C01:
	rdi = r15
	eax = __uflow(rdi)
	SCZO = cond(eax - 0xFFFFFFFF)
	rdi = (uint64) eax
	branch Test(EQ,Z) l0000000000411C9C
// DataOut: edi fs r14 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C9C:
	rdi = r15
	eax = fn0000000000411D30(rdi)
	rax = qwLocD0
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
// DataOut: fs r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C28:
	r14 = 0x0000000000416919
// DataOut: fs r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411CB2:
	Mem0[r14 + rax:byte] = 0x00
// DataOut: fs r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C2E:
	rdi = rbp
	free(rdi)
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C36:
	Mem0[0x000000000061B358:word64] = r14
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l000000000041196A:
	ebp = (word32) Mem0[r14:byte]
	rbp = DPB(rbp, ebp, 0) (alias)
	bpl = (byte) ebp (alias)
	SZO = cond(bpl & bpl)
	Z = (bool) SZO (alias)
	C = false
	branch Test(EQ,Z) l000000000041199C
// DataOut: bpl fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411973:
	rsi = r14
	rdi = rbx
	eax = strcmp(rdi, rsi)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041198F
// DataOut: bpl fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411982:
	SCZO = cond(bpl - 0x2A)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411988:
	SCZO = cond(Mem0[r14 + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411950:
	rdi = r14
	eax = strlen(rdi)
	rbp = r14 + 0x0000000000000001 + rax
	rdi = rbp
	eax = strlen(rdi)
	r14 = rbp + 0x0000000000000001 + rax
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l000000000041198F:
	rdi = r14
	eax = strlen(rdi)
	rbx = r14 + 0x0000000000000001 + rax
// DataOut: fs rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l000000000041199C:
	SCZO = cond(Mem0[rbx:byte] - 0x00)
	rax = 0x0000000000416FFC
	branch Test(NE,Z) l00000000004119A8
// DataOut: fs rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119A4_1:
	rbx = 0x0000000000416FFC
// DataOut: fs rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:0xFC -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119A8:
	rcx = qwLoc40
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000411CFD
// DataOut: fs rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:0xFC -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32)

l0000000000411CFD:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004119C2:
	rsp = fp - 48
	SCZO = cond(fp - 48)
	rbx = qwLoc30
	rsp = fp - 40
	rbp = qwLoc28
	rsp = fp - 32
	r12 = qwLoc20
	rsp = fp - 24
	r13 = qwLoc18
	rsp = fp - 16
	r14 = qwLoc10
	rsp = fp - 8
	r15 = qwLoc08
	rsp = fp
	return rax
// DataOut: fs r12d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000411900_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r14:r14 rbx:rbx ebp:<invalid> rcx:<invalid> rbp:rbp r12:r12 r13:r13 r15:r15 rsi:<invalid> eax:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000411C14:
// DataOut: edi fs r14 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)



word32 fn0000000000411D30(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: r12 rbp rbx rdi rsp
fn0000000000411D30_entry:
// DataOut: ebx fs r14 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411D30:
	branch fileno(rdi) < 0x00000000 l0000000000411D9F
// DataOut: fs r14 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D43:
	branch __freading(rdi) != 0x00000000 l0000000000411D80
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbx:rdi eax:<invalid> rdi:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D80:
	branch DPB(rax, lseek((uint64) fileno(rdi), 0x0000000000000000, 0x0000000000000001), 0) != 0xFFFFFFFFFFFFFFFF l0000000000411D4C
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbx:rdi eax:<invalid> rdi:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D4C:
	branch fn0000000000411DB0(rdi) == 0x00000000 l0000000000411D9C
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbx:rdi eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D9C:
// DataOut: fs r14 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbx:rdi eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D9F:
	return fclose(rdi)
// DataOut: eax ebx fs r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbx:rdi eax:<invalid> rdi:rdi rsi:<invalid> rdx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000411D58:
	word64 rax_80 = __errno_location()
	word32 r12d_83 = (word32) (uint64) Mem0[rax_80:word32]
	word32 eax_101 = fclose(rdi)
	branch r12d_83 == 0x00000000 l0000000000411D79
// DataOut: eax fs r12d r14 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbx:rdi eax:<invalid> rdi:rdi rsi:<invalid> rdx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D70:
	Mem99[rax_80:word32] = r12d_83
	eax_101 = 0xFFFFFFFF (alias)
// DataOut: eax fs r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbx:rdi eax:<invalid> rdi:rdi rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D79:
	return eax_101
// DataOut: eax ebx fs r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 24 rbx:rdi eax:<invalid> rdi:rdi rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000411D30_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:rdi rbp:rbp r12:r12 rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn0000000000411DB0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rbx rdi rsp
fn0000000000411DB0_entry:
// DataOut: fs r14 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB0:
	branch rdi == 0x0000000000000000 l0000000000411DC2
// DataOut: fs r14 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411DB9:
	branch __freading(rdi) != 0x00000000 l0000000000411DD0
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi -8(fp):rbx

l0000000000411DD0:
	branch (Mem0[rdi:word32] & 0x00000100) == 0x00000000 l0000000000411DC2
// DataOut: fs r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi eax:<invalid> -8(fp):rbx

l0000000000411DD8:
	fn0000000000411DF0(0x0000000000000001, 0x0000000000000000, rdi)
	return fflush(rdi)
// DataOut: eax fs r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi eax:<invalid> -8(fp):rbx

l0000000000411DC2:
	return fflush(rdi)
// DataOut: eax fs r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 8 rbx:rdi eax:<invalid> -8(fp):rbx

fn0000000000411DB0_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:rdi rdx:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx



void fn0000000000411DF0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rbx rdi rsi rsp
fn0000000000411DF0_entry:
// DataOut: edx fs r14 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DF0:
	branch Mem0[rdi + 0x0000000000000010:word64] == Mem0[rdi + 0x0000000000000008:word64] l0000000000411E10
// DataOut: edx fs r14 rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411E10:
	word64 rax_39 = Mem0[rdi + 0x0000000000000020:word64]
	branch Mem0[rdi + 0x0000000000000028:word64] != rax_39 l0000000000411E02
// DataOut: edx fs r14 rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E1A:
	branch Mem0[rdi + 0x0000000000000048:word64] != 0x0000000000000000 l0000000000411E02
// DataOut: edx fs r14 rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E21:
	word64 rax_52 = DPB(rax_39, lseek((uint64) fileno(rdi), rsi, (uint64) edx), 0)
	branch rax_52 == 0xFFFFFFFFFFFFFFFF l0000000000411E4F
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E43:
	Mem63[rdi:word32] = Mem0[rdi:word32] & 0xFFFFFFEF
	Mem65[rdi + 0x0000000000000090:word64] = rax_52
// DataOut: fs r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:rsi rdi:<invalid> -24(fp):rsi -12(fp):edx -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E4F:
	return
// DataOut: fs r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:rsi rdi:<invalid> -24(fp):rsi -12(fp):edx -8(fp):rbx

l0000000000411E02:
	fseeko(rdi, rsi, rdx)
	return
// DataOut: fs r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx

fn0000000000411DF0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rsi:rsi -24(fp):rsi -12(fp):edx -8(fp):rbx



void fn0000000000411EE0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rsp
fn0000000000411EE0_entry:
// DataOut: ebx fs r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EE0:
	word64 rdx_16
	branch 0x000000000061A3A8 == 0x0000000000000000 l0000000000411EF6
// DataOut: ebx fs r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EF6:
	rdx_16 = 0x0000000000000000
// DataOut: ebx fs r15 rbp rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEC:
	rdx_16 = Mem0[0x000000000061A3A8:word64]
// DataOut: ebx fs r15 rbp rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEF:
	__cxa_atexit(rdi, 0x0000000000000000, rdx_16)
	return
// DataOut: ebx fs r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid>

fn0000000000411EE0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid>



void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO
// Preserved: rsp
_fini_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411EFC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

_fini_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



