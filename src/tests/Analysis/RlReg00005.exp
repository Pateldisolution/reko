// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ah al ax bh bl bx ch cl cx di dil eax ebx ecx edi es rax rbx rcx rdi
	Preserved: sp
// fn0C00_0000
void fn0C00_0000()
// SymbolicIn: sp:fp
fn0C00_0000_entry:
	sp = fp
// DataOut: ds
// DataOut (flags): 

// SymbolicIn: sp:fp
l0C00_0000:
	call fn0C00_000C (retsize: 2; depth: 2)
	Mem0[ds:0x0300:word16] = bx
	Mem0[ds:0x0302:byte] = 0x00
	return
// DataOut:
// DataOut (flags): 

// SymbolicIn: sp:fp cx:<invalid> es:<invalid> di:<invalid> al:0x00 ah:<invalid> bx:<invalid> cl:0x00
fn0C00_0000_exit:
// DataOut:
// DataOut (flags): 

// fn0C00_000C /////////////////////
	LiveOut:   bx ds
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ah al ax bh bl bx ch cl cx di dil eax ebx ecx edi es rax rbx rcx rdi
	Preserved: sp
// fn0C00_000C
void fn0C00_000C()
// SymbolicIn: sp:fp
fn0C00_000C_entry:
	sp = fp
// DataOut: ds
// DataOut (flags): 

// SymbolicIn: sp:fp
l0C00_000C:
	cx = ds
	es = cx
	di = 0x7E0F
	cx = 0x000C
	al = 0x00
	SZO = cond(0x00)
	C = false
// DataOut: al cx di ds es
// DataOut (flags): Z

// SymbolicIn: sp:fp cx:<invalid> es:ds di:<invalid> al:0x00
l0C00_0019:
	branch cx == 0x0000 l0C00_001B
// DataOut: al cx di ds es
// DataOut (flags): Z

// SymbolicIn: sp:fp cx:<invalid> es:ds di:<invalid> al:0x00
l0C00_0019_1:
	SCZO = cond(0x00 - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0C00_0019
// DataOut: al cx di ds es
// DataOut (flags): Z

// SymbolicIn: sp:fp cx:<invalid> es:ds di:<invalid> al:0x00
l0C00_001B:
	branch Test(EQ,Z) l0C00_002D
// DataOut: al di ds
// DataOut (flags): 

// SymbolicIn: sp:fp cx:<invalid> es:ds di:<invalid> al:0x00
l0C00_001D:
	ah = Mem0[ds:di + 0x0001:byte]
	Z = ax == 0x0000
	cx = __bsr(ax)
	cx = cx - 0x0008
	SCZO = cond(cx)
	bx = di
	bx = bx - 0x7E03
	SCZO = cond(bx)
	return
// DataOut: bx ds
// DataOut (flags): 

// SymbolicIn: sp:fp cx:<invalid> es:ds di:<invalid> al:0x00
l0C00_002D:
	bx = 0x0000
	SZO = cond(0x0000)
	C = false
	cl = 0x00
	SZO = cond(0x00)
	C = false
	return
// DataOut: bx ds
// DataOut (flags): 

// SymbolicIn: sp:fp cx:<invalid> es:ds di:<invalid> al:0x00 ah:<invalid> bx:<invalid> cl:0x00
fn0C00_000C_exit:
// DataOut: bx ds
// DataOut (flags): 

