// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  di ds
	BypassIn: 
	Trashed:   SCZO ah al ax di dil eax edi esi rax rdi rsi si sil
	Preserved: sp
// fn0C00_0000
void fn0C00_0000()
// SymbolicIn: sp:fp
fn0C00_0000_entry:
	sp = fp
// DataOut: di ds
// DataOut (flags): 

// SymbolicIn: sp:fp
l0C00_0000:
	si = 0x1230
	call fn0C00_0007 (retsize: 2; depth: 2)
	return
// DataOut:
// DataOut (flags): 

// SymbolicIn: sp:fp si:0x1230 ax:<invalid> di:<invalid>
fn0C00_0000_exit:
// DataOut:
// DataOut (flags): 

// fn0C00_0007 /////////////////////
	LiveOut:  
	MayUseIn:  di ds si
	BypassIn: 
	Trashed:   SCZO ah al ax di dil eax edi rax rdi
	Preserved: si sp
// fn0C00_0007
void fn0C00_0007()
// SymbolicIn: sp:fp
fn0C00_0007_entry:
	sp = fp
// DataOut: di ds si
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp
l0C00_0007:
	sp = fp - 2
	wLoc02 = si
	call fn0C00_0020 (retsize: 2; depth: 4)
	si = wLoc02
	sp = fp
	ax = Mem0[ds:si + 0x0028:word16]
	v7 = Mem0[ds:0x1444:word16] + ax
	Mem0[ds:0x1444:word16] = v7
	SCZO = cond(v7)
	SCZO = cond(Mem0[ds:di + 0x0030:byte] - 0x00)
	branch Test(EQ,Z) l0C00_001F
// DataOut: di ds si
// DataOut (flags): 

// SymbolicIn: sp:fp si:si ax:<invalid> -2(fp):si
l0C00_0019:
	di = Mem0[ds:di + 0x0030:word16]
	call fn0C00_0007 (retsize: 2; depth: 2)
// DataOut:
// DataOut (flags): 

// SymbolicIn: sp:fp si:si ax:<invalid> di:<invalid> -2(fp):si
l0C00_001F:
	return
// DataOut:
// DataOut (flags): 

// SymbolicIn: sp:fp si:si ax:<invalid> di:<invalid> -2(fp):si
fn0C00_0007_exit:
// DataOut:
// DataOut (flags): 

// fn0C00_0020 /////////////////////
	LiveOut:   di ds
	MayUseIn:  ds
	BypassIn: 
	Trashed:  
	Preserved:
// fn0C00_0020
void fn0C00_0020()
// SymbolicIn: sp:fp
fn0C00_0020_entry:
	sp = fp
// DataOut: ds
// DataOut (flags): 

// SymbolicIn: sp:fp
l0C00_0020:
	esi = 0x00001234
	Mem0[ds:0x4321:word32] = 0x00001234
// DataOut:
// DataOut (flags): 

// SymbolicIn:
fn0C00_0020_exit:
// DataOut: di ds
// DataOut (flags): 

