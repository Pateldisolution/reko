// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
	Preserved: sp
// fn0C00_0000
void fn0C00_0000()
// SymbolicIn: sp:fp
fn0C00_0000_entry:
	sp = fp
// DataOut: ds
// DataOut (flags): 

// SymbolicIn: sp:fp
l0C00_0000:
	ax = 0x0001
	cl = 0x00
	bx = 0x0001
	ch = 0x02
	call fn0C00_001E (retsize: 2; depth: 2)
	bx = 0x0005
	ch = 0x03
	call fn0C00_0032 (retsize: 2; depth: 2)
	Mem0[ds:0x0120:word16] = ax
	Mem0[ds:0x0122:byte] = cl
	return
// DataOut:
// DataOut (flags): 

// SymbolicIn: sp:fp ax:<invalid> cl:<invalid> bx:0x0005 ch:0x03 dx:<invalid>
fn0C00_0000_exit:
// DataOut:
// DataOut (flags): 

// fn0C00_001E /////////////////////
	LiveOut:   ax cl ds
	MayUseIn:  ax bx ch cl
	BypassIn: 
	Trashed:   SCZO ah al ax bh bl bx cl cx eax ebx ecx rax rbx rcx
	Preserved: sp
// fn0C00_001E
void fn0C00_001E()
// SymbolicIn: sp:fp
fn0C00_001E_entry:
	sp = fp
// DataOut: ax bx ch cl ds
// DataOut (flags): 

// SymbolicIn: sp:fp
l0C00_001E:
	cl = cl - ch
	SCZO = cond(cl)
	branch Test(ULT,C) l0C00_0027
// DataOut: ax bx ch cl ds
// DataOut (flags): 

// SymbolicIn: sp:fp cl:cl - ch
l0C00_0022:
	bx = bx >> cl
	SCZO = cond(bx)
// DataOut: ax bx ch cl ds
// DataOut (flags): 

// SymbolicIn: sp:fp cl:cl - ch
l0C00_0027:
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	ax = ax >> cl
	SCZO = cond(ax)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
// DataOut: ax bx ch cl ds
// DataOut (flags): 

// SymbolicIn: sp:fp cl:cl - ch bx:bx >> cl - ch ax:ax >> ch - cl
l0C00_002D:
	ax = ax + bx
	SCZO = cond(ax)
	cl = cl + ch
	SCZO = cond(cl)
	return
// DataOut: ax cl ds
// DataOut (flags): 

// SymbolicIn: sp:fp cl:cl - ch + ch bx:bx >> cl - ch ax:(ax >> ch - cl) + (bx >> cl - ch)
fn0C00_001E_exit:
// DataOut: ax cl ds
// DataOut (flags): 

// fn0C00_0032 /////////////////////
	LiveOut:   ax cl ds
	MayUseIn:  ax bx ch cl
	BypassIn: 
	Trashed:   SCZO ah al ax cl cx dh dl dx eax ecx edx rax rcx rdx
	Preserved: sp
// fn0C00_0032
void fn0C00_0032()
// SymbolicIn: sp:fp
fn0C00_0032_entry:
	sp = fp
// DataOut: ax bx ch cl ds
// DataOut (flags): 

// SymbolicIn: sp:fp
l0C00_0032:
	dx_ax = bx *s ax
	SCZO = cond(dx_ax)
	cl = cl + ch
	SCZO = cond(cl)
	return
// DataOut: ax cl ds
// DataOut (flags): 

// SymbolicIn: sp:fp Sequence dx:ax:bx *s ax cl:cl + ch
fn0C00_0032_exit:
// DataOut: ax cl ds
// DataOut (flags): 

