// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   ah al ax eax esi rax rsi si sil
	Preserved: sp
// fn0C00_0000
void fn0C00_0000()
// SymbolicIn: sp:fp
fn0C00_0000_entry:
	sp = fp
// DataOut: ds
// DataOut (flags): 

// SymbolicIn: sp:fp
l0C00_0000:
	call fn0C00_000D (retsize: 2; depth: 2)
	si = ax
	call fn0C00_001A (retsize: 2; depth: 2)
	Mem0[ds:0x0400:word16] = ax
	return
// DataOut:
// DataOut (flags): 

// SymbolicIn: sp:fp si:<invalid> ax:<invalid>
fn0C00_0000_exit:
// DataOut:
// DataOut (flags): 

// fn0C00_000D /////////////////////
	LiveOut:   ax ds
	MayUseIn:  ds
	BypassIn: 
	Trashed:   ah al ax eax rax
	Preserved: si sp
// fn0C00_000D
void fn0C00_000D()
// SymbolicIn: sp:fp
fn0C00_000D_entry:
	sp = fp
// DataOut: ds
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp
l0C00_000D:
	sp = fp - 2
	wLoc02 = si
	si = Mem0[ds:0x007A:word16]
	si = Mem0[ds:si + 0x0004:word16]
	ax = si + 0x0008
	si = wLoc02
	sp = fp
	return
// DataOut: ax ds
// DataOut (flags): 

// SymbolicIn: sp:fp si:si ax:<invalid> -2(fp):si
fn0C00_000D_exit:
// DataOut: ax ds
// DataOut (flags): 

// fn0C00_001A /////////////////////
	LiveOut:   ax ds
	MayUseIn:  ds si
	BypassIn: 
	Trashed:   ah al ax eax rax
	Preserved: si sp
// fn0C00_001A
void fn0C00_001A()
// SymbolicIn: sp:fp
fn0C00_001A_entry:
	sp = fp
// DataOut: ds si
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp
l0C00_001A:
	sp = fp - 2
	wLoc02 = si
	ax = Mem0[ds:si:word16]
	si = wLoc02
	sp = fp
	return
// DataOut: ax ds
// DataOut (flags): 

// SymbolicIn: sp:fp ax:<invalid> si:si -2(fp):si
fn0C00_001A_exit:
// DataOut: ax ds
// DataOut (flags): 

